pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __builtin_va_list = [*c]u8;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __gnuc_va_list;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:598:3: warning: TODO implement translation of stmt class GCCAsmStmtClass

// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:595:36: warning: unable to translate function, demoted to extern
pub extern fn __debugbreak() void;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:619:3: warning: TODO implement translation of stmt class GCCAsmStmtClass

// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:616:60: warning: unable to translate function, demoted to extern
pub extern fn __fastfail(arg_code: c_uint) noreturn;
pub extern fn __mingw_get_crt_info() [*c]const u8;
pub const rsize_t = usize;
pub const ptrdiff_t = c_longlong;
pub const wchar_t = c_ushort;
pub const wint_t = c_ushort;
pub const wctype_t = c_ushort;
pub const errno_t = c_int;
pub const __time32_t = c_long;
pub const __time64_t = c_longlong;
pub const time_t = __time64_t;
pub const struct_threadlocaleinfostruct = extern struct {
    _locale_pctype: [*c]const c_ushort = @import("std").mem.zeroes([*c]const c_ushort),
    _locale_mb_cur_max: c_int = @import("std").mem.zeroes(c_int),
    _locale_lc_codepage: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_threadmbcinfostruct = opaque {};
pub const pthreadlocinfo = [*c]struct_threadlocaleinfostruct;
pub const pthreadmbcinfo = ?*struct_threadmbcinfostruct;
pub const struct___lc_time_data = opaque {};
pub const struct_localeinfo_struct = extern struct {
    locinfo: pthreadlocinfo = @import("std").mem.zeroes(pthreadlocinfo),
    mbcinfo: pthreadmbcinfo = @import("std").mem.zeroes(pthreadmbcinfo),
};
pub const _locale_tstruct = struct_localeinfo_struct;
pub const _locale_t = [*c]struct_localeinfo_struct;
pub const struct_tagLC_ID = extern struct {
    wLanguage: c_ushort = @import("std").mem.zeroes(c_ushort),
    wCountry: c_ushort = @import("std").mem.zeroes(c_ushort),
    wCodePage: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const LC_ID = struct_tagLC_ID;
pub const LPLC_ID = [*c]struct_tagLC_ID;
pub const threadlocinfo = struct_threadlocaleinfostruct;
pub extern fn _itow_s(_Val: c_int, _DstBuf: [*c]wchar_t, _SizeInWords: usize, _Radix: c_int) errno_t;
pub extern fn _ltow_s(_Val: c_long, _DstBuf: [*c]wchar_t, _SizeInWords: usize, _Radix: c_int) errno_t;
pub extern fn _ultow_s(_Val: c_ulong, _DstBuf: [*c]wchar_t, _SizeInWords: usize, _Radix: c_int) errno_t;
pub extern fn _wgetenv_s(_ReturnSize: [*c]usize, _DstBuf: [*c]wchar_t, _DstSizeInWords: usize, _VarName: [*c]const wchar_t) errno_t;
pub extern fn _wdupenv_s(_Buffer: [*c][*c]wchar_t, _BufferSizeInWords: [*c]usize, _VarName: [*c]const wchar_t) errno_t;
pub extern fn _i64tow_s(_Val: c_longlong, _DstBuf: [*c]wchar_t, _SizeInWords: usize, _Radix: c_int) errno_t;
pub extern fn _ui64tow_s(_Val: c_ulonglong, _DstBuf: [*c]wchar_t, _SizeInWords: usize, _Radix: c_int) errno_t;
pub extern fn _wmakepath_s(_PathResult: [*c]wchar_t, _SizeInWords: usize, _Drive: [*c]const wchar_t, _Dir: [*c]const wchar_t, _Filename: [*c]const wchar_t, _Ext: [*c]const wchar_t) errno_t;
pub extern fn _wputenv_s(_Name: [*c]const wchar_t, _Value: [*c]const wchar_t) errno_t;
pub extern fn _wsearchenv_s(_Filename: [*c]const wchar_t, _EnvVar: [*c]const wchar_t, _ResultPath: [*c]wchar_t, _SizeInWords: usize) errno_t;
pub extern fn _wsplitpath_s(_FullPath: [*c]const wchar_t, _Drive: [*c]wchar_t, _DriveSizeInWords: usize, _Dir: [*c]wchar_t, _DirSizeInWords: usize, _Filename: [*c]wchar_t, _FilenameSizeInWords: usize, _Ext: [*c]wchar_t, _ExtSizeInWords: usize) errno_t;
pub const _onexit_t = ?*const fn () callconv(.c) c_int;
pub const struct__div_t = extern struct {
    quot: c_int = @import("std").mem.zeroes(c_int),
    rem: c_int = @import("std").mem.zeroes(c_int),
};
pub const div_t = struct__div_t;
pub const struct__ldiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub const ldiv_t = struct__ldiv_t;
pub const _LDOUBLE = extern struct {
    ld: [10]u8 = @import("std").mem.zeroes([10]u8),
};
pub const _CRT_DOUBLE = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
};
pub const _CRT_FLOAT = extern struct {
    f: f32 = @import("std").mem.zeroes(f32),
};
pub const _LONGDOUBLE = extern struct {
    x: c_longdouble = @import("std").mem.zeroes(c_longdouble),
};
pub const _LDBL12 = extern struct {
    ld12: [12]u8 = @import("std").mem.zeroes([12]u8),
};
pub extern fn ___mb_cur_max_func() c_int;
pub const _purecall_handler = ?*const fn () callconv(.c) void;
pub extern fn _set_purecall_handler(_Handler: _purecall_handler) _purecall_handler;
pub extern fn _get_purecall_handler() _purecall_handler;
pub const _invalid_parameter_handler = ?*const fn ([*c]const wchar_t, [*c]const wchar_t, [*c]const wchar_t, c_uint, usize) callconv(.c) void;
pub extern fn _set_invalid_parameter_handler(_Handler: _invalid_parameter_handler) _invalid_parameter_handler;
pub extern fn _get_invalid_parameter_handler() _invalid_parameter_handler;
pub extern fn _errno() [*c]c_int;
pub extern fn _set_errno(_Value: c_int) errno_t;
pub extern fn _get_errno(_Value: [*c]c_int) errno_t;
pub extern fn __doserrno() [*c]c_ulong;
pub extern fn _set_doserrno(_Value: c_ulong) errno_t;
pub extern fn _get_doserrno(_Value: [*c]c_ulong) errno_t;
pub extern fn __sys_errlist() [*c][*c]u8;
pub extern fn __sys_nerr() [*c]c_int;
pub extern fn __p___argv() [*c][*c][*c]u8;
pub extern fn __p__fmode() [*c]c_int;
pub extern fn __p___argc() [*c]c_int;
pub extern fn __p___wargv() [*c][*c][*c]wchar_t;
pub extern fn __p__pgmptr() [*c][*c]u8;
pub extern fn __p__wpgmptr() [*c][*c]wchar_t;
pub extern fn _get_pgmptr(_Value: [*c][*c]u8) errno_t;
pub extern fn _get_wpgmptr(_Value: [*c][*c]wchar_t) errno_t;
pub extern fn _set_fmode(_Mode: c_int) errno_t;
pub extern fn _get_fmode(_PMode: [*c]c_int) errno_t;
pub extern fn __p__environ() [*c][*c][*c]u8;
pub extern fn __p__wenviron() [*c][*c][*c]wchar_t;
pub extern fn __p__osplatform() [*c]c_uint;
pub extern fn __p__osver() [*c]c_uint;
pub extern fn __p__winver() [*c]c_uint;
pub extern fn __p__winmajor() [*c]c_uint;
pub extern fn __p__winminor() [*c]c_uint;
pub extern fn _get_osplatform(_Value: [*c]c_uint) errno_t;
pub extern fn _get_osver(_Value: [*c]c_uint) errno_t;
pub extern fn _get_winver(_Value: [*c]c_uint) errno_t;
pub extern fn _get_winmajor(_Value: [*c]c_uint) errno_t;
pub extern fn _get_winminor(_Value: [*c]c_uint) errno_t;
pub extern fn exit(_Code: c_int) noreturn;
pub extern fn _exit(_Code: c_int) noreturn;
pub extern fn quick_exit(_Code: c_int) noreturn;
pub extern fn _Exit(c_int) noreturn;
pub extern fn abort() noreturn;
pub extern fn _set_abort_behavior(_Flags: c_uint, _Mask: c_uint) c_uint;
pub extern fn abs(_X: c_int) c_int;
pub extern fn labs(_X: c_long) c_long;
pub inline fn _abs64(arg_x: c_longlong) c_longlong {
    var x = arg_x;
    _ = &x;
    return __builtin_llabs(x);
}
pub extern fn atexit(?*const fn () callconv(.c) void) c_int;
pub extern fn at_quick_exit(?*const fn () callconv(.c) void) c_int;
pub extern fn atof(_String: [*c]const u8) f64;
pub extern fn _atof_l(_String: [*c]const u8, _Locale: _locale_t) f64;
pub extern fn atoi(_Str: [*c]const u8) c_int;
pub extern fn _atoi_l(_Str: [*c]const u8, _Locale: _locale_t) c_int;
pub extern fn atol(_Str: [*c]const u8) c_long;
pub extern fn _atol_l(_Str: [*c]const u8, _Locale: _locale_t) c_long;
pub extern fn bsearch(_Key: ?*const anyopaque, _Base: ?*const anyopaque, _NumOfElements: usize, _SizeOfElements: usize, _PtFuncCompare: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) ?*anyopaque;
pub extern fn qsort(_Base: ?*anyopaque, _NumOfElements: usize, _SizeOfElements: usize, _PtFuncCompare: ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) void;
pub extern fn _byteswap_ushort(_Short: c_ushort) c_ushort;
pub extern fn _byteswap_ulong(_Long: c_ulong) c_ulong;
pub extern fn _byteswap_uint64(_Int64: c_ulonglong) c_ulonglong;
pub extern fn div(_Numerator: c_int, _Denominator: c_int) div_t;
pub extern fn getenv(_VarName: [*c]const u8) [*c]u8;
pub extern fn _itoa(_Value: c_int, _Dest: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn _i64toa(_Val: c_longlong, _DstBuf: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn _ui64toa(_Val: c_ulonglong, _DstBuf: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn _atoi64(_String: [*c]const u8) c_longlong;
pub extern fn _atoi64_l(_String: [*c]const u8, _Locale: _locale_t) c_longlong;
pub extern fn _strtoi64(_String: [*c]const u8, _EndPtr: [*c][*c]u8, _Radix: c_int) c_longlong;
pub extern fn _strtoi64_l(_String: [*c]const u8, _EndPtr: [*c][*c]u8, _Radix: c_int, _Locale: _locale_t) c_longlong;
pub extern fn _strtoui64(_String: [*c]const u8, _EndPtr: [*c][*c]u8, _Radix: c_int) c_ulonglong;
pub extern fn _strtoui64_l(_String: [*c]const u8, _EndPtr: [*c][*c]u8, _Radix: c_int, _Locale: _locale_t) c_ulonglong;
pub extern fn ldiv(_Numerator: c_long, _Denominator: c_long) ldiv_t;
pub extern fn _ltoa(_Value: c_long, _Dest: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn mblen(_Ch: [*c]const u8, _MaxCount: usize) c_int;
pub extern fn _mblen_l(_Ch: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) c_int;
pub extern fn _mbstrlen(_Str: [*c]const u8) usize;
pub extern fn _mbstrlen_l(_Str: [*c]const u8, _Locale: _locale_t) usize;
pub extern fn _mbstrnlen(_Str: [*c]const u8, _MaxCount: usize) usize;
pub extern fn _mbstrnlen_l(_Str: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) usize;
pub extern fn mbtowc(noalias _DstCh: [*c]wchar_t, noalias _SrcCh: [*c]const u8, _SrcSizeInBytes: usize) c_int;
pub extern fn _mbtowc_l(noalias _DstCh: [*c]wchar_t, noalias _SrcCh: [*c]const u8, _SrcSizeInBytes: usize, _Locale: _locale_t) c_int;
pub extern fn mbstowcs(noalias _Dest: [*c]wchar_t, noalias _Source: [*c]const u8, _MaxCount: usize) usize;
pub extern fn _mbstowcs_l(noalias _Dest: [*c]wchar_t, noalias _Source: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) usize;
pub extern fn mkstemp(template_name: [*c]u8) c_int;
pub extern fn rand() c_int;
pub extern fn _set_error_mode(_Mode: c_int) c_int;
pub extern fn srand(_Seed: c_uint) void;
pub extern fn strtod(_Str: [*c]const u8, _EndPtr: [*c][*c]u8) f64;
pub extern fn strtof(nptr: [*c]const u8, endptr: [*c][*c]u8) f32;
pub extern fn strtold([*c]const u8, [*c][*c]u8) c_longdouble;
pub extern fn __strtod(noalias [*c]const u8, noalias [*c][*c]u8) f64;
pub extern fn __mingw_strtof(noalias [*c]const u8, noalias [*c][*c]u8) f32;
pub extern fn __mingw_strtod(noalias [*c]const u8, noalias [*c][*c]u8) f64;
pub extern fn __mingw_strtold(noalias [*c]const u8, noalias [*c][*c]u8) c_longdouble;
pub extern fn _strtof_l(noalias _Str: [*c]const u8, noalias _EndPtr: [*c][*c]u8, _Locale: _locale_t) f32;
pub extern fn _strtod_l(noalias _Str: [*c]const u8, noalias _EndPtr: [*c][*c]u8, _Locale: _locale_t) f64;
pub extern fn strtol(_Str: [*c]const u8, _EndPtr: [*c][*c]u8, _Radix: c_int) c_long;
pub extern fn _strtol_l(noalias _Str: [*c]const u8, noalias _EndPtr: [*c][*c]u8, _Radix: c_int, _Locale: _locale_t) c_long;
pub extern fn strtoul(_Str: [*c]const u8, _EndPtr: [*c][*c]u8, _Radix: c_int) c_ulong;
pub extern fn _strtoul_l(noalias _Str: [*c]const u8, noalias _EndPtr: [*c][*c]u8, _Radix: c_int, _Locale: _locale_t) c_ulong;
pub extern fn system(_Command: [*c]const u8) c_int;
pub extern fn _ultoa(_Value: c_ulong, _Dest: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn wctomb(_MbCh: [*c]u8, _WCh: wchar_t) c_int;
pub extern fn _wctomb_l(_MbCh: [*c]u8, _WCh: wchar_t, _Locale: _locale_t) c_int;
pub extern fn wcstombs(noalias _Dest: [*c]u8, noalias _Source: [*c]const wchar_t, _MaxCount: usize) usize;
pub extern fn _wcstombs_l(noalias _Dest: [*c]u8, noalias _Source: [*c]const wchar_t, _MaxCount: usize, _Locale: _locale_t) usize;
pub extern fn calloc(_NumOfElements: c_ulonglong, _SizeOfElements: c_ulonglong) ?*anyopaque;
pub extern fn free(_Memory: ?*anyopaque) void;
pub extern fn malloc(_Size: c_ulonglong) ?*anyopaque;
pub extern fn realloc(_Memory: ?*anyopaque, _NewSize: c_ulonglong) ?*anyopaque;
pub extern fn _aligned_free(_Memory: ?*anyopaque) void;
pub extern fn _aligned_malloc(_Size: usize, _Alignment: usize) ?*anyopaque;
pub extern fn _aligned_offset_malloc(_Size: usize, _Alignment: usize, _Offset: usize) ?*anyopaque;
pub extern fn _aligned_realloc(_Memory: ?*anyopaque, _Size: usize, _Alignment: usize) ?*anyopaque;
pub extern fn _aligned_offset_realloc(_Memory: ?*anyopaque, _Size: usize, _Alignment: usize, _Offset: usize) ?*anyopaque;
pub extern fn _recalloc(_Memory: ?*anyopaque, _Count: usize, _Size: usize) ?*anyopaque;
pub extern fn _aligned_recalloc(_Memory: ?*anyopaque, _Count: usize, _Size: usize, _Alignment: usize) ?*anyopaque;
pub extern fn _aligned_offset_recalloc(_Memory: ?*anyopaque, _Count: usize, _Size: usize, _Alignment: usize, _Offset: usize) ?*anyopaque;
pub extern fn _aligned_msize(_Memory: ?*anyopaque, _Alignment: usize, _Offset: usize) usize;
pub extern fn _itow(_Value: c_int, _Dest: [*c]wchar_t, _Radix: c_int) [*c]wchar_t;
pub extern fn _ltow(_Value: c_long, _Dest: [*c]wchar_t, _Radix: c_int) [*c]wchar_t;
pub extern fn _ultow(_Value: c_ulong, _Dest: [*c]wchar_t, _Radix: c_int) [*c]wchar_t;
pub extern fn __mingw_wcstod(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t) f64;
pub extern fn __mingw_wcstof(noalias nptr: [*c]const wchar_t, noalias endptr: [*c][*c]wchar_t) f32;
pub extern fn __mingw_wcstold(noalias [*c]const wchar_t, noalias [*c][*c]wchar_t) c_longdouble;
pub extern fn wcstod(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t) f64;
pub extern fn wcstof(noalias nptr: [*c]const wchar_t, noalias endptr: [*c][*c]wchar_t) f32;
pub extern fn wcstold(noalias [*c]const wchar_t, noalias [*c][*c]wchar_t) c_longdouble;
pub extern fn _wcstod_l(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t, _Locale: _locale_t) f64;
pub extern fn _wcstof_l(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t, _Locale: _locale_t) f32;
pub extern fn wcstol(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t, _Radix: c_int) c_long;
pub extern fn _wcstol_l(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t, _Radix: c_int, _Locale: _locale_t) c_long;
pub extern fn wcstoul(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t, _Radix: c_int) c_ulong;
pub extern fn _wcstoul_l(noalias _Str: [*c]const wchar_t, noalias _EndPtr: [*c][*c]wchar_t, _Radix: c_int, _Locale: _locale_t) c_ulong;
pub extern fn _wgetenv(_VarName: [*c]const wchar_t) [*c]wchar_t;
pub extern fn _wsystem(_Command: [*c]const wchar_t) c_int;
pub extern fn _wtof(_Str: [*c]const wchar_t) f64;
pub extern fn _wtof_l(_Str: [*c]const wchar_t, _Locale: _locale_t) f64;
pub extern fn _wtoi(_Str: [*c]const wchar_t) c_int;
pub extern fn _wtoi_l(_Str: [*c]const wchar_t, _Locale: _locale_t) c_int;
pub extern fn _wtol(_Str: [*c]const wchar_t) c_long;
pub extern fn _wtol_l(_Str: [*c]const wchar_t, _Locale: _locale_t) c_long;
pub extern fn _i64tow(_Val: c_longlong, _DstBuf: [*c]wchar_t, _Radix: c_int) [*c]wchar_t;
pub extern fn _ui64tow(_Val: c_ulonglong, _DstBuf: [*c]wchar_t, _Radix: c_int) [*c]wchar_t;
pub extern fn _wtoi64(_Str: [*c]const wchar_t) c_longlong;
pub extern fn _wtoi64_l(_Str: [*c]const wchar_t, _Locale: _locale_t) c_longlong;
pub extern fn _wcstoi64(_Str: [*c]const wchar_t, _EndPtr: [*c][*c]wchar_t, _Radix: c_int) c_longlong;
pub extern fn _wcstoi64_l(_Str: [*c]const wchar_t, _EndPtr: [*c][*c]wchar_t, _Radix: c_int, _Locale: _locale_t) c_longlong;
pub extern fn _wcstoui64(_Str: [*c]const wchar_t, _EndPtr: [*c][*c]wchar_t, _Radix: c_int) c_ulonglong;
pub extern fn _wcstoui64_l(_Str: [*c]const wchar_t, _EndPtr: [*c][*c]wchar_t, _Radix: c_int, _Locale: _locale_t) c_ulonglong;
pub extern fn _putenv(_EnvString: [*c]const u8) c_int;
pub extern fn _wputenv(_EnvString: [*c]const wchar_t) c_int;
pub extern fn _fullpath(_FullPath: [*c]u8, _Path: [*c]const u8, _SizeInBytes: usize) [*c]u8;
pub extern fn _ecvt(_Val: f64, _NumOfDigits: c_int, _PtDec: [*c]c_int, _PtSign: [*c]c_int) [*c]u8;
pub extern fn _fcvt(_Val: f64, _NumOfDec: c_int, _PtDec: [*c]c_int, _PtSign: [*c]c_int) [*c]u8;
pub extern fn _gcvt(_Val: f64, _NumOfDigits: c_int, _DstBuf: [*c]u8) [*c]u8;
pub extern fn _atodbl(_Result: [*c]_CRT_DOUBLE, _Str: [*c]u8) c_int;
pub extern fn _atoldbl(_Result: [*c]_LDOUBLE, _Str: [*c]u8) c_int;
pub extern fn _atoflt(_Result: [*c]_CRT_FLOAT, _Str: [*c]u8) c_int;
pub extern fn _atodbl_l(_Result: [*c]_CRT_DOUBLE, _Str: [*c]u8, _Locale: _locale_t) c_int;
pub extern fn _atoldbl_l(_Result: [*c]_LDOUBLE, _Str: [*c]u8, _Locale: _locale_t) c_int;
pub extern fn _atoflt_l(_Result: [*c]_CRT_FLOAT, _Str: [*c]u8, _Locale: _locale_t) c_int;
pub extern fn _lrotl(c_ulong, c_int) c_ulong;
pub extern fn _lrotr(c_ulong, c_int) c_ulong;
pub extern fn _makepath(_Path: [*c]u8, _Drive: [*c]const u8, _Dir: [*c]const u8, _Filename: [*c]const u8, _Ext: [*c]const u8) void;
pub extern fn _onexit(_Func: _onexit_t) _onexit_t;
pub extern fn perror(_ErrMsg: [*c]const u8) void;
pub extern fn _rotl64(_Val: c_ulonglong, _Shift: c_int) c_ulonglong;
pub extern fn _rotr64(Value: c_ulonglong, Shift: c_int) c_ulonglong;
pub extern fn _rotr(_Val: c_uint, _Shift: c_int) c_uint;
pub extern fn _rotl(_Val: c_uint, _Shift: c_int) c_uint;
pub extern fn _searchenv(_Filename: [*c]const u8, _EnvVar: [*c]const u8, _ResultPath: [*c]u8) void;
pub extern fn _splitpath(_FullPath: [*c]const u8, _Drive: [*c]u8, _Dir: [*c]u8, _Filename: [*c]u8, _Ext: [*c]u8) void;
pub extern fn _swab(_Buf1: [*c]u8, _Buf2: [*c]u8, _SizeInBytes: c_int) void;
pub extern fn _wfullpath(_FullPath: [*c]wchar_t, _Path: [*c]const wchar_t, _SizeInWords: usize) [*c]wchar_t;
pub extern fn _wmakepath(_ResultPath: [*c]wchar_t, _Drive: [*c]const wchar_t, _Dir: [*c]const wchar_t, _Filename: [*c]const wchar_t, _Ext: [*c]const wchar_t) void;
pub extern fn _wperror(_ErrMsg: [*c]const wchar_t) void;
pub extern fn _wsearchenv(_Filename: [*c]const wchar_t, _EnvVar: [*c]const wchar_t, _ResultPath: [*c]wchar_t) void;
pub extern fn _wsplitpath(_FullPath: [*c]const wchar_t, _Drive: [*c]wchar_t, _Dir: [*c]wchar_t, _Filename: [*c]wchar_t, _Ext: [*c]wchar_t) void;
pub const _beep = @compileError("unable to resolve function type clang.TypeClass.MacroQualified");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdlib.h:572:24
pub const _seterrormode = @compileError("unable to resolve function type clang.TypeClass.MacroQualified");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdlib.h:574:24
pub const _sleep = @compileError("unable to resolve function type clang.TypeClass.MacroQualified");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdlib.h:575:24
pub extern fn ecvt(_Val: f64, _NumOfDigits: c_int, _PtDec: [*c]c_int, _PtSign: [*c]c_int) [*c]u8;
pub extern fn fcvt(_Val: f64, _NumOfDec: c_int, _PtDec: [*c]c_int, _PtSign: [*c]c_int) [*c]u8;
pub extern fn gcvt(_Val: f64, _NumOfDigits: c_int, _DstBuf: [*c]u8) [*c]u8;
pub extern fn itoa(_Val: c_int, _DstBuf: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn ltoa(_Val: c_long, _DstBuf: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn putenv(_EnvString: [*c]const u8) c_int;
pub extern fn swab(_Buf1: [*c]u8, _Buf2: [*c]u8, _SizeInBytes: c_int) void;
pub extern fn ultoa(_Val: c_ulong, _Dstbuf: [*c]u8, _Radix: c_int) [*c]u8;
pub extern fn onexit(_Func: _onexit_t) _onexit_t;
pub const lldiv_t = extern struct {
    quot: c_longlong = @import("std").mem.zeroes(c_longlong),
    rem: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub extern fn lldiv(c_longlong, c_longlong) lldiv_t;
pub extern fn llabs(c_longlong) c_longlong;
pub extern fn strtoll([*c]const u8, [*c][*c]u8, c_int) c_longlong;
pub extern fn strtoull([*c]const u8, [*c][*c]u8, c_int) c_ulonglong;
pub extern fn atoll([*c]const u8) c_longlong;
pub extern fn wtoll([*c]const wchar_t) c_longlong;
pub extern fn lltoa(c_longlong, [*c]u8, c_int) [*c]u8;
pub extern fn ulltoa(c_ulonglong, [*c]u8, c_int) [*c]u8;
pub extern fn lltow(c_longlong, [*c]wchar_t, c_int) [*c]wchar_t;
pub extern fn ulltow(c_ulonglong, [*c]wchar_t, c_int) [*c]wchar_t;
pub extern fn bsearch_s(_Key: ?*const anyopaque, _Base: ?*const anyopaque, _NumOfElements: rsize_t, _SizeOfElements: rsize_t, _PtFuncCompare: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.c) c_int, _Context: ?*anyopaque) ?*anyopaque;
pub extern fn _dupenv_s(_PBuffer: [*c][*c]u8, _PBufferSizeInBytes: [*c]usize, _VarName: [*c]const u8) errno_t;
pub extern fn getenv_s(_ReturnSize: [*c]usize, _DstBuf: [*c]u8, _DstSize: rsize_t, _VarName: [*c]const u8) errno_t;
pub extern fn _itoa_s(_Value: c_int, _DstBuf: [*c]u8, _Size: usize, _Radix: c_int) errno_t;
pub extern fn _i64toa_s(_Val: c_longlong, _DstBuf: [*c]u8, _Size: usize, _Radix: c_int) errno_t;
pub extern fn _ui64toa_s(_Val: c_ulonglong, _DstBuf: [*c]u8, _Size: usize, _Radix: c_int) errno_t;
pub extern fn _ltoa_s(_Val: c_long, _DstBuf: [*c]u8, _Size: usize, _Radix: c_int) errno_t;
pub extern fn mbstowcs_s(_PtNumOfCharConverted: [*c]usize, _DstBuf: [*c]wchar_t, _SizeInWords: usize, _SrcBuf: [*c]const u8, _MaxCount: usize) errno_t;
pub extern fn _mbstowcs_s_l(_PtNumOfCharConverted: [*c]usize, _DstBuf: [*c]wchar_t, _SizeInWords: usize, _SrcBuf: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) errno_t;
pub extern fn _ultoa_s(_Val: c_ulong, _DstBuf: [*c]u8, _Size: usize, _Radix: c_int) errno_t;
pub extern fn wctomb_s(_SizeConverted: [*c]c_int, _MbCh: [*c]u8, _SizeInBytes: rsize_t, _WCh: wchar_t) errno_t;
pub extern fn _wctomb_s_l(_SizeConverted: [*c]c_int, _MbCh: [*c]u8, _SizeInBytes: usize, _WCh: wchar_t, _Locale: _locale_t) errno_t;
pub extern fn wcstombs_s(_PtNumOfCharConverted: [*c]usize, _Dst: [*c]u8, _DstSizeInBytes: usize, _Src: [*c]const wchar_t, _MaxCountInBytes: usize) errno_t;
pub extern fn _wcstombs_s_l(_PtNumOfCharConverted: [*c]usize, _Dst: [*c]u8, _DstSizeInBytes: usize, _Src: [*c]const wchar_t, _MaxCountInBytes: usize, _Locale: _locale_t) errno_t;
pub extern fn _ecvt_s(_DstBuf: [*c]u8, _Size: usize, _Val: f64, _NumOfDights: c_int, _PtDec: [*c]c_int, _PtSign: [*c]c_int) errno_t;
pub extern fn _fcvt_s(_DstBuf: [*c]u8, _Size: usize, _Val: f64, _NumOfDec: c_int, _PtDec: [*c]c_int, _PtSign: [*c]c_int) errno_t;
pub extern fn _gcvt_s(_DstBuf: [*c]u8, _Size: usize, _Val: f64, _NumOfDigits: c_int) errno_t;
pub extern fn _makepath_s(_PathResult: [*c]u8, _Size: usize, _Drive: [*c]const u8, _Dir: [*c]const u8, _Filename: [*c]const u8, _Ext: [*c]const u8) errno_t;
pub extern fn _putenv_s(_Name: [*c]const u8, _Value: [*c]const u8) errno_t;
pub extern fn _searchenv_s(_Filename: [*c]const u8, _EnvVar: [*c]const u8, _ResultPath: [*c]u8, _SizeInBytes: usize) errno_t;
pub extern fn _splitpath_s(_FullPath: [*c]const u8, _Drive: [*c]u8, _DriveSize: usize, _Dir: [*c]u8, _DirSize: usize, _Filename: [*c]u8, _FilenameSize: usize, _Ext: [*c]u8, _ExtSize: usize) errno_t;
pub extern fn qsort_s(_Base: ?*anyopaque, _NumOfElements: usize, _SizeOfElements: usize, _PtFuncCompare: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.c) c_int, _Context: ?*anyopaque) void;
pub const struct__heapinfo = extern struct {
    _pentry: [*c]c_int = @import("std").mem.zeroes([*c]c_int),
    _size: usize = @import("std").mem.zeroes(usize),
    _useflag: c_int = @import("std").mem.zeroes(c_int),
};
pub const _HEAPINFO = struct__heapinfo;
pub extern fn __p__amblksiz() [*c]c_uint;
pub extern fn __mingw_aligned_malloc(_Size: usize, _Alignment: usize) ?*anyopaque;
pub extern fn __mingw_aligned_free(_Memory: ?*anyopaque) void;
pub extern fn __mingw_aligned_offset_realloc(_Memory: ?*anyopaque, _Size: usize, _Alignment: usize, _Offset: usize) ?*anyopaque;
pub extern fn __mingw_aligned_realloc(_Memory: ?*anyopaque, _Size: usize, _Offset: usize) ?*anyopaque;
pub inline fn _mm_malloc(arg___size: usize, arg___align: usize) ?*anyopaque {
    var __size = arg___size;
    _ = &__size;
    var __align = arg___align;
    _ = &__align;
    if (__align == @as(usize, @bitCast(@as(c_longlong, @as(c_int, 1))))) {
        return malloc(__size);
    }
    if (!((__align & (__align -% @as(usize, @bitCast(@as(c_longlong, @as(c_int, 1)))))) != 0) and (__align < @sizeOf(?*anyopaque))) {
        __align = @sizeOf(?*anyopaque);
    }
    var __mallocedMemory: ?*anyopaque = undefined;
    _ = &__mallocedMemory;
    __mallocedMemory = __mingw_aligned_malloc(__size, __align);
    return __mallocedMemory;
}
pub inline fn _mm_free(arg___p: ?*anyopaque) void {
    var __p = arg___p;
    _ = &__p;
    __mingw_aligned_free(__p);
}
pub extern fn _resetstkoflw() c_int;
pub extern fn _set_malloc_crt_max_wait(_NewValue: c_ulong) c_ulong;
pub extern fn _expand(_Memory: ?*anyopaque, _NewSize: usize) ?*anyopaque;
pub extern fn _msize(_Memory: ?*anyopaque) usize;
pub extern fn _get_sbh_threshold() usize;
pub extern fn _set_sbh_threshold(_NewValue: usize) c_int;
pub extern fn _set_amblksiz(_Value: usize) errno_t;
pub extern fn _get_amblksiz(_Value: [*c]usize) errno_t;
pub extern fn _heapadd(_Memory: ?*anyopaque, _Size: usize) c_int;
pub extern fn _heapchk() c_int;
pub extern fn _heapmin() c_int;
pub extern fn _heapset(_Fill: c_uint) c_int;
pub extern fn _heapwalk(_EntryInfo: [*c]_HEAPINFO) c_int;
pub extern fn _heapused(_Used: [*c]usize, _Commit: [*c]usize) usize;
pub extern fn _get_heap_handle() isize;
pub fn _MarkAllocaS(arg__Ptr: ?*anyopaque, arg__Marker: c_uint) callconv(.c) ?*anyopaque {
    var _Ptr = arg__Ptr;
    _ = &_Ptr;
    var _Marker = arg__Marker;
    _ = &_Marker;
    if (_Ptr != null) {
        @as([*c]c_uint, @ptrCast(@alignCast(_Ptr))).* = _Marker;
        _Ptr = @as(?*anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(_Ptr))) + @as(usize, @bitCast(@as(isize, @intCast(@as(c_int, 16)))))));
    }
    return _Ptr;
}
pub fn _freea(arg__Memory: ?*anyopaque) callconv(.c) void {
    var _Memory = arg__Memory;
    _ = &_Memory;
    var _Marker: c_uint = undefined;
    _ = &_Marker;
    if (_Memory != null) {
        _Memory = @as(?*anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(_Memory))) - @as(usize, @bitCast(@as(isize, @intCast(@as(c_int, 16)))))));
        _Marker = @as([*c]c_uint, @ptrCast(@alignCast(_Memory))).*;
        if (_Marker == @as(c_uint, @bitCast(@as(c_int, 56797)))) {
            free(_Memory);
        }
    }
}
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_least16_t = c_short;
pub const uint_least16_t = c_ushort;
pub const int_least32_t = c_int;
pub const uint_least32_t = c_uint;
pub const int_least64_t = c_longlong;
pub const uint_least64_t = c_ulonglong;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const int_fast16_t = c_short;
pub const uint_fast16_t = c_ushort;
pub const int_fast32_t = c_int;
pub const uint_fast32_t = c_uint;
pub const int_fast64_t = c_longlong;
pub const uint_fast64_t = c_ulonglong;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const cuuint32_t = u32;
pub const cuuint64_t = u64;
pub const CUdeviceptr_v2 = c_ulonglong;
pub const CUdeviceptr = CUdeviceptr_v2;
pub const CUdevice_v1 = c_int;
pub const CUdevice = CUdevice_v1;
pub const struct_CUctx_st = opaque {};
pub const CUcontext = ?*struct_CUctx_st;
pub const struct_CUmod_st = opaque {};
pub const CUmodule = ?*struct_CUmod_st;
pub const struct_CUfunc_st = opaque {};
pub const CUfunction = ?*struct_CUfunc_st;
pub const struct_CUlib_st = opaque {};
pub const CUlibrary = ?*struct_CUlib_st;
pub const struct_CUkern_st = opaque {};
pub const CUkernel = ?*struct_CUkern_st;
pub const struct_CUarray_st = opaque {};
pub const CUarray = ?*struct_CUarray_st;
pub const struct_CUmipmappedArray_st = opaque {};
pub const CUmipmappedArray = ?*struct_CUmipmappedArray_st;
pub const struct_CUtexref_st = opaque {};
pub const CUtexref = ?*struct_CUtexref_st;
pub const struct_CUsurfref_st = opaque {};
pub const CUsurfref = ?*struct_CUsurfref_st;
pub const struct_CUevent_st = opaque {};
pub const CUevent = ?*struct_CUevent_st;
pub const struct_CUstream_st = opaque {};
pub const CUstream = ?*struct_CUstream_st;
pub const struct_CUgraphicsResource_st = opaque {};
pub const CUgraphicsResource = ?*struct_CUgraphicsResource_st;
pub const CUtexObject_v1 = c_ulonglong;
pub const CUtexObject = CUtexObject_v1;
pub const CUsurfObject_v1 = c_ulonglong;
pub const CUsurfObject = CUsurfObject_v1;
pub const struct_CUextMemory_st = opaque {};
pub const CUexternalMemory = ?*struct_CUextMemory_st;
pub const struct_CUextSemaphore_st = opaque {};
pub const CUexternalSemaphore = ?*struct_CUextSemaphore_st;
pub const struct_CUgraph_st = opaque {};
pub const CUgraph = ?*struct_CUgraph_st;
pub const struct_CUgraphNode_st = opaque {};
pub const CUgraphNode = ?*struct_CUgraphNode_st;
pub const struct_CUgraphExec_st = opaque {};
pub const CUgraphExec = ?*struct_CUgraphExec_st;
pub const struct_CUmemPoolHandle_st = opaque {};
pub const CUmemoryPool = ?*struct_CUmemPoolHandle_st;
pub const struct_CUuserObject_st = opaque {};
pub const CUuserObject = ?*struct_CUuserObject_st;
pub const CUgraphConditionalHandle = cuuint64_t;
pub const struct_CUgraphDeviceUpdatableNode_st = opaque {};
pub const CUgraphDeviceNode = ?*struct_CUgraphDeviceUpdatableNode_st;
pub const struct_CUasyncCallbackEntry_st = opaque {};
pub const CUasyncCallbackHandle = ?*struct_CUasyncCallbackEntry_st;
pub const struct_CUgreenCtx_st = opaque {};
pub const CUgreenCtx = ?*struct_CUgreenCtx_st;
pub const struct_CUuuid_st = extern struct {
    bytes: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const CUuuid = struct_CUuuid_st;
pub const struct_CUmemFabricHandle_st = extern struct {
    data: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const CUmemFabricHandle_v1 = struct_CUmemFabricHandle_st;
pub const CUmemFabricHandle = CUmemFabricHandle_v1;
pub const struct_CUipcEventHandle_st = extern struct {
    reserved: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const CUipcEventHandle_v1 = struct_CUipcEventHandle_st;
pub const CUipcEventHandle = CUipcEventHandle_v1;
pub const struct_CUipcMemHandle_st = extern struct {
    reserved: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const CUipcMemHandle_v1 = struct_CUipcMemHandle_st;
pub const CUipcMemHandle = CUipcMemHandle_v1;
pub const CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS: c_int = 1;
pub const enum_CUipcMem_flags_enum = c_uint;
pub const CUipcMem_flags = enum_CUipcMem_flags_enum;
pub const CU_MEM_ATTACH_GLOBAL: c_int = 1;
pub const CU_MEM_ATTACH_HOST: c_int = 2;
pub const CU_MEM_ATTACH_SINGLE: c_int = 4;
pub const enum_CUmemAttach_flags_enum = c_uint;
pub const CUmemAttach_flags = enum_CUmemAttach_flags_enum;
pub const CU_CTX_SCHED_AUTO: c_int = 0;
pub const CU_CTX_SCHED_SPIN: c_int = 1;
pub const CU_CTX_SCHED_YIELD: c_int = 2;
pub const CU_CTX_SCHED_BLOCKING_SYNC: c_int = 4;
pub const CU_CTX_BLOCKING_SYNC: c_int = 4;
pub const CU_CTX_SCHED_MASK: c_int = 7;
pub const CU_CTX_MAP_HOST: c_int = 8;
pub const CU_CTX_LMEM_RESIZE_TO_MAX: c_int = 16;
pub const CU_CTX_COREDUMP_ENABLE: c_int = 32;
pub const CU_CTX_USER_COREDUMP_ENABLE: c_int = 64;
pub const CU_CTX_SYNC_MEMOPS: c_int = 128;
pub const CU_CTX_FLAGS_MASK: c_int = 255;
pub const enum_CUctx_flags_enum = c_uint;
pub const CUctx_flags = enum_CUctx_flags_enum;
pub const CU_EVENT_SCHED_AUTO: c_int = 0;
pub const CU_EVENT_SCHED_SPIN: c_int = 1;
pub const CU_EVENT_SCHED_YIELD: c_int = 2;
pub const CU_EVENT_SCHED_BLOCKING_SYNC: c_int = 4;
pub const enum_CUevent_sched_flags_enum = c_uint;
pub const CUevent_sched_flags = enum_CUevent_sched_flags_enum;
pub const NVCL_EVENT_SCHED_AUTO: c_int = 0;
pub const NVCL_EVENT_SCHED_SPIN: c_int = 1;
pub const NVCL_EVENT_SCHED_YIELD: c_int = 2;
pub const NVCL_EVENT_SCHED_BLOCKING_SYNC: c_int = 4;
pub const enum_cl_event_flags_enum = c_uint;
pub const cl_event_flags = enum_cl_event_flags_enum;
pub const NVCL_CTX_SCHED_AUTO: c_int = 0;
pub const NVCL_CTX_SCHED_SPIN: c_int = 1;
pub const NVCL_CTX_SCHED_YIELD: c_int = 2;
pub const NVCL_CTX_SCHED_BLOCKING_SYNC: c_int = 4;
pub const enum_cl_context_flags_enum = c_uint;
pub const cl_context_flags = enum_cl_context_flags_enum;
pub const CU_STREAM_DEFAULT: c_int = 0;
pub const CU_STREAM_NON_BLOCKING: c_int = 1;
pub const enum_CUstream_flags_enum = c_uint;
pub const CUstream_flags = enum_CUstream_flags_enum;
pub const CU_EVENT_DEFAULT: c_int = 0;
pub const CU_EVENT_BLOCKING_SYNC: c_int = 1;
pub const CU_EVENT_DISABLE_TIMING: c_int = 2;
pub const CU_EVENT_INTERPROCESS: c_int = 4;
pub const enum_CUevent_flags_enum = c_uint;
pub const CUevent_flags = enum_CUevent_flags_enum;
pub const CU_EVENT_RECORD_DEFAULT: c_int = 0;
pub const CU_EVENT_RECORD_EXTERNAL: c_int = 1;
pub const enum_CUevent_record_flags_enum = c_uint;
pub const CUevent_record_flags = enum_CUevent_record_flags_enum;
pub const CU_EVENT_WAIT_DEFAULT: c_int = 0;
pub const CU_EVENT_WAIT_EXTERNAL: c_int = 1;
pub const enum_CUevent_wait_flags_enum = c_uint;
pub const CUevent_wait_flags = enum_CUevent_wait_flags_enum;
pub const CU_STREAM_WAIT_VALUE_GEQ: c_int = 0;
pub const CU_STREAM_WAIT_VALUE_EQ: c_int = 1;
pub const CU_STREAM_WAIT_VALUE_AND: c_int = 2;
pub const CU_STREAM_WAIT_VALUE_NOR: c_int = 3;
pub const CU_STREAM_WAIT_VALUE_FLUSH: c_int = 1073741824;
pub const enum_CUstreamWaitValue_flags_enum = c_uint;
pub const CUstreamWaitValue_flags = enum_CUstreamWaitValue_flags_enum;
pub const CU_STREAM_WRITE_VALUE_DEFAULT: c_int = 0;
pub const CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER: c_int = 1;
pub const enum_CUstreamWriteValue_flags_enum = c_uint;
pub const CUstreamWriteValue_flags = enum_CUstreamWriteValue_flags_enum;
pub const CU_STREAM_MEM_OP_WAIT_VALUE_32: c_int = 1;
pub const CU_STREAM_MEM_OP_WRITE_VALUE_32: c_int = 2;
pub const CU_STREAM_MEM_OP_WAIT_VALUE_64: c_int = 4;
pub const CU_STREAM_MEM_OP_WRITE_VALUE_64: c_int = 5;
pub const CU_STREAM_MEM_OP_BARRIER: c_int = 6;
pub const CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES: c_int = 3;
pub const enum_CUstreamBatchMemOpType_enum = c_uint;
pub const CUstreamBatchMemOpType = enum_CUstreamBatchMemOpType_enum;
pub const CU_STREAM_MEMORY_BARRIER_TYPE_SYS: c_int = 0;
pub const CU_STREAM_MEMORY_BARRIER_TYPE_GPU: c_int = 1;
pub const enum_CUstreamMemoryBarrier_flags_enum = c_uint;
pub const CUstreamMemoryBarrier_flags = enum_CUstreamMemoryBarrier_flags_enum;
const union_unnamed_2 = extern union {
    value: cuuint32_t,
    value64: cuuint64_t,
};
pub const struct_CUstreamMemOpWaitValueParams_st_1 = extern struct {
    operation: CUstreamBatchMemOpType = @import("std").mem.zeroes(CUstreamBatchMemOpType),
    address: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    unnamed_0: union_unnamed_2 = @import("std").mem.zeroes(union_unnamed_2),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    alias: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
};
const union_unnamed_4 = extern union {
    value: cuuint32_t,
    value64: cuuint64_t,
};
pub const struct_CUstreamMemOpWriteValueParams_st_3 = extern struct {
    operation: CUstreamBatchMemOpType = @import("std").mem.zeroes(CUstreamBatchMemOpType),
    address: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    unnamed_0: union_unnamed_4 = @import("std").mem.zeroes(union_unnamed_4),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    alias: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
};
pub const struct_CUstreamMemOpFlushRemoteWritesParams_st_5 = extern struct {
    operation: CUstreamBatchMemOpType = @import("std").mem.zeroes(CUstreamBatchMemOpType),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_CUstreamMemOpMemoryBarrierParams_st_6 = extern struct {
    operation: CUstreamBatchMemOpType = @import("std").mem.zeroes(CUstreamBatchMemOpType),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const union_CUstreamBatchMemOpParams_union = extern union {
    operation: CUstreamBatchMemOpType,
    waitValue: struct_CUstreamMemOpWaitValueParams_st_1,
    writeValue: struct_CUstreamMemOpWriteValueParams_st_3,
    flushRemoteWrites: struct_CUstreamMemOpFlushRemoteWritesParams_st_5,
    memoryBarrier: struct_CUstreamMemOpMemoryBarrierParams_st_6,
    pad: [6]cuuint64_t,
};
pub const CUstreamBatchMemOpParams_v1 = union_CUstreamBatchMemOpParams_union;
pub const CUstreamBatchMemOpParams = CUstreamBatchMemOpParams_v1;
pub const struct_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st = extern struct {
    ctx: CUcontext = @import("std").mem.zeroes(CUcontext),
    count: c_uint = @import("std").mem.zeroes(c_uint),
    paramArray: [*c]CUstreamBatchMemOpParams = @import("std").mem.zeroes([*c]CUstreamBatchMemOpParams),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_BATCH_MEM_OP_NODE_PARAMS_v1 = struct_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st;
pub const CUDA_BATCH_MEM_OP_NODE_PARAMS = CUDA_BATCH_MEM_OP_NODE_PARAMS_v1;
pub const struct_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st = extern struct {
    ctx: CUcontext = @import("std").mem.zeroes(CUcontext),
    count: c_uint = @import("std").mem.zeroes(c_uint),
    paramArray: [*c]CUstreamBatchMemOpParams = @import("std").mem.zeroes([*c]CUstreamBatchMemOpParams),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_BATCH_MEM_OP_NODE_PARAMS_v2 = struct_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st;
pub const CU_OCCUPANCY_DEFAULT: c_int = 0;
pub const CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE: c_int = 1;
pub const enum_CUoccupancy_flags_enum = c_uint;
pub const CUoccupancy_flags = enum_CUoccupancy_flags_enum;
pub const CU_STREAM_ADD_CAPTURE_DEPENDENCIES: c_int = 0;
pub const CU_STREAM_SET_CAPTURE_DEPENDENCIES: c_int = 1;
pub const enum_CUstreamUpdateCaptureDependencies_flags_enum = c_uint;
pub const CUstreamUpdateCaptureDependencies_flags = enum_CUstreamUpdateCaptureDependencies_flags_enum;
pub const CU_ASYNC_NOTIFICATION_TYPE_OVER_BUDGET: c_int = 1;
pub const enum_CUasyncNotificationType_enum = c_uint;
pub const CUasyncNotificationType = enum_CUasyncNotificationType_enum;
const struct_unnamed_8 = extern struct {
    bytesOverBudget: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_7 = extern union {
    overBudget: struct_unnamed_8,
};
pub const struct_CUasyncNotificationInfo_st = extern struct {
    type: CUasyncNotificationType = @import("std").mem.zeroes(CUasyncNotificationType),
    info: union_unnamed_7 = @import("std").mem.zeroes(union_unnamed_7),
};
pub const CUasyncNotificationInfo = struct_CUasyncNotificationInfo_st;
pub const CUasyncCallback = ?*const fn ([*c]CUasyncNotificationInfo, ?*anyopaque, CUasyncCallbackHandle) callconv(.c) void;
pub const CU_AD_FORMAT_UNSIGNED_INT8: c_int = 1;
pub const CU_AD_FORMAT_UNSIGNED_INT16: c_int = 2;
pub const CU_AD_FORMAT_UNSIGNED_INT32: c_int = 3;
pub const CU_AD_FORMAT_SIGNED_INT8: c_int = 8;
pub const CU_AD_FORMAT_SIGNED_INT16: c_int = 9;
pub const CU_AD_FORMAT_SIGNED_INT32: c_int = 10;
pub const CU_AD_FORMAT_HALF: c_int = 16;
pub const CU_AD_FORMAT_FLOAT: c_int = 32;
pub const CU_AD_FORMAT_NV12: c_int = 176;
pub const CU_AD_FORMAT_UNORM_INT8X1: c_int = 192;
pub const CU_AD_FORMAT_UNORM_INT8X2: c_int = 193;
pub const CU_AD_FORMAT_UNORM_INT8X4: c_int = 194;
pub const CU_AD_FORMAT_UNORM_INT16X1: c_int = 195;
pub const CU_AD_FORMAT_UNORM_INT16X2: c_int = 196;
pub const CU_AD_FORMAT_UNORM_INT16X4: c_int = 197;
pub const CU_AD_FORMAT_SNORM_INT8X1: c_int = 198;
pub const CU_AD_FORMAT_SNORM_INT8X2: c_int = 199;
pub const CU_AD_FORMAT_SNORM_INT8X4: c_int = 200;
pub const CU_AD_FORMAT_SNORM_INT16X1: c_int = 201;
pub const CU_AD_FORMAT_SNORM_INT16X2: c_int = 202;
pub const CU_AD_FORMAT_SNORM_INT16X4: c_int = 203;
pub const CU_AD_FORMAT_BC1_UNORM: c_int = 145;
pub const CU_AD_FORMAT_BC1_UNORM_SRGB: c_int = 146;
pub const CU_AD_FORMAT_BC2_UNORM: c_int = 147;
pub const CU_AD_FORMAT_BC2_UNORM_SRGB: c_int = 148;
pub const CU_AD_FORMAT_BC3_UNORM: c_int = 149;
pub const CU_AD_FORMAT_BC3_UNORM_SRGB: c_int = 150;
pub const CU_AD_FORMAT_BC4_UNORM: c_int = 151;
pub const CU_AD_FORMAT_BC4_SNORM: c_int = 152;
pub const CU_AD_FORMAT_BC5_UNORM: c_int = 153;
pub const CU_AD_FORMAT_BC5_SNORM: c_int = 154;
pub const CU_AD_FORMAT_BC6H_UF16: c_int = 155;
pub const CU_AD_FORMAT_BC6H_SF16: c_int = 156;
pub const CU_AD_FORMAT_BC7_UNORM: c_int = 157;
pub const CU_AD_FORMAT_BC7_UNORM_SRGB: c_int = 158;
pub const CU_AD_FORMAT_P010: c_int = 159;
pub const CU_AD_FORMAT_P016: c_int = 161;
pub const CU_AD_FORMAT_NV16: c_int = 162;
pub const CU_AD_FORMAT_P210: c_int = 163;
pub const CU_AD_FORMAT_P216: c_int = 164;
pub const CU_AD_FORMAT_YUY2: c_int = 165;
pub const CU_AD_FORMAT_Y210: c_int = 166;
pub const CU_AD_FORMAT_Y216: c_int = 167;
pub const CU_AD_FORMAT_AYUV: c_int = 168;
pub const CU_AD_FORMAT_Y410: c_int = 169;
pub const CU_AD_FORMAT_Y416: c_int = 177;
pub const CU_AD_FORMAT_Y444_PLANAR8: c_int = 178;
pub const CU_AD_FORMAT_Y444_PLANAR10: c_int = 179;
pub const CU_AD_FORMAT_YUV444_8bit_SemiPlanar: c_int = 180;
pub const CU_AD_FORMAT_YUV444_16bit_SemiPlanar: c_int = 181;
pub const CU_AD_FORMAT_UNORM_INT_101010_2: c_int = 80;
pub const CU_AD_FORMAT_MAX: c_int = 2147483647;
pub const enum_CUarray_format_enum = c_uint;
pub const CUarray_format = enum_CUarray_format_enum;
pub const CU_TR_ADDRESS_MODE_WRAP: c_int = 0;
pub const CU_TR_ADDRESS_MODE_CLAMP: c_int = 1;
pub const CU_TR_ADDRESS_MODE_MIRROR: c_int = 2;
pub const CU_TR_ADDRESS_MODE_BORDER: c_int = 3;
pub const enum_CUaddress_mode_enum = c_uint;
pub const CUaddress_mode = enum_CUaddress_mode_enum;
pub const CU_TR_FILTER_MODE_POINT: c_int = 0;
pub const CU_TR_FILTER_MODE_LINEAR: c_int = 1;
pub const enum_CUfilter_mode_enum = c_uint;
pub const CUfilter_mode = enum_CUfilter_mode_enum;
pub const CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK: c_int = 1;
pub const CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X: c_int = 2;
pub const CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y: c_int = 3;
pub const CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z: c_int = 4;
pub const CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X: c_int = 5;
pub const CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y: c_int = 6;
pub const CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z: c_int = 7;
pub const CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK: c_int = 8;
pub const CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK: c_int = 8;
pub const CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY: c_int = 9;
pub const CU_DEVICE_ATTRIBUTE_WARP_SIZE: c_int = 10;
pub const CU_DEVICE_ATTRIBUTE_MAX_PITCH: c_int = 11;
pub const CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK: c_int = 12;
pub const CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK: c_int = 12;
pub const CU_DEVICE_ATTRIBUTE_CLOCK_RATE: c_int = 13;
pub const CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT: c_int = 14;
pub const CU_DEVICE_ATTRIBUTE_GPU_OVERLAP: c_int = 15;
pub const CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT: c_int = 16;
pub const CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT: c_int = 17;
pub const CU_DEVICE_ATTRIBUTE_INTEGRATED: c_int = 18;
pub const CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY: c_int = 19;
pub const CU_DEVICE_ATTRIBUTE_COMPUTE_MODE: c_int = 20;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH: c_int = 21;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH: c_int = 22;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT: c_int = 23;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH: c_int = 24;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT: c_int = 25;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH: c_int = 26;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH: c_int = 27;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT: c_int = 28;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS: c_int = 29;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH: c_int = 27;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT: c_int = 28;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES: c_int = 29;
pub const CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT: c_int = 30;
pub const CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS: c_int = 31;
pub const CU_DEVICE_ATTRIBUTE_ECC_ENABLED: c_int = 32;
pub const CU_DEVICE_ATTRIBUTE_PCI_BUS_ID: c_int = 33;
pub const CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID: c_int = 34;
pub const CU_DEVICE_ATTRIBUTE_TCC_DRIVER: c_int = 35;
pub const CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE: c_int = 36;
pub const CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH: c_int = 37;
pub const CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE: c_int = 38;
pub const CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR: c_int = 39;
pub const CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT: c_int = 40;
pub const CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING: c_int = 41;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH: c_int = 42;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS: c_int = 43;
pub const CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER: c_int = 44;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH: c_int = 45;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT: c_int = 46;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE: c_int = 47;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE: c_int = 48;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE: c_int = 49;
pub const CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID: c_int = 50;
pub const CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT: c_int = 51;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH: c_int = 52;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH: c_int = 53;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS: c_int = 54;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH: c_int = 55;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH: c_int = 56;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT: c_int = 57;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH: c_int = 58;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT: c_int = 59;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH: c_int = 60;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH: c_int = 61;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS: c_int = 62;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH: c_int = 63;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT: c_int = 64;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS: c_int = 65;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH: c_int = 66;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH: c_int = 67;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS: c_int = 68;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH: c_int = 69;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH: c_int = 70;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT: c_int = 71;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH: c_int = 72;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH: c_int = 73;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT: c_int = 74;
pub const CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR: c_int = 75;
pub const CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR: c_int = 76;
pub const CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH: c_int = 77;
pub const CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED: c_int = 78;
pub const CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED: c_int = 79;
pub const CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED: c_int = 80;
pub const CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR: c_int = 81;
pub const CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR: c_int = 82;
pub const CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY: c_int = 83;
pub const CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD: c_int = 84;
pub const CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID: c_int = 85;
pub const CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED: c_int = 86;
pub const CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO: c_int = 87;
pub const CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS: c_int = 88;
pub const CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS: c_int = 89;
pub const CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED: c_int = 90;
pub const CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM: c_int = 91;
pub const CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS_V1: c_int = 92;
pub const CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS_V1: c_int = 93;
pub const CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR_V1: c_int = 94;
pub const CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH: c_int = 95;
pub const CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH: c_int = 96;
pub const CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN: c_int = 97;
pub const CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES: c_int = 98;
pub const CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED: c_int = 99;
pub const CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES: c_int = 100;
pub const CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST: c_int = 101;
pub const CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED: c_int = 102;
pub const CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED: c_int = 102;
pub const CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED: c_int = 103;
pub const CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED: c_int = 104;
pub const CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED: c_int = 105;
pub const CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR: c_int = 106;
pub const CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED: c_int = 107;
pub const CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE: c_int = 108;
pub const CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE: c_int = 109;
pub const CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED: c_int = 110;
pub const CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK: c_int = 111;
pub const CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED: c_int = 112;
pub const CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED: c_int = 113;
pub const CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED: c_int = 114;
pub const CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED: c_int = 115;
pub const CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED: c_int = 116;
pub const CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS: c_int = 117;
pub const CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING: c_int = 118;
pub const CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES: c_int = 119;
pub const CU_DEVICE_ATTRIBUTE_CLUSTER_LAUNCH: c_int = 120;
pub const CU_DEVICE_ATTRIBUTE_DEFERRED_MAPPING_CUDA_ARRAY_SUPPORTED: c_int = 121;
pub const CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS: c_int = 122;
pub const CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR: c_int = 123;
pub const CU_DEVICE_ATTRIBUTE_DMA_BUF_SUPPORTED: c_int = 124;
pub const CU_DEVICE_ATTRIBUTE_IPC_EVENT_SUPPORTED: c_int = 125;
pub const CU_DEVICE_ATTRIBUTE_MEM_SYNC_DOMAIN_COUNT: c_int = 126;
pub const CU_DEVICE_ATTRIBUTE_TENSOR_MAP_ACCESS_SUPPORTED: c_int = 127;
pub const CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_FABRIC_SUPPORTED: c_int = 128;
pub const CU_DEVICE_ATTRIBUTE_UNIFIED_FUNCTION_POINTERS: c_int = 129;
pub const CU_DEVICE_ATTRIBUTE_NUMA_CONFIG: c_int = 130;
pub const CU_DEVICE_ATTRIBUTE_NUMA_ID: c_int = 131;
pub const CU_DEVICE_ATTRIBUTE_MULTICAST_SUPPORTED: c_int = 132;
pub const CU_DEVICE_ATTRIBUTE_MPS_ENABLED: c_int = 133;
pub const CU_DEVICE_ATTRIBUTE_HOST_NUMA_ID: c_int = 134;
pub const CU_DEVICE_ATTRIBUTE_D3D12_CIG_SUPPORTED: c_int = 135;
pub const CU_DEVICE_ATTRIBUTE_MEM_DECOMPRESS_ALGORITHM_MASK: c_int = 136;
pub const CU_DEVICE_ATTRIBUTE_MEM_DECOMPRESS_MAXIMUM_LENGTH: c_int = 137;
pub const CU_DEVICE_ATTRIBUTE_GPU_PCI_DEVICE_ID: c_int = 139;
pub const CU_DEVICE_ATTRIBUTE_GPU_PCI_SUBSYSTEM_ID: c_int = 140;
pub const CU_DEVICE_ATTRIBUTE_HOST_NUMA_MULTINODE_IPC_SUPPORTED: c_int = 143;
pub const CU_DEVICE_ATTRIBUTE_MAX: c_int = 144;
pub const enum_CUdevice_attribute_enum = c_uint;
pub const CUdevice_attribute = enum_CUdevice_attribute_enum;
pub const struct_CUdevprop_st = extern struct {
    maxThreadsPerBlock: c_int = @import("std").mem.zeroes(c_int),
    maxThreadsDim: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxGridSize: [3]c_int = @import("std").mem.zeroes([3]c_int),
    sharedMemPerBlock: c_int = @import("std").mem.zeroes(c_int),
    totalConstantMemory: c_int = @import("std").mem.zeroes(c_int),
    SIMDWidth: c_int = @import("std").mem.zeroes(c_int),
    memPitch: c_int = @import("std").mem.zeroes(c_int),
    regsPerBlock: c_int = @import("std").mem.zeroes(c_int),
    clockRate: c_int = @import("std").mem.zeroes(c_int),
    textureAlign: c_int = @import("std").mem.zeroes(c_int),
};
pub const CUdevprop_v1 = struct_CUdevprop_st;
pub const CUdevprop = CUdevprop_v1;
pub const CU_POINTER_ATTRIBUTE_CONTEXT: c_int = 1;
pub const CU_POINTER_ATTRIBUTE_MEMORY_TYPE: c_int = 2;
pub const CU_POINTER_ATTRIBUTE_DEVICE_POINTER: c_int = 3;
pub const CU_POINTER_ATTRIBUTE_HOST_POINTER: c_int = 4;
pub const CU_POINTER_ATTRIBUTE_P2P_TOKENS: c_int = 5;
pub const CU_POINTER_ATTRIBUTE_SYNC_MEMOPS: c_int = 6;
pub const CU_POINTER_ATTRIBUTE_BUFFER_ID: c_int = 7;
pub const CU_POINTER_ATTRIBUTE_IS_MANAGED: c_int = 8;
pub const CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL: c_int = 9;
pub const CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE: c_int = 10;
pub const CU_POINTER_ATTRIBUTE_RANGE_START_ADDR: c_int = 11;
pub const CU_POINTER_ATTRIBUTE_RANGE_SIZE: c_int = 12;
pub const CU_POINTER_ATTRIBUTE_MAPPED: c_int = 13;
pub const CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES: c_int = 14;
pub const CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE: c_int = 15;
pub const CU_POINTER_ATTRIBUTE_ACCESS_FLAGS: c_int = 16;
pub const CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE: c_int = 17;
pub const CU_POINTER_ATTRIBUTE_MAPPING_SIZE: c_int = 18;
pub const CU_POINTER_ATTRIBUTE_MAPPING_BASE_ADDR: c_int = 19;
pub const CU_POINTER_ATTRIBUTE_MEMORY_BLOCK_ID: c_int = 20;
pub const CU_POINTER_ATTRIBUTE_IS_HW_DECOMPRESS_CAPABLE: c_int = 21;
pub const enum_CUpointer_attribute_enum = c_uint;
pub const CUpointer_attribute = enum_CUpointer_attribute_enum;
pub const CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK: c_int = 0;
pub const CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES: c_int = 1;
pub const CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES: c_int = 2;
pub const CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES: c_int = 3;
pub const CU_FUNC_ATTRIBUTE_NUM_REGS: c_int = 4;
pub const CU_FUNC_ATTRIBUTE_PTX_VERSION: c_int = 5;
pub const CU_FUNC_ATTRIBUTE_BINARY_VERSION: c_int = 6;
pub const CU_FUNC_ATTRIBUTE_CACHE_MODE_CA: c_int = 7;
pub const CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES: c_int = 8;
pub const CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT: c_int = 9;
pub const CU_FUNC_ATTRIBUTE_CLUSTER_SIZE_MUST_BE_SET: c_int = 10;
pub const CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_WIDTH: c_int = 11;
pub const CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_HEIGHT: c_int = 12;
pub const CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_DEPTH: c_int = 13;
pub const CU_FUNC_ATTRIBUTE_NON_PORTABLE_CLUSTER_SIZE_ALLOWED: c_int = 14;
pub const CU_FUNC_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE: c_int = 15;
pub const CU_FUNC_ATTRIBUTE_MAX: c_int = 16;
pub const enum_CUfunction_attribute_enum = c_uint;
pub const CUfunction_attribute = enum_CUfunction_attribute_enum;
pub const CU_FUNC_CACHE_PREFER_NONE: c_int = 0;
pub const CU_FUNC_CACHE_PREFER_SHARED: c_int = 1;
pub const CU_FUNC_CACHE_PREFER_L1: c_int = 2;
pub const CU_FUNC_CACHE_PREFER_EQUAL: c_int = 3;
pub const enum_CUfunc_cache_enum = c_uint;
pub const CUfunc_cache = enum_CUfunc_cache_enum;
pub const CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE: c_int = 0;
pub const CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE: c_int = 1;
pub const CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE: c_int = 2;
pub const enum_CUsharedconfig_enum = c_uint;
pub const CUsharedconfig = enum_CUsharedconfig_enum;
pub const CU_SHAREDMEM_CARVEOUT_DEFAULT: c_int = -1;
pub const CU_SHAREDMEM_CARVEOUT_MAX_SHARED: c_int = 100;
pub const CU_SHAREDMEM_CARVEOUT_MAX_L1: c_int = 0;
pub const enum_CUshared_carveout_enum = c_int;
pub const CUshared_carveout = enum_CUshared_carveout_enum;
pub const CU_MEMORYTYPE_HOST: c_int = 1;
pub const CU_MEMORYTYPE_DEVICE: c_int = 2;
pub const CU_MEMORYTYPE_ARRAY: c_int = 3;
pub const CU_MEMORYTYPE_UNIFIED: c_int = 4;
pub const enum_CUmemorytype_enum = c_uint;
pub const CUmemorytype = enum_CUmemorytype_enum;
pub const CU_COMPUTEMODE_DEFAULT: c_int = 0;
pub const CU_COMPUTEMODE_PROHIBITED: c_int = 2;
pub const CU_COMPUTEMODE_EXCLUSIVE_PROCESS: c_int = 3;
pub const enum_CUcomputemode_enum = c_uint;
pub const CUcomputemode = enum_CUcomputemode_enum;
pub const CU_MEM_ADVISE_SET_READ_MOSTLY: c_int = 1;
pub const CU_MEM_ADVISE_UNSET_READ_MOSTLY: c_int = 2;
pub const CU_MEM_ADVISE_SET_PREFERRED_LOCATION: c_int = 3;
pub const CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION: c_int = 4;
pub const CU_MEM_ADVISE_SET_ACCESSED_BY: c_int = 5;
pub const CU_MEM_ADVISE_UNSET_ACCESSED_BY: c_int = 6;
pub const enum_CUmem_advise_enum = c_uint;
pub const CUmem_advise = enum_CUmem_advise_enum;
pub const CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY: c_int = 1;
pub const CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION: c_int = 2;
pub const CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY: c_int = 3;
pub const CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION: c_int = 4;
pub const CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION_TYPE: c_int = 5;
pub const CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION_ID: c_int = 6;
pub const CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION_TYPE: c_int = 7;
pub const CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION_ID: c_int = 8;
pub const enum_CUmem_range_attribute_enum = c_uint;
pub const CUmem_range_attribute = enum_CUmem_range_attribute_enum;
pub const CU_JIT_MAX_REGISTERS: c_int = 0;
pub const CU_JIT_THREADS_PER_BLOCK: c_int = 1;
pub const CU_JIT_WALL_TIME: c_int = 2;
pub const CU_JIT_INFO_LOG_BUFFER: c_int = 3;
pub const CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES: c_int = 4;
pub const CU_JIT_ERROR_LOG_BUFFER: c_int = 5;
pub const CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES: c_int = 6;
pub const CU_JIT_OPTIMIZATION_LEVEL: c_int = 7;
pub const CU_JIT_TARGET_FROM_CUCONTEXT: c_int = 8;
pub const CU_JIT_TARGET: c_int = 9;
pub const CU_JIT_FALLBACK_STRATEGY: c_int = 10;
pub const CU_JIT_GENERATE_DEBUG_INFO: c_int = 11;
pub const CU_JIT_LOG_VERBOSE: c_int = 12;
pub const CU_JIT_GENERATE_LINE_INFO: c_int = 13;
pub const CU_JIT_CACHE_MODE: c_int = 14;
pub const CU_JIT_NEW_SM3X_OPT: c_int = 15;
pub const CU_JIT_FAST_COMPILE: c_int = 16;
pub const CU_JIT_GLOBAL_SYMBOL_NAMES: c_int = 17;
pub const CU_JIT_GLOBAL_SYMBOL_ADDRESSES: c_int = 18;
pub const CU_JIT_GLOBAL_SYMBOL_COUNT: c_int = 19;
pub const CU_JIT_LTO: c_int = 20;
pub const CU_JIT_FTZ: c_int = 21;
pub const CU_JIT_PREC_DIV: c_int = 22;
pub const CU_JIT_PREC_SQRT: c_int = 23;
pub const CU_JIT_FMA: c_int = 24;
pub const CU_JIT_REFERENCED_KERNEL_NAMES: c_int = 25;
pub const CU_JIT_REFERENCED_KERNEL_COUNT: c_int = 26;
pub const CU_JIT_REFERENCED_VARIABLE_NAMES: c_int = 27;
pub const CU_JIT_REFERENCED_VARIABLE_COUNT: c_int = 28;
pub const CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES: c_int = 29;
pub const CU_JIT_POSITION_INDEPENDENT_CODE: c_int = 30;
pub const CU_JIT_MIN_CTA_PER_SM: c_int = 31;
pub const CU_JIT_MAX_THREADS_PER_BLOCK: c_int = 32;
pub const CU_JIT_OVERRIDE_DIRECTIVE_VALUES: c_int = 33;
pub const CU_JIT_NUM_OPTIONS: c_int = 34;
pub const enum_CUjit_option_enum = c_uint;
pub const CUjit_option = enum_CUjit_option_enum;
pub const CU_TARGET_COMPUTE_30: c_int = 30;
pub const CU_TARGET_COMPUTE_32: c_int = 32;
pub const CU_TARGET_COMPUTE_35: c_int = 35;
pub const CU_TARGET_COMPUTE_37: c_int = 37;
pub const CU_TARGET_COMPUTE_50: c_int = 50;
pub const CU_TARGET_COMPUTE_52: c_int = 52;
pub const CU_TARGET_COMPUTE_53: c_int = 53;
pub const CU_TARGET_COMPUTE_60: c_int = 60;
pub const CU_TARGET_COMPUTE_61: c_int = 61;
pub const CU_TARGET_COMPUTE_62: c_int = 62;
pub const CU_TARGET_COMPUTE_70: c_int = 70;
pub const CU_TARGET_COMPUTE_72: c_int = 72;
pub const CU_TARGET_COMPUTE_75: c_int = 75;
pub const CU_TARGET_COMPUTE_80: c_int = 80;
pub const CU_TARGET_COMPUTE_86: c_int = 86;
pub const CU_TARGET_COMPUTE_87: c_int = 87;
pub const CU_TARGET_COMPUTE_89: c_int = 89;
pub const CU_TARGET_COMPUTE_90: c_int = 90;
pub const CU_TARGET_COMPUTE_100: c_int = 100;
pub const CU_TARGET_COMPUTE_101: c_int = 101;
pub const CU_TARGET_COMPUTE_120: c_int = 120;
pub const CU_TARGET_COMPUTE_90A: c_int = 65626;
pub const CU_TARGET_COMPUTE_100A: c_int = 65636;
pub const CU_TARGET_COMPUTE_101A: c_int = 65637;
pub const CU_TARGET_COMPUTE_120A: c_int = 65656;
pub const enum_CUjit_target_enum = c_uint;
pub const CUjit_target = enum_CUjit_target_enum;
pub const CU_PREFER_PTX: c_int = 0;
pub const CU_PREFER_BINARY: c_int = 1;
pub const enum_CUjit_fallback_enum = c_uint;
pub const CUjit_fallback = enum_CUjit_fallback_enum;
pub const CU_JIT_CACHE_OPTION_NONE: c_int = 0;
pub const CU_JIT_CACHE_OPTION_CG: c_int = 1;
pub const CU_JIT_CACHE_OPTION_CA: c_int = 2;
pub const enum_CUjit_cacheMode_enum = c_uint;
pub const CUjit_cacheMode = enum_CUjit_cacheMode_enum;
pub const CU_JIT_INPUT_CUBIN: c_int = 0;
pub const CU_JIT_INPUT_PTX: c_int = 1;
pub const CU_JIT_INPUT_FATBINARY: c_int = 2;
pub const CU_JIT_INPUT_OBJECT: c_int = 3;
pub const CU_JIT_INPUT_LIBRARY: c_int = 4;
pub const CU_JIT_INPUT_NVVM: c_int = 5;
pub const CU_JIT_NUM_INPUT_TYPES: c_int = 6;
pub const enum_CUjitInputType_enum = c_uint;
pub const CUjitInputType = enum_CUjitInputType_enum;
pub const struct_CUlinkState_st = opaque {};
pub const CUlinkState = ?*struct_CUlinkState_st;
pub const CU_GRAPHICS_REGISTER_FLAGS_NONE: c_int = 0;
pub const CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY: c_int = 1;
pub const CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD: c_int = 2;
pub const CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST: c_int = 4;
pub const CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER: c_int = 8;
pub const enum_CUgraphicsRegisterFlags_enum = c_uint;
pub const CUgraphicsRegisterFlags = enum_CUgraphicsRegisterFlags_enum;
pub const CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE: c_int = 0;
pub const CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY: c_int = 1;
pub const CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD: c_int = 2;
pub const enum_CUgraphicsMapResourceFlags_enum = c_uint;
pub const CUgraphicsMapResourceFlags = enum_CUgraphicsMapResourceFlags_enum;
pub const CU_CUBEMAP_FACE_POSITIVE_X: c_int = 0;
pub const CU_CUBEMAP_FACE_NEGATIVE_X: c_int = 1;
pub const CU_CUBEMAP_FACE_POSITIVE_Y: c_int = 2;
pub const CU_CUBEMAP_FACE_NEGATIVE_Y: c_int = 3;
pub const CU_CUBEMAP_FACE_POSITIVE_Z: c_int = 4;
pub const CU_CUBEMAP_FACE_NEGATIVE_Z: c_int = 5;
pub const enum_CUarray_cubemap_face_enum = c_uint;
pub const CUarray_cubemap_face = enum_CUarray_cubemap_face_enum;
pub const CU_LIMIT_STACK_SIZE: c_int = 0;
pub const CU_LIMIT_PRINTF_FIFO_SIZE: c_int = 1;
pub const CU_LIMIT_MALLOC_HEAP_SIZE: c_int = 2;
pub const CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH: c_int = 3;
pub const CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT: c_int = 4;
pub const CU_LIMIT_MAX_L2_FETCH_GRANULARITY: c_int = 5;
pub const CU_LIMIT_PERSISTING_L2_CACHE_SIZE: c_int = 6;
pub const CU_LIMIT_SHMEM_SIZE: c_int = 7;
pub const CU_LIMIT_CIG_ENABLED: c_int = 8;
pub const CU_LIMIT_CIG_SHMEM_FALLBACK_ENABLED: c_int = 9;
pub const CU_LIMIT_MAX: c_int = 10;
pub const enum_CUlimit_enum = c_uint;
pub const CUlimit = enum_CUlimit_enum;
pub const CU_RESOURCE_TYPE_ARRAY: c_int = 0;
pub const CU_RESOURCE_TYPE_MIPMAPPED_ARRAY: c_int = 1;
pub const CU_RESOURCE_TYPE_LINEAR: c_int = 2;
pub const CU_RESOURCE_TYPE_PITCH2D: c_int = 3;
pub const enum_CUresourcetype_enum = c_uint;
pub const CUresourcetype = enum_CUresourcetype_enum;
pub const CUhostFn = ?*const fn (?*anyopaque) callconv(.c) void;
pub const CU_ACCESS_PROPERTY_NORMAL: c_int = 0;
pub const CU_ACCESS_PROPERTY_STREAMING: c_int = 1;
pub const CU_ACCESS_PROPERTY_PERSISTING: c_int = 2;
pub const enum_CUaccessProperty_enum = c_uint;
pub const CUaccessProperty = enum_CUaccessProperty_enum;
pub const struct_CUaccessPolicyWindow_st = extern struct {
    base_ptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    num_bytes: usize = @import("std").mem.zeroes(usize),
    hitRatio: f32 = @import("std").mem.zeroes(f32),
    hitProp: CUaccessProperty = @import("std").mem.zeroes(CUaccessProperty),
    missProp: CUaccessProperty = @import("std").mem.zeroes(CUaccessProperty),
};
pub const CUaccessPolicyWindow_v1 = struct_CUaccessPolicyWindow_st;
pub const CUaccessPolicyWindow = CUaccessPolicyWindow_v1;
pub const struct_CUDA_KERNEL_NODE_PARAMS_st = extern struct {
    func: CUfunction = @import("std").mem.zeroes(CUfunction),
    gridDimX: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimY: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimX: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimY: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    sharedMemBytes: c_uint = @import("std").mem.zeroes(c_uint),
    kernelParams: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    extra: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
};
pub const CUDA_KERNEL_NODE_PARAMS_v1 = struct_CUDA_KERNEL_NODE_PARAMS_st;
pub const struct_CUDA_KERNEL_NODE_PARAMS_v2_st = extern struct {
    func: CUfunction = @import("std").mem.zeroes(CUfunction),
    gridDimX: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimY: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimX: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimY: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    sharedMemBytes: c_uint = @import("std").mem.zeroes(c_uint),
    kernelParams: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    extra: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    kern: CUkernel = @import("std").mem.zeroes(CUkernel),
    ctx: CUcontext = @import("std").mem.zeroes(CUcontext),
};
pub const CUDA_KERNEL_NODE_PARAMS_v2 = struct_CUDA_KERNEL_NODE_PARAMS_v2_st;
pub const CUDA_KERNEL_NODE_PARAMS = CUDA_KERNEL_NODE_PARAMS_v2;
pub const struct_CUDA_KERNEL_NODE_PARAMS_v3_st = extern struct {
    func: CUfunction = @import("std").mem.zeroes(CUfunction),
    gridDimX: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimY: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimX: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimY: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    sharedMemBytes: c_uint = @import("std").mem.zeroes(c_uint),
    kernelParams: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    extra: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    kern: CUkernel = @import("std").mem.zeroes(CUkernel),
    ctx: CUcontext = @import("std").mem.zeroes(CUcontext),
};
pub const CUDA_KERNEL_NODE_PARAMS_v3 = struct_CUDA_KERNEL_NODE_PARAMS_v3_st;
pub const struct_CUDA_MEMSET_NODE_PARAMS_st = extern struct {
    dst: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    pitch: usize = @import("std").mem.zeroes(usize),
    value: c_uint = @import("std").mem.zeroes(c_uint),
    elementSize: c_uint = @import("std").mem.zeroes(c_uint),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
};
pub const CUDA_MEMSET_NODE_PARAMS_v1 = struct_CUDA_MEMSET_NODE_PARAMS_st;
pub const CUDA_MEMSET_NODE_PARAMS = CUDA_MEMSET_NODE_PARAMS_v1;
pub const struct_CUDA_MEMSET_NODE_PARAMS_v2_st = extern struct {
    dst: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    pitch: usize = @import("std").mem.zeroes(usize),
    value: c_uint = @import("std").mem.zeroes(c_uint),
    elementSize: c_uint = @import("std").mem.zeroes(c_uint),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
    ctx: CUcontext = @import("std").mem.zeroes(CUcontext),
};
pub const CUDA_MEMSET_NODE_PARAMS_v2 = struct_CUDA_MEMSET_NODE_PARAMS_v2_st;
pub const struct_CUDA_HOST_NODE_PARAMS_st = extern struct {
    @"fn": CUhostFn = @import("std").mem.zeroes(CUhostFn),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const CUDA_HOST_NODE_PARAMS_v1 = struct_CUDA_HOST_NODE_PARAMS_st;
pub const CUDA_HOST_NODE_PARAMS = CUDA_HOST_NODE_PARAMS_v1;
pub const struct_CUDA_HOST_NODE_PARAMS_v2_st = extern struct {
    @"fn": CUhostFn = @import("std").mem.zeroes(CUhostFn),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const CUDA_HOST_NODE_PARAMS_v2 = struct_CUDA_HOST_NODE_PARAMS_v2_st;
pub const CU_GRAPH_COND_TYPE_IF: c_int = 0;
pub const CU_GRAPH_COND_TYPE_WHILE: c_int = 1;
pub const CU_GRAPH_COND_TYPE_SWITCH: c_int = 2;
pub const enum_CUgraphConditionalNodeType_enum = c_uint;
pub const CUgraphConditionalNodeType = enum_CUgraphConditionalNodeType_enum;
pub const struct_CUDA_CONDITIONAL_NODE_PARAMS = extern struct {
    handle: CUgraphConditionalHandle = @import("std").mem.zeroes(CUgraphConditionalHandle),
    type: CUgraphConditionalNodeType = @import("std").mem.zeroes(CUgraphConditionalNodeType),
    size: c_uint = @import("std").mem.zeroes(c_uint),
    phGraph_out: [*c]CUgraph = @import("std").mem.zeroes([*c]CUgraph),
    ctx: CUcontext = @import("std").mem.zeroes(CUcontext),
};
pub const CUDA_CONDITIONAL_NODE_PARAMS = struct_CUDA_CONDITIONAL_NODE_PARAMS;
pub const CU_GRAPH_NODE_TYPE_KERNEL: c_int = 0;
pub const CU_GRAPH_NODE_TYPE_MEMCPY: c_int = 1;
pub const CU_GRAPH_NODE_TYPE_MEMSET: c_int = 2;
pub const CU_GRAPH_NODE_TYPE_HOST: c_int = 3;
pub const CU_GRAPH_NODE_TYPE_GRAPH: c_int = 4;
pub const CU_GRAPH_NODE_TYPE_EMPTY: c_int = 5;
pub const CU_GRAPH_NODE_TYPE_WAIT_EVENT: c_int = 6;
pub const CU_GRAPH_NODE_TYPE_EVENT_RECORD: c_int = 7;
pub const CU_GRAPH_NODE_TYPE_EXT_SEMAS_SIGNAL: c_int = 8;
pub const CU_GRAPH_NODE_TYPE_EXT_SEMAS_WAIT: c_int = 9;
pub const CU_GRAPH_NODE_TYPE_MEM_ALLOC: c_int = 10;
pub const CU_GRAPH_NODE_TYPE_MEM_FREE: c_int = 11;
pub const CU_GRAPH_NODE_TYPE_BATCH_MEM_OP: c_int = 12;
pub const CU_GRAPH_NODE_TYPE_CONDITIONAL: c_int = 13;
pub const enum_CUgraphNodeType_enum = c_uint;
pub const CUgraphNodeType = enum_CUgraphNodeType_enum;
pub const CU_GRAPH_DEPENDENCY_TYPE_DEFAULT: c_int = 0;
pub const CU_GRAPH_DEPENDENCY_TYPE_PROGRAMMATIC: c_int = 1;
pub const enum_CUgraphDependencyType_enum = c_uint;
pub const CUgraphDependencyType = enum_CUgraphDependencyType_enum;
pub const struct_CUgraphEdgeData_st = extern struct {
    from_port: u8 = @import("std").mem.zeroes(u8),
    to_port: u8 = @import("std").mem.zeroes(u8),
    type: u8 = @import("std").mem.zeroes(u8),
    reserved: [5]u8 = @import("std").mem.zeroes([5]u8),
};
pub const CUgraphEdgeData = struct_CUgraphEdgeData_st;
pub const CUDA_GRAPH_INSTANTIATE_SUCCESS: c_int = 0;
pub const CUDA_GRAPH_INSTANTIATE_ERROR: c_int = 1;
pub const CUDA_GRAPH_INSTANTIATE_INVALID_STRUCTURE: c_int = 2;
pub const CUDA_GRAPH_INSTANTIATE_NODE_OPERATION_NOT_SUPPORTED: c_int = 3;
pub const CUDA_GRAPH_INSTANTIATE_MULTIPLE_CTXS_NOT_SUPPORTED: c_int = 4;
pub const CUDA_GRAPH_INSTANTIATE_CONDITIONAL_HANDLE_UNUSED: c_int = 5;
pub const enum_CUgraphInstantiateResult_enum = c_uint;
pub const CUgraphInstantiateResult = enum_CUgraphInstantiateResult_enum;
pub const struct_CUDA_GRAPH_INSTANTIATE_PARAMS_st = extern struct {
    flags: cuuint64_t = @import("std").mem.zeroes(cuuint64_t),
    hUploadStream: CUstream = @import("std").mem.zeroes(CUstream),
    hErrNode_out: CUgraphNode = @import("std").mem.zeroes(CUgraphNode),
    result_out: CUgraphInstantiateResult = @import("std").mem.zeroes(CUgraphInstantiateResult),
};
pub const CUDA_GRAPH_INSTANTIATE_PARAMS = struct_CUDA_GRAPH_INSTANTIATE_PARAMS_st;
pub const CU_SYNC_POLICY_AUTO: c_int = 1;
pub const CU_SYNC_POLICY_SPIN: c_int = 2;
pub const CU_SYNC_POLICY_YIELD: c_int = 3;
pub const CU_SYNC_POLICY_BLOCKING_SYNC: c_int = 4;
pub const enum_CUsynchronizationPolicy_enum = c_uint;
pub const CUsynchronizationPolicy = enum_CUsynchronizationPolicy_enum;
pub const CU_CLUSTER_SCHEDULING_POLICY_DEFAULT: c_int = 0;
pub const CU_CLUSTER_SCHEDULING_POLICY_SPREAD: c_int = 1;
pub const CU_CLUSTER_SCHEDULING_POLICY_LOAD_BALANCING: c_int = 2;
pub const enum_CUclusterSchedulingPolicy_enum = c_uint;
pub const CUclusterSchedulingPolicy = enum_CUclusterSchedulingPolicy_enum;
pub const CU_LAUNCH_MEM_SYNC_DOMAIN_DEFAULT: c_int = 0;
pub const CU_LAUNCH_MEM_SYNC_DOMAIN_REMOTE: c_int = 1;
pub const enum_CUlaunchMemSyncDomain_enum = c_uint;
pub const CUlaunchMemSyncDomain = enum_CUlaunchMemSyncDomain_enum;
pub const struct_CUlaunchMemSyncDomainMap_st = extern struct {
    default_: u8 = @import("std").mem.zeroes(u8),
    remote: u8 = @import("std").mem.zeroes(u8),
};
pub const CUlaunchMemSyncDomainMap = struct_CUlaunchMemSyncDomainMap_st;
pub const CU_LAUNCH_ATTRIBUTE_IGNORE: c_int = 0;
pub const CU_LAUNCH_ATTRIBUTE_ACCESS_POLICY_WINDOW: c_int = 1;
pub const CU_LAUNCH_ATTRIBUTE_COOPERATIVE: c_int = 2;
pub const CU_LAUNCH_ATTRIBUTE_SYNCHRONIZATION_POLICY: c_int = 3;
pub const CU_LAUNCH_ATTRIBUTE_CLUSTER_DIMENSION: c_int = 4;
pub const CU_LAUNCH_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE: c_int = 5;
pub const CU_LAUNCH_ATTRIBUTE_PROGRAMMATIC_STREAM_SERIALIZATION: c_int = 6;
pub const CU_LAUNCH_ATTRIBUTE_PROGRAMMATIC_EVENT: c_int = 7;
pub const CU_LAUNCH_ATTRIBUTE_PRIORITY: c_int = 8;
pub const CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP: c_int = 9;
pub const CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN: c_int = 10;
pub const CU_LAUNCH_ATTRIBUTE_PREFERRED_CLUSTER_DIMENSION: c_int = 11;
pub const CU_LAUNCH_ATTRIBUTE_LAUNCH_COMPLETION_EVENT: c_int = 12;
pub const CU_LAUNCH_ATTRIBUTE_DEVICE_UPDATABLE_KERNEL_NODE: c_int = 13;
pub const CU_LAUNCH_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT: c_int = 14;
pub const enum_CUlaunchAttributeID_enum = c_uint;
pub const CUlaunchAttributeID = enum_CUlaunchAttributeID_enum;
const struct_unnamed_9 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
    z: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_10 = extern struct {
    event: CUevent = @import("std").mem.zeroes(CUevent),
    flags: c_int = @import("std").mem.zeroes(c_int),
    triggerAtBlockStart: c_int = @import("std").mem.zeroes(c_int),
};
const struct_unnamed_11 = extern struct {
    event: CUevent = @import("std").mem.zeroes(CUevent),
    flags: c_int = @import("std").mem.zeroes(c_int),
};
const struct_unnamed_12 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
    z: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_13 = extern struct {
    deviceUpdatable: c_int = @import("std").mem.zeroes(c_int),
    devNode: CUgraphDeviceNode = @import("std").mem.zeroes(CUgraphDeviceNode),
};
pub const union_CUlaunchAttributeValue_union = extern union {
    pad: [64]u8,
    accessPolicyWindow: CUaccessPolicyWindow,
    cooperative: c_int,
    syncPolicy: CUsynchronizationPolicy,
    clusterDim: struct_unnamed_9,
    clusterSchedulingPolicyPreference: CUclusterSchedulingPolicy,
    programmaticStreamSerializationAllowed: c_int,
    programmaticEvent: struct_unnamed_10,
    launchCompletionEvent: struct_unnamed_11,
    priority: c_int,
    memSyncDomainMap: CUlaunchMemSyncDomainMap,
    memSyncDomain: CUlaunchMemSyncDomain,
    preferredClusterDim: struct_unnamed_12,
    deviceUpdatableKernelNode: struct_unnamed_13,
    sharedMemCarveout: c_uint,
};
pub const CUlaunchAttributeValue = union_CUlaunchAttributeValue_union;
pub const struct_CUlaunchAttribute_st = extern struct {
    id: CUlaunchAttributeID = @import("std").mem.zeroes(CUlaunchAttributeID),
    pad: [4]u8 = @import("std").mem.zeroes([4]u8),
    value: CUlaunchAttributeValue = @import("std").mem.zeroes(CUlaunchAttributeValue),
};
pub const CUlaunchAttribute = struct_CUlaunchAttribute_st;
pub const struct_CUlaunchConfig_st = extern struct {
    gridDimX: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimY: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimX: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimY: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    sharedMemBytes: c_uint = @import("std").mem.zeroes(c_uint),
    hStream: CUstream = @import("std").mem.zeroes(CUstream),
    attrs: [*c]CUlaunchAttribute = @import("std").mem.zeroes([*c]CUlaunchAttribute),
    numAttrs: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUlaunchConfig = struct_CUlaunchConfig_st;
pub const CUkernelNodeAttrID = CUlaunchAttributeID;
pub const CUkernelNodeAttrValue_v1 = CUlaunchAttributeValue;
pub const CUkernelNodeAttrValue = CUkernelNodeAttrValue_v1;
pub const CU_STREAM_CAPTURE_STATUS_NONE: c_int = 0;
pub const CU_STREAM_CAPTURE_STATUS_ACTIVE: c_int = 1;
pub const CU_STREAM_CAPTURE_STATUS_INVALIDATED: c_int = 2;
pub const enum_CUstreamCaptureStatus_enum = c_uint;
pub const CUstreamCaptureStatus = enum_CUstreamCaptureStatus_enum;
pub const CU_STREAM_CAPTURE_MODE_GLOBAL: c_int = 0;
pub const CU_STREAM_CAPTURE_MODE_THREAD_LOCAL: c_int = 1;
pub const CU_STREAM_CAPTURE_MODE_RELAXED: c_int = 2;
pub const enum_CUstreamCaptureMode_enum = c_uint;
pub const CUstreamCaptureMode = enum_CUstreamCaptureMode_enum;
pub const CUstreamAttrID = CUlaunchAttributeID;
pub const CUstreamAttrValue_v1 = CUlaunchAttributeValue;
pub const CUstreamAttrValue = CUstreamAttrValue_v1;
pub const CU_GET_PROC_ADDRESS_DEFAULT: c_int = 0;
pub const CU_GET_PROC_ADDRESS_LEGACY_STREAM: c_int = 1;
pub const CU_GET_PROC_ADDRESS_PER_THREAD_DEFAULT_STREAM: c_int = 2;
pub const enum_CUdriverProcAddress_flags_enum = c_uint;
pub const CUdriverProcAddress_flags = enum_CUdriverProcAddress_flags_enum;
pub const CU_GET_PROC_ADDRESS_SUCCESS: c_int = 0;
pub const CU_GET_PROC_ADDRESS_SYMBOL_NOT_FOUND: c_int = 1;
pub const CU_GET_PROC_ADDRESS_VERSION_NOT_SUFFICIENT: c_int = 2;
pub const enum_CUdriverProcAddressQueryResult_enum = c_uint;
pub const CUdriverProcAddressQueryResult = enum_CUdriverProcAddressQueryResult_enum;
pub const CU_EXEC_AFFINITY_TYPE_SM_COUNT: c_int = 0;
pub const CU_EXEC_AFFINITY_TYPE_MAX: c_int = 1;
pub const enum_CUexecAffinityType_enum = c_uint;
pub const CUexecAffinityType = enum_CUexecAffinityType_enum;
pub const struct_CUexecAffinitySmCount_st = extern struct {
    val: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUexecAffinitySmCount_v1 = struct_CUexecAffinitySmCount_st;
pub const CUexecAffinitySmCount = CUexecAffinitySmCount_v1;
const union_unnamed_14 = extern union {
    smCount: CUexecAffinitySmCount,
};
pub const struct_CUexecAffinityParam_st = extern struct {
    type: CUexecAffinityType = @import("std").mem.zeroes(CUexecAffinityType),
    param: union_unnamed_14 = @import("std").mem.zeroes(union_unnamed_14),
};
pub const CUexecAffinityParam_v1 = struct_CUexecAffinityParam_st;
pub const CUexecAffinityParam = CUexecAffinityParam_v1;
pub const CIG_DATA_TYPE_D3D12_COMMAND_QUEUE: c_int = 1;
pub const enum_CUcigDataType_enum = c_uint;
pub const CUcigDataType = enum_CUcigDataType_enum;
pub const struct_CUctxCigParam_st = extern struct {
    sharedDataType: CUcigDataType = @import("std").mem.zeroes(CUcigDataType),
    sharedData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const CUctxCigParam = struct_CUctxCigParam_st;
pub const struct_CUctxCreateParams_st = extern struct {
    execAffinityParams: [*c]CUexecAffinityParam = @import("std").mem.zeroes([*c]CUexecAffinityParam),
    numExecAffinityParams: c_int = @import("std").mem.zeroes(c_int),
    cigParams: [*c]CUctxCigParam = @import("std").mem.zeroes([*c]CUctxCigParam),
};
pub const CUctxCreateParams = struct_CUctxCreateParams_st;
pub const CU_LIBRARY_HOST_UNIVERSAL_FUNCTION_AND_DATA_TABLE: c_int = 0;
pub const CU_LIBRARY_BINARY_IS_PRESERVED: c_int = 1;
pub const CU_LIBRARY_NUM_OPTIONS: c_int = 2;
pub const enum_CUlibraryOption_enum = c_uint;
pub const CUlibraryOption = enum_CUlibraryOption_enum;
pub const struct_CUlibraryHostUniversalFunctionAndDataTable_st = extern struct {
    functionTable: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    functionWindowSize: usize = @import("std").mem.zeroes(usize),
    dataTable: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dataWindowSize: usize = @import("std").mem.zeroes(usize),
};
pub const CUlibraryHostUniversalFunctionAndDataTable = struct_CUlibraryHostUniversalFunctionAndDataTable_st;
pub const CUDA_SUCCESS: c_int = 0;
pub const CUDA_ERROR_INVALID_VALUE: c_int = 1;
pub const CUDA_ERROR_OUT_OF_MEMORY: c_int = 2;
pub const CUDA_ERROR_NOT_INITIALIZED: c_int = 3;
pub const CUDA_ERROR_DEINITIALIZED: c_int = 4;
pub const CUDA_ERROR_PROFILER_DISABLED: c_int = 5;
pub const CUDA_ERROR_PROFILER_NOT_INITIALIZED: c_int = 6;
pub const CUDA_ERROR_PROFILER_ALREADY_STARTED: c_int = 7;
pub const CUDA_ERROR_PROFILER_ALREADY_STOPPED: c_int = 8;
pub const CUDA_ERROR_STUB_LIBRARY: c_int = 34;
pub const CUDA_ERROR_DEVICE_UNAVAILABLE: c_int = 46;
pub const CUDA_ERROR_NO_DEVICE: c_int = 100;
pub const CUDA_ERROR_INVALID_DEVICE: c_int = 101;
pub const CUDA_ERROR_DEVICE_NOT_LICENSED: c_int = 102;
pub const CUDA_ERROR_INVALID_IMAGE: c_int = 200;
pub const CUDA_ERROR_INVALID_CONTEXT: c_int = 201;
pub const CUDA_ERROR_CONTEXT_ALREADY_CURRENT: c_int = 202;
pub const CUDA_ERROR_MAP_FAILED: c_int = 205;
pub const CUDA_ERROR_UNMAP_FAILED: c_int = 206;
pub const CUDA_ERROR_ARRAY_IS_MAPPED: c_int = 207;
pub const CUDA_ERROR_ALREADY_MAPPED: c_int = 208;
pub const CUDA_ERROR_NO_BINARY_FOR_GPU: c_int = 209;
pub const CUDA_ERROR_ALREADY_ACQUIRED: c_int = 210;
pub const CUDA_ERROR_NOT_MAPPED: c_int = 211;
pub const CUDA_ERROR_NOT_MAPPED_AS_ARRAY: c_int = 212;
pub const CUDA_ERROR_NOT_MAPPED_AS_POINTER: c_int = 213;
pub const CUDA_ERROR_ECC_UNCORRECTABLE: c_int = 214;
pub const CUDA_ERROR_UNSUPPORTED_LIMIT: c_int = 215;
pub const CUDA_ERROR_CONTEXT_ALREADY_IN_USE: c_int = 216;
pub const CUDA_ERROR_PEER_ACCESS_UNSUPPORTED: c_int = 217;
pub const CUDA_ERROR_INVALID_PTX: c_int = 218;
pub const CUDA_ERROR_INVALID_GRAPHICS_CONTEXT: c_int = 219;
pub const CUDA_ERROR_NVLINK_UNCORRECTABLE: c_int = 220;
pub const CUDA_ERROR_JIT_COMPILER_NOT_FOUND: c_int = 221;
pub const CUDA_ERROR_UNSUPPORTED_PTX_VERSION: c_int = 222;
pub const CUDA_ERROR_JIT_COMPILATION_DISABLED: c_int = 223;
pub const CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY: c_int = 224;
pub const CUDA_ERROR_UNSUPPORTED_DEVSIDE_SYNC: c_int = 225;
pub const CUDA_ERROR_CONTAINED: c_int = 226;
pub const CUDA_ERROR_INVALID_SOURCE: c_int = 300;
pub const CUDA_ERROR_FILE_NOT_FOUND: c_int = 301;
pub const CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND: c_int = 302;
pub const CUDA_ERROR_SHARED_OBJECT_INIT_FAILED: c_int = 303;
pub const CUDA_ERROR_OPERATING_SYSTEM: c_int = 304;
pub const CUDA_ERROR_INVALID_HANDLE: c_int = 400;
pub const CUDA_ERROR_ILLEGAL_STATE: c_int = 401;
pub const CUDA_ERROR_LOSSY_QUERY: c_int = 402;
pub const CUDA_ERROR_NOT_FOUND: c_int = 500;
pub const CUDA_ERROR_NOT_READY: c_int = 600;
pub const CUDA_ERROR_ILLEGAL_ADDRESS: c_int = 700;
pub const CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES: c_int = 701;
pub const CUDA_ERROR_LAUNCH_TIMEOUT: c_int = 702;
pub const CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING: c_int = 703;
pub const CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED: c_int = 704;
pub const CUDA_ERROR_PEER_ACCESS_NOT_ENABLED: c_int = 705;
pub const CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE: c_int = 708;
pub const CUDA_ERROR_CONTEXT_IS_DESTROYED: c_int = 709;
pub const CUDA_ERROR_ASSERT: c_int = 710;
pub const CUDA_ERROR_TOO_MANY_PEERS: c_int = 711;
pub const CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED: c_int = 712;
pub const CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED: c_int = 713;
pub const CUDA_ERROR_HARDWARE_STACK_ERROR: c_int = 714;
pub const CUDA_ERROR_ILLEGAL_INSTRUCTION: c_int = 715;
pub const CUDA_ERROR_MISALIGNED_ADDRESS: c_int = 716;
pub const CUDA_ERROR_INVALID_ADDRESS_SPACE: c_int = 717;
pub const CUDA_ERROR_INVALID_PC: c_int = 718;
pub const CUDA_ERROR_LAUNCH_FAILED: c_int = 719;
pub const CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE: c_int = 720;
pub const CUDA_ERROR_TENSOR_MEMORY_LEAK: c_int = 721;
pub const CUDA_ERROR_NOT_PERMITTED: c_int = 800;
pub const CUDA_ERROR_NOT_SUPPORTED: c_int = 801;
pub const CUDA_ERROR_SYSTEM_NOT_READY: c_int = 802;
pub const CUDA_ERROR_SYSTEM_DRIVER_MISMATCH: c_int = 803;
pub const CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE: c_int = 804;
pub const CUDA_ERROR_MPS_CONNECTION_FAILED: c_int = 805;
pub const CUDA_ERROR_MPS_RPC_FAILURE: c_int = 806;
pub const CUDA_ERROR_MPS_SERVER_NOT_READY: c_int = 807;
pub const CUDA_ERROR_MPS_MAX_CLIENTS_REACHED: c_int = 808;
pub const CUDA_ERROR_MPS_MAX_CONNECTIONS_REACHED: c_int = 809;
pub const CUDA_ERROR_MPS_CLIENT_TERMINATED: c_int = 810;
pub const CUDA_ERROR_CDP_NOT_SUPPORTED: c_int = 811;
pub const CUDA_ERROR_CDP_VERSION_MISMATCH: c_int = 812;
pub const CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED: c_int = 900;
pub const CUDA_ERROR_STREAM_CAPTURE_INVALIDATED: c_int = 901;
pub const CUDA_ERROR_STREAM_CAPTURE_MERGE: c_int = 902;
pub const CUDA_ERROR_STREAM_CAPTURE_UNMATCHED: c_int = 903;
pub const CUDA_ERROR_STREAM_CAPTURE_UNJOINED: c_int = 904;
pub const CUDA_ERROR_STREAM_CAPTURE_ISOLATION: c_int = 905;
pub const CUDA_ERROR_STREAM_CAPTURE_IMPLICIT: c_int = 906;
pub const CUDA_ERROR_CAPTURED_EVENT: c_int = 907;
pub const CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD: c_int = 908;
pub const CUDA_ERROR_TIMEOUT: c_int = 909;
pub const CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE: c_int = 910;
pub const CUDA_ERROR_EXTERNAL_DEVICE: c_int = 911;
pub const CUDA_ERROR_INVALID_CLUSTER_SIZE: c_int = 912;
pub const CUDA_ERROR_FUNCTION_NOT_LOADED: c_int = 913;
pub const CUDA_ERROR_INVALID_RESOURCE_TYPE: c_int = 914;
pub const CUDA_ERROR_INVALID_RESOURCE_CONFIGURATION: c_int = 915;
pub const CUDA_ERROR_KEY_ROTATION: c_int = 916;
pub const CUDA_ERROR_UNKNOWN: c_int = 999;
pub const enum_cudaError_enum = c_uint;
pub const CUresult = enum_cudaError_enum;
pub const CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK: c_int = 1;
pub const CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED: c_int = 2;
pub const CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED: c_int = 3;
pub const CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED: c_int = 4;
pub const CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED: c_int = 4;
pub const enum_CUdevice_P2PAttribute_enum = c_uint;
pub const CUdevice_P2PAttribute = enum_CUdevice_P2PAttribute_enum;
pub const CUstreamCallback = ?*const fn (CUstream, CUresult, ?*anyopaque) callconv(.c) void;
pub const CUoccupancyB2DSize = ?*const fn (c_int) callconv(.c) usize;
pub const struct_CUDA_MEMCPY2D_st = extern struct {
    srcXInBytes: usize = @import("std").mem.zeroes(usize),
    srcY: usize = @import("std").mem.zeroes(usize),
    srcMemoryType: CUmemorytype = @import("std").mem.zeroes(CUmemorytype),
    srcHost: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcDevice: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    srcArray: CUarray = @import("std").mem.zeroes(CUarray),
    srcPitch: usize = @import("std").mem.zeroes(usize),
    dstXInBytes: usize = @import("std").mem.zeroes(usize),
    dstY: usize = @import("std").mem.zeroes(usize),
    dstMemoryType: CUmemorytype = @import("std").mem.zeroes(CUmemorytype),
    dstHost: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dstDevice: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    dstArray: CUarray = @import("std").mem.zeroes(CUarray),
    dstPitch: usize = @import("std").mem.zeroes(usize),
    WidthInBytes: usize = @import("std").mem.zeroes(usize),
    Height: usize = @import("std").mem.zeroes(usize),
};
pub const CUDA_MEMCPY2D_v2 = struct_CUDA_MEMCPY2D_st;
pub const CUDA_MEMCPY2D = CUDA_MEMCPY2D_v2;
pub const struct_CUDA_MEMCPY3D_st = extern struct {
    srcXInBytes: usize = @import("std").mem.zeroes(usize),
    srcY: usize = @import("std").mem.zeroes(usize),
    srcZ: usize = @import("std").mem.zeroes(usize),
    srcLOD: usize = @import("std").mem.zeroes(usize),
    srcMemoryType: CUmemorytype = @import("std").mem.zeroes(CUmemorytype),
    srcHost: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcDevice: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    srcArray: CUarray = @import("std").mem.zeroes(CUarray),
    reserved0: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    srcPitch: usize = @import("std").mem.zeroes(usize),
    srcHeight: usize = @import("std").mem.zeroes(usize),
    dstXInBytes: usize = @import("std").mem.zeroes(usize),
    dstY: usize = @import("std").mem.zeroes(usize),
    dstZ: usize = @import("std").mem.zeroes(usize),
    dstLOD: usize = @import("std").mem.zeroes(usize),
    dstMemoryType: CUmemorytype = @import("std").mem.zeroes(CUmemorytype),
    dstHost: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dstDevice: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    dstArray: CUarray = @import("std").mem.zeroes(CUarray),
    reserved1: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dstPitch: usize = @import("std").mem.zeroes(usize),
    dstHeight: usize = @import("std").mem.zeroes(usize),
    WidthInBytes: usize = @import("std").mem.zeroes(usize),
    Height: usize = @import("std").mem.zeroes(usize),
    Depth: usize = @import("std").mem.zeroes(usize),
};
pub const CUDA_MEMCPY3D_v2 = struct_CUDA_MEMCPY3D_st;
pub const CUDA_MEMCPY3D = CUDA_MEMCPY3D_v2;
pub const struct_CUDA_MEMCPY3D_PEER_st = extern struct {
    srcXInBytes: usize = @import("std").mem.zeroes(usize),
    srcY: usize = @import("std").mem.zeroes(usize),
    srcZ: usize = @import("std").mem.zeroes(usize),
    srcLOD: usize = @import("std").mem.zeroes(usize),
    srcMemoryType: CUmemorytype = @import("std").mem.zeroes(CUmemorytype),
    srcHost: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcDevice: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    srcArray: CUarray = @import("std").mem.zeroes(CUarray),
    srcContext: CUcontext = @import("std").mem.zeroes(CUcontext),
    srcPitch: usize = @import("std").mem.zeroes(usize),
    srcHeight: usize = @import("std").mem.zeroes(usize),
    dstXInBytes: usize = @import("std").mem.zeroes(usize),
    dstY: usize = @import("std").mem.zeroes(usize),
    dstZ: usize = @import("std").mem.zeroes(usize),
    dstLOD: usize = @import("std").mem.zeroes(usize),
    dstMemoryType: CUmemorytype = @import("std").mem.zeroes(CUmemorytype),
    dstHost: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dstDevice: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    dstArray: CUarray = @import("std").mem.zeroes(CUarray),
    dstContext: CUcontext = @import("std").mem.zeroes(CUcontext),
    dstPitch: usize = @import("std").mem.zeroes(usize),
    dstHeight: usize = @import("std").mem.zeroes(usize),
    WidthInBytes: usize = @import("std").mem.zeroes(usize),
    Height: usize = @import("std").mem.zeroes(usize),
    Depth: usize = @import("std").mem.zeroes(usize),
};
pub const CUDA_MEMCPY3D_PEER_v1 = struct_CUDA_MEMCPY3D_PEER_st;
pub const CUDA_MEMCPY3D_PEER = CUDA_MEMCPY3D_PEER_v1;
pub const struct_CUDA_MEMCPY_NODE_PARAMS_st = extern struct {
    flags: c_int = @import("std").mem.zeroes(c_int),
    reserved: c_int = @import("std").mem.zeroes(c_int),
    copyCtx: CUcontext = @import("std").mem.zeroes(CUcontext),
    copyParams: CUDA_MEMCPY3D = @import("std").mem.zeroes(CUDA_MEMCPY3D),
};
pub const CUDA_MEMCPY_NODE_PARAMS = struct_CUDA_MEMCPY_NODE_PARAMS_st;
pub const struct_CUDA_ARRAY_DESCRIPTOR_st = extern struct {
    Width: usize = @import("std").mem.zeroes(usize),
    Height: usize = @import("std").mem.zeroes(usize),
    Format: CUarray_format = @import("std").mem.zeroes(CUarray_format),
    NumChannels: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_ARRAY_DESCRIPTOR_v2 = struct_CUDA_ARRAY_DESCRIPTOR_st;
pub const CUDA_ARRAY_DESCRIPTOR = CUDA_ARRAY_DESCRIPTOR_v2;
pub const struct_CUDA_ARRAY3D_DESCRIPTOR_st = extern struct {
    Width: usize = @import("std").mem.zeroes(usize),
    Height: usize = @import("std").mem.zeroes(usize),
    Depth: usize = @import("std").mem.zeroes(usize),
    Format: CUarray_format = @import("std").mem.zeroes(CUarray_format),
    NumChannels: c_uint = @import("std").mem.zeroes(c_uint),
    Flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_ARRAY3D_DESCRIPTOR_v2 = struct_CUDA_ARRAY3D_DESCRIPTOR_st;
pub const CUDA_ARRAY3D_DESCRIPTOR = CUDA_ARRAY3D_DESCRIPTOR_v2;
const struct_unnamed_15 = extern struct {
    width: c_uint = @import("std").mem.zeroes(c_uint),
    height: c_uint = @import("std").mem.zeroes(c_uint),
    depth: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_CUDA_ARRAY_SPARSE_PROPERTIES_st = extern struct {
    tileExtent: struct_unnamed_15 = @import("std").mem.zeroes(struct_unnamed_15),
    miptailFirstLevel: c_uint = @import("std").mem.zeroes(c_uint),
    miptailSize: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [4]c_uint = @import("std").mem.zeroes([4]c_uint),
};
pub const CUDA_ARRAY_SPARSE_PROPERTIES_v1 = struct_CUDA_ARRAY_SPARSE_PROPERTIES_st;
pub const CUDA_ARRAY_SPARSE_PROPERTIES = CUDA_ARRAY_SPARSE_PROPERTIES_v1;
pub const struct_CUDA_ARRAY_MEMORY_REQUIREMENTS_st = extern struct {
    size: usize = @import("std").mem.zeroes(usize),
    alignment: usize = @import("std").mem.zeroes(usize),
    reserved: [4]c_uint = @import("std").mem.zeroes([4]c_uint),
};
pub const CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 = struct_CUDA_ARRAY_MEMORY_REQUIREMENTS_st;
pub const CUDA_ARRAY_MEMORY_REQUIREMENTS = CUDA_ARRAY_MEMORY_REQUIREMENTS_v1;
const struct_unnamed_17 = extern struct {
    hArray: CUarray = @import("std").mem.zeroes(CUarray),
};
const struct_unnamed_18 = extern struct {
    hMipmappedArray: CUmipmappedArray = @import("std").mem.zeroes(CUmipmappedArray),
};
const struct_unnamed_19 = extern struct {
    devPtr: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    format: CUarray_format = @import("std").mem.zeroes(CUarray_format),
    numChannels: c_uint = @import("std").mem.zeroes(c_uint),
    sizeInBytes: usize = @import("std").mem.zeroes(usize),
};
const struct_unnamed_20 = extern struct {
    devPtr: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    format: CUarray_format = @import("std").mem.zeroes(CUarray_format),
    numChannels: c_uint = @import("std").mem.zeroes(c_uint),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
    pitchInBytes: usize = @import("std").mem.zeroes(usize),
};
const struct_unnamed_21 = extern struct {
    reserved: [32]c_int = @import("std").mem.zeroes([32]c_int),
};
const union_unnamed_16 = extern union {
    array: struct_unnamed_17,
    mipmap: struct_unnamed_18,
    linear: struct_unnamed_19,
    pitch2D: struct_unnamed_20,
    reserved: struct_unnamed_21,
};
pub const struct_CUDA_RESOURCE_DESC_st = extern struct {
    resType: CUresourcetype = @import("std").mem.zeroes(CUresourcetype),
    res: union_unnamed_16 = @import("std").mem.zeroes(union_unnamed_16),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_RESOURCE_DESC_v1 = struct_CUDA_RESOURCE_DESC_st;
pub const CUDA_RESOURCE_DESC = CUDA_RESOURCE_DESC_v1;
pub const struct_CUDA_TEXTURE_DESC_st = extern struct {
    addressMode: [3]CUaddress_mode = @import("std").mem.zeroes([3]CUaddress_mode),
    filterMode: CUfilter_mode = @import("std").mem.zeroes(CUfilter_mode),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    maxAnisotropy: c_uint = @import("std").mem.zeroes(c_uint),
    mipmapFilterMode: CUfilter_mode = @import("std").mem.zeroes(CUfilter_mode),
    mipmapLevelBias: f32 = @import("std").mem.zeroes(f32),
    minMipmapLevelClamp: f32 = @import("std").mem.zeroes(f32),
    maxMipmapLevelClamp: f32 = @import("std").mem.zeroes(f32),
    borderColor: [4]f32 = @import("std").mem.zeroes([4]f32),
    reserved: [12]c_int = @import("std").mem.zeroes([12]c_int),
};
pub const CUDA_TEXTURE_DESC_v1 = struct_CUDA_TEXTURE_DESC_st;
pub const CUDA_TEXTURE_DESC = CUDA_TEXTURE_DESC_v1;
pub const CU_RES_VIEW_FORMAT_NONE: c_int = 0;
pub const CU_RES_VIEW_FORMAT_UINT_1X8: c_int = 1;
pub const CU_RES_VIEW_FORMAT_UINT_2X8: c_int = 2;
pub const CU_RES_VIEW_FORMAT_UINT_4X8: c_int = 3;
pub const CU_RES_VIEW_FORMAT_SINT_1X8: c_int = 4;
pub const CU_RES_VIEW_FORMAT_SINT_2X8: c_int = 5;
pub const CU_RES_VIEW_FORMAT_SINT_4X8: c_int = 6;
pub const CU_RES_VIEW_FORMAT_UINT_1X16: c_int = 7;
pub const CU_RES_VIEW_FORMAT_UINT_2X16: c_int = 8;
pub const CU_RES_VIEW_FORMAT_UINT_4X16: c_int = 9;
pub const CU_RES_VIEW_FORMAT_SINT_1X16: c_int = 10;
pub const CU_RES_VIEW_FORMAT_SINT_2X16: c_int = 11;
pub const CU_RES_VIEW_FORMAT_SINT_4X16: c_int = 12;
pub const CU_RES_VIEW_FORMAT_UINT_1X32: c_int = 13;
pub const CU_RES_VIEW_FORMAT_UINT_2X32: c_int = 14;
pub const CU_RES_VIEW_FORMAT_UINT_4X32: c_int = 15;
pub const CU_RES_VIEW_FORMAT_SINT_1X32: c_int = 16;
pub const CU_RES_VIEW_FORMAT_SINT_2X32: c_int = 17;
pub const CU_RES_VIEW_FORMAT_SINT_4X32: c_int = 18;
pub const CU_RES_VIEW_FORMAT_FLOAT_1X16: c_int = 19;
pub const CU_RES_VIEW_FORMAT_FLOAT_2X16: c_int = 20;
pub const CU_RES_VIEW_FORMAT_FLOAT_4X16: c_int = 21;
pub const CU_RES_VIEW_FORMAT_FLOAT_1X32: c_int = 22;
pub const CU_RES_VIEW_FORMAT_FLOAT_2X32: c_int = 23;
pub const CU_RES_VIEW_FORMAT_FLOAT_4X32: c_int = 24;
pub const CU_RES_VIEW_FORMAT_UNSIGNED_BC1: c_int = 25;
pub const CU_RES_VIEW_FORMAT_UNSIGNED_BC2: c_int = 26;
pub const CU_RES_VIEW_FORMAT_UNSIGNED_BC3: c_int = 27;
pub const CU_RES_VIEW_FORMAT_UNSIGNED_BC4: c_int = 28;
pub const CU_RES_VIEW_FORMAT_SIGNED_BC4: c_int = 29;
pub const CU_RES_VIEW_FORMAT_UNSIGNED_BC5: c_int = 30;
pub const CU_RES_VIEW_FORMAT_SIGNED_BC5: c_int = 31;
pub const CU_RES_VIEW_FORMAT_UNSIGNED_BC6H: c_int = 32;
pub const CU_RES_VIEW_FORMAT_SIGNED_BC6H: c_int = 33;
pub const CU_RES_VIEW_FORMAT_UNSIGNED_BC7: c_int = 34;
pub const enum_CUresourceViewFormat_enum = c_uint;
pub const CUresourceViewFormat = enum_CUresourceViewFormat_enum;
pub const struct_CUDA_RESOURCE_VIEW_DESC_st = extern struct {
    format: CUresourceViewFormat = @import("std").mem.zeroes(CUresourceViewFormat),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
    depth: usize = @import("std").mem.zeroes(usize),
    firstMipmapLevel: c_uint = @import("std").mem.zeroes(c_uint),
    lastMipmapLevel: c_uint = @import("std").mem.zeroes(c_uint),
    firstLayer: c_uint = @import("std").mem.zeroes(c_uint),
    lastLayer: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const CUDA_RESOURCE_VIEW_DESC_v1 = struct_CUDA_RESOURCE_VIEW_DESC_st;
pub const CUDA_RESOURCE_VIEW_DESC = CUDA_RESOURCE_VIEW_DESC_v1;
pub const struct_CUtensorMap_st = extern struct {
    @"opaque": [16]cuuint64_t align(64) = @import("std").mem.zeroes([16]cuuint64_t),
};
pub const CUtensorMap = struct_CUtensorMap_st;
pub const CU_TENSOR_MAP_DATA_TYPE_UINT8: c_int = 0;
pub const CU_TENSOR_MAP_DATA_TYPE_UINT16: c_int = 1;
pub const CU_TENSOR_MAP_DATA_TYPE_UINT32: c_int = 2;
pub const CU_TENSOR_MAP_DATA_TYPE_INT32: c_int = 3;
pub const CU_TENSOR_MAP_DATA_TYPE_UINT64: c_int = 4;
pub const CU_TENSOR_MAP_DATA_TYPE_INT64: c_int = 5;
pub const CU_TENSOR_MAP_DATA_TYPE_FLOAT16: c_int = 6;
pub const CU_TENSOR_MAP_DATA_TYPE_FLOAT32: c_int = 7;
pub const CU_TENSOR_MAP_DATA_TYPE_FLOAT64: c_int = 8;
pub const CU_TENSOR_MAP_DATA_TYPE_BFLOAT16: c_int = 9;
pub const CU_TENSOR_MAP_DATA_TYPE_FLOAT32_FTZ: c_int = 10;
pub const CU_TENSOR_MAP_DATA_TYPE_TFLOAT32: c_int = 11;
pub const CU_TENSOR_MAP_DATA_TYPE_TFLOAT32_FTZ: c_int = 12;
pub const CU_TENSOR_MAP_DATA_TYPE_16U4_ALIGN8B: c_int = 13;
pub const CU_TENSOR_MAP_DATA_TYPE_16U4_ALIGN16B: c_int = 14;
pub const CU_TENSOR_MAP_DATA_TYPE_16U6_ALIGN16B: c_int = 15;
pub const enum_CUtensorMapDataType_enum = c_uint;
pub const CUtensorMapDataType = enum_CUtensorMapDataType_enum;
pub const CU_TENSOR_MAP_INTERLEAVE_NONE: c_int = 0;
pub const CU_TENSOR_MAP_INTERLEAVE_16B: c_int = 1;
pub const CU_TENSOR_MAP_INTERLEAVE_32B: c_int = 2;
pub const enum_CUtensorMapInterleave_enum = c_uint;
pub const CUtensorMapInterleave = enum_CUtensorMapInterleave_enum;
pub const CU_TENSOR_MAP_SWIZZLE_NONE: c_int = 0;
pub const CU_TENSOR_MAP_SWIZZLE_32B: c_int = 1;
pub const CU_TENSOR_MAP_SWIZZLE_64B: c_int = 2;
pub const CU_TENSOR_MAP_SWIZZLE_128B: c_int = 3;
pub const CU_TENSOR_MAP_SWIZZLE_128B_ATOM_32B: c_int = 4;
pub const CU_TENSOR_MAP_SWIZZLE_128B_ATOM_32B_FLIP_8B: c_int = 5;
pub const CU_TENSOR_MAP_SWIZZLE_128B_ATOM_64B: c_int = 6;
pub const enum_CUtensorMapSwizzle_enum = c_uint;
pub const CUtensorMapSwizzle = enum_CUtensorMapSwizzle_enum;
pub const CU_TENSOR_MAP_L2_PROMOTION_NONE: c_int = 0;
pub const CU_TENSOR_MAP_L2_PROMOTION_L2_64B: c_int = 1;
pub const CU_TENSOR_MAP_L2_PROMOTION_L2_128B: c_int = 2;
pub const CU_TENSOR_MAP_L2_PROMOTION_L2_256B: c_int = 3;
pub const enum_CUtensorMapL2promotion_enum = c_uint;
pub const CUtensorMapL2promotion = enum_CUtensorMapL2promotion_enum;
pub const CU_TENSOR_MAP_FLOAT_OOB_FILL_NONE: c_int = 0;
pub const CU_TENSOR_MAP_FLOAT_OOB_FILL_NAN_REQUEST_ZERO_FMA: c_int = 1;
pub const enum_CUtensorMapFloatOOBfill_enum = c_uint;
pub const CUtensorMapFloatOOBfill = enum_CUtensorMapFloatOOBfill_enum;
pub const CU_TENSOR_MAP_IM2COL_WIDE_MODE_W: c_int = 0;
pub const CU_TENSOR_MAP_IM2COL_WIDE_MODE_W128: c_int = 1;
pub const enum_CUtensorMapIm2ColWideMode_enum = c_uint;
pub const CUtensorMapIm2ColWideMode = enum_CUtensorMapIm2ColWideMode_enum;
pub const struct_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st = extern struct {
    p2pToken: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    vaSpaceToken: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 = struct_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st;
pub const CUDA_POINTER_ATTRIBUTE_P2P_TOKENS = CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1;
pub const CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE: c_int = 0;
pub const CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ: c_int = 1;
pub const CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE: c_int = 3;
pub const enum_CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum = c_uint;
pub const CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS = enum_CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum;
pub const struct_CUDA_LAUNCH_PARAMS_st = extern struct {
    function: CUfunction = @import("std").mem.zeroes(CUfunction),
    gridDimX: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimY: c_uint = @import("std").mem.zeroes(c_uint),
    gridDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimX: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimY: c_uint = @import("std").mem.zeroes(c_uint),
    blockDimZ: c_uint = @import("std").mem.zeroes(c_uint),
    sharedMemBytes: c_uint = @import("std").mem.zeroes(c_uint),
    hStream: CUstream = @import("std").mem.zeroes(CUstream),
    kernelParams: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
};
pub const CUDA_LAUNCH_PARAMS_v1 = struct_CUDA_LAUNCH_PARAMS_st;
pub const CUDA_LAUNCH_PARAMS = CUDA_LAUNCH_PARAMS_v1;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD: c_int = 1;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32: c_int = 2;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT: c_int = 3;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP: c_int = 4;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE: c_int = 5;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE: c_int = 6;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT: c_int = 7;
pub const CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF: c_int = 8;
pub const enum_CUexternalMemoryHandleType_enum = c_uint;
pub const CUexternalMemoryHandleType = enum_CUexternalMemoryHandleType_enum;
const struct_unnamed_23 = extern struct {
    handle: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
const union_unnamed_22 = extern union {
    fd: c_int,
    win32: struct_unnamed_23,
    nvSciBufObject: ?*const anyopaque,
};
pub const struct_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st = extern struct {
    type: CUexternalMemoryHandleType = @import("std").mem.zeroes(CUexternalMemoryHandleType),
    handle: union_unnamed_22 = @import("std").mem.zeroes(union_unnamed_22),
    size: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 = struct_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st;
pub const CUDA_EXTERNAL_MEMORY_HANDLE_DESC = CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1;
pub const struct_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st = extern struct {
    offset: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    size: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 = struct_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st;
pub const CUDA_EXTERNAL_MEMORY_BUFFER_DESC = CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1;
pub const struct_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st = extern struct {
    offset: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    arrayDesc: CUDA_ARRAY3D_DESCRIPTOR = @import("std").mem.zeroes(CUDA_ARRAY3D_DESCRIPTOR),
    numLevels: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 = struct_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st;
pub const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC = CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD: c_int = 1;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32: c_int = 2;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT: c_int = 3;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE: c_int = 4;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE: c_int = 5;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC: c_int = 6;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX: c_int = 7;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT: c_int = 8;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD: c_int = 9;
pub const CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32: c_int = 10;
pub const enum_CUexternalSemaphoreHandleType_enum = c_uint;
pub const CUexternalSemaphoreHandleType = enum_CUexternalSemaphoreHandleType_enum;
const struct_unnamed_25 = extern struct {
    handle: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
const union_unnamed_24 = extern union {
    fd: c_int,
    win32: struct_unnamed_25,
    nvSciSyncObj: ?*const anyopaque,
};
pub const struct_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st = extern struct {
    type: CUexternalSemaphoreHandleType = @import("std").mem.zeroes(CUexternalSemaphoreHandleType),
    handle: union_unnamed_24 = @import("std").mem.zeroes(union_unnamed_24),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 = struct_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st;
pub const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC = CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1;
const struct_unnamed_27 = extern struct {
    value: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_28 = extern union {
    fence: ?*anyopaque,
    reserved: c_ulonglong,
};
const struct_unnamed_29 = extern struct {
    key: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const struct_unnamed_26 = extern struct {
    fence: struct_unnamed_27 = @import("std").mem.zeroes(struct_unnamed_27),
    nvSciSync: union_unnamed_28 = @import("std").mem.zeroes(union_unnamed_28),
    keyedMutex: struct_unnamed_29 = @import("std").mem.zeroes(struct_unnamed_29),
    reserved: [12]c_uint = @import("std").mem.zeroes([12]c_uint),
};
pub const struct_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st = extern struct {
    params: struct_unnamed_26 = @import("std").mem.zeroes(struct_unnamed_26),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 = struct_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st;
pub const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS = CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1;
const struct_unnamed_31 = extern struct {
    value: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_32 = extern union {
    fence: ?*anyopaque,
    reserved: c_ulonglong,
};
const struct_unnamed_33 = extern struct {
    key: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    timeoutMs: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_30 = extern struct {
    fence: struct_unnamed_31 = @import("std").mem.zeroes(struct_unnamed_31),
    nvSciSync: union_unnamed_32 = @import("std").mem.zeroes(union_unnamed_32),
    keyedMutex: struct_unnamed_33 = @import("std").mem.zeroes(struct_unnamed_33),
    reserved: [10]c_uint = @import("std").mem.zeroes([10]c_uint),
};
pub const struct_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st = extern struct {
    params: struct_unnamed_30 = @import("std").mem.zeroes(struct_unnamed_30),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 = struct_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st;
pub const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS = CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1;
pub const struct_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st = extern struct {
    extSemArray: [*c]CUexternalSemaphore = @import("std").mem.zeroes([*c]CUexternalSemaphore),
    paramsArray: [*c]const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS = @import("std").mem.zeroes([*c]const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 = struct_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st;
pub const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS = CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1;
pub const struct_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st = extern struct {
    extSemArray: [*c]CUexternalSemaphore = @import("std").mem.zeroes([*c]CUexternalSemaphore),
    paramsArray: [*c]const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS = @import("std").mem.zeroes([*c]const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2 = struct_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st;
pub const struct_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st = extern struct {
    extSemArray: [*c]CUexternalSemaphore = @import("std").mem.zeroes([*c]CUexternalSemaphore),
    paramsArray: [*c]const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS = @import("std").mem.zeroes([*c]const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 = struct_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st;
pub const CUDA_EXT_SEM_WAIT_NODE_PARAMS = CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1;
pub const struct_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st = extern struct {
    extSemArray: [*c]CUexternalSemaphore = @import("std").mem.zeroes([*c]CUexternalSemaphore),
    paramsArray: [*c]const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS = @import("std").mem.zeroes([*c]const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2 = struct_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st;
pub const CUmemGenericAllocationHandle_v1 = c_ulonglong;
pub const CUmemGenericAllocationHandle = CUmemGenericAllocationHandle_v1;
pub const CU_MEM_HANDLE_TYPE_NONE: c_int = 0;
pub const CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR: c_int = 1;
pub const CU_MEM_HANDLE_TYPE_WIN32: c_int = 2;
pub const CU_MEM_HANDLE_TYPE_WIN32_KMT: c_int = 4;
pub const CU_MEM_HANDLE_TYPE_FABRIC: c_int = 8;
pub const CU_MEM_HANDLE_TYPE_MAX: c_int = 2147483647;
pub const enum_CUmemAllocationHandleType_enum = c_uint;
pub const CUmemAllocationHandleType = enum_CUmemAllocationHandleType_enum;
pub const CU_MEM_ACCESS_FLAGS_PROT_NONE: c_int = 0;
pub const CU_MEM_ACCESS_FLAGS_PROT_READ: c_int = 1;
pub const CU_MEM_ACCESS_FLAGS_PROT_READWRITE: c_int = 3;
pub const CU_MEM_ACCESS_FLAGS_PROT_MAX: c_int = 2147483647;
pub const enum_CUmemAccess_flags_enum = c_uint;
pub const CUmemAccess_flags = enum_CUmemAccess_flags_enum;
pub const CU_MEM_LOCATION_TYPE_INVALID: c_int = 0;
pub const CU_MEM_LOCATION_TYPE_DEVICE: c_int = 1;
pub const CU_MEM_LOCATION_TYPE_HOST: c_int = 2;
pub const CU_MEM_LOCATION_TYPE_HOST_NUMA: c_int = 3;
pub const CU_MEM_LOCATION_TYPE_HOST_NUMA_CURRENT: c_int = 4;
pub const CU_MEM_LOCATION_TYPE_MAX: c_int = 2147483647;
pub const enum_CUmemLocationType_enum = c_uint;
pub const CUmemLocationType = enum_CUmemLocationType_enum;
pub const CU_MEM_ALLOCATION_TYPE_INVALID: c_int = 0;
pub const CU_MEM_ALLOCATION_TYPE_PINNED: c_int = 1;
pub const CU_MEM_ALLOCATION_TYPE_MAX: c_int = 2147483647;
pub const enum_CUmemAllocationType_enum = c_uint;
pub const CUmemAllocationType = enum_CUmemAllocationType_enum;
pub const CU_MEM_ALLOC_GRANULARITY_MINIMUM: c_int = 0;
pub const CU_MEM_ALLOC_GRANULARITY_RECOMMENDED: c_int = 1;
pub const enum_CUmemAllocationGranularity_flags_enum = c_uint;
pub const CUmemAllocationGranularity_flags = enum_CUmemAllocationGranularity_flags_enum;
pub const CU_MEM_RANGE_HANDLE_TYPE_DMA_BUF_FD: c_int = 1;
pub const CU_MEM_RANGE_HANDLE_TYPE_MAX: c_int = 2147483647;
pub const enum_CUmemRangeHandleType_enum = c_uint;
pub const CUmemRangeHandleType = enum_CUmemRangeHandleType_enum;
pub const CU_MEM_RANGE_FLAG_DMA_BUF_MAPPING_TYPE_PCIE: c_int = 1;
pub const enum_CUmemRangeFlags_enum = c_uint;
pub const CUmemRangeFlags = enum_CUmemRangeFlags_enum;
pub const CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL: c_int = 0;
pub const CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL: c_int = 1;
pub const enum_CUarraySparseSubresourceType_enum = c_uint;
pub const CUarraySparseSubresourceType = enum_CUarraySparseSubresourceType_enum;
pub const CU_MEM_OPERATION_TYPE_MAP: c_int = 1;
pub const CU_MEM_OPERATION_TYPE_UNMAP: c_int = 2;
pub const enum_CUmemOperationType_enum = c_uint;
pub const CUmemOperationType = enum_CUmemOperationType_enum;
pub const CU_MEM_HANDLE_TYPE_GENERIC: c_int = 0;
pub const enum_CUmemHandleType_enum = c_uint;
pub const CUmemHandleType = enum_CUmemHandleType_enum;
const union_unnamed_34 = extern union {
    mipmap: CUmipmappedArray,
    array: CUarray,
};
const struct_unnamed_36 = extern struct {
    level: c_uint = @import("std").mem.zeroes(c_uint),
    layer: c_uint = @import("std").mem.zeroes(c_uint),
    offsetX: c_uint = @import("std").mem.zeroes(c_uint),
    offsetY: c_uint = @import("std").mem.zeroes(c_uint),
    offsetZ: c_uint = @import("std").mem.zeroes(c_uint),
    extentWidth: c_uint = @import("std").mem.zeroes(c_uint),
    extentHeight: c_uint = @import("std").mem.zeroes(c_uint),
    extentDepth: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_37 = extern struct {
    layer: c_uint = @import("std").mem.zeroes(c_uint),
    offset: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    size: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_35 = extern union {
    sparseLevel: struct_unnamed_36,
    miptail: struct_unnamed_37,
};
const union_unnamed_38 = extern union {
    memHandle: CUmemGenericAllocationHandle,
};
pub const struct_CUarrayMapInfo_st = extern struct {
    resourceType: CUresourcetype = @import("std").mem.zeroes(CUresourcetype),
    resource: union_unnamed_34 = @import("std").mem.zeroes(union_unnamed_34),
    subresourceType: CUarraySparseSubresourceType = @import("std").mem.zeroes(CUarraySparseSubresourceType),
    subresource: union_unnamed_35 = @import("std").mem.zeroes(union_unnamed_35),
    memOperationType: CUmemOperationType = @import("std").mem.zeroes(CUmemOperationType),
    memHandleType: CUmemHandleType = @import("std").mem.zeroes(CUmemHandleType),
    memHandle: union_unnamed_38 = @import("std").mem.zeroes(union_unnamed_38),
    offset: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    deviceBitMask: c_uint = @import("std").mem.zeroes(c_uint),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const CUarrayMapInfo_v1 = struct_CUarrayMapInfo_st;
pub const CUarrayMapInfo = CUarrayMapInfo_v1;
pub const struct_CUmemLocation_st = extern struct {
    type: CUmemLocationType = @import("std").mem.zeroes(CUmemLocationType),
    id: c_int = @import("std").mem.zeroes(c_int),
};
pub const CUmemLocation_v1 = struct_CUmemLocation_st;
pub const CUmemLocation = CUmemLocation_v1;
pub const CU_MEM_ALLOCATION_COMP_NONE: c_int = 0;
pub const CU_MEM_ALLOCATION_COMP_GENERIC: c_int = 1;
pub const enum_CUmemAllocationCompType_enum = c_uint;
pub const CUmemAllocationCompType = enum_CUmemAllocationCompType_enum;
const struct_unnamed_39 = extern struct {
    compressionType: u8 = @import("std").mem.zeroes(u8),
    gpuDirectRDMACapable: u8 = @import("std").mem.zeroes(u8),
    usage: c_ushort = @import("std").mem.zeroes(c_ushort),
    reserved: [4]u8 = @import("std").mem.zeroes([4]u8),
};
pub const struct_CUmemAllocationProp_st = extern struct {
    type: CUmemAllocationType = @import("std").mem.zeroes(CUmemAllocationType),
    requestedHandleTypes: CUmemAllocationHandleType = @import("std").mem.zeroes(CUmemAllocationHandleType),
    location: CUmemLocation = @import("std").mem.zeroes(CUmemLocation),
    win32HandleMetaData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    allocFlags: struct_unnamed_39 = @import("std").mem.zeroes(struct_unnamed_39),
};
pub const CUmemAllocationProp_v1 = struct_CUmemAllocationProp_st;
pub const CUmemAllocationProp = CUmemAllocationProp_v1;
pub const CU_MULTICAST_GRANULARITY_MINIMUM: c_int = 0;
pub const CU_MULTICAST_GRANULARITY_RECOMMENDED: c_int = 1;
pub const enum_CUmulticastGranularity_flags_enum = c_uint;
pub const CUmulticastGranularity_flags = enum_CUmulticastGranularity_flags_enum;
pub const struct_CUmulticastObjectProp_st = extern struct {
    numDevices: c_uint = @import("std").mem.zeroes(c_uint),
    size: usize = @import("std").mem.zeroes(usize),
    handleTypes: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    flags: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
pub const CUmulticastObjectProp_v1 = struct_CUmulticastObjectProp_st;
pub const CUmulticastObjectProp = CUmulticastObjectProp_v1;
pub const struct_CUmemAccessDesc_st = extern struct {
    location: CUmemLocation = @import("std").mem.zeroes(CUmemLocation),
    flags: CUmemAccess_flags = @import("std").mem.zeroes(CUmemAccess_flags),
};
pub const CUmemAccessDesc_v1 = struct_CUmemAccessDesc_st;
pub const CUmemAccessDesc = CUmemAccessDesc_v1;
pub const CU_GRAPH_EXEC_UPDATE_SUCCESS: c_int = 0;
pub const CU_GRAPH_EXEC_UPDATE_ERROR: c_int = 1;
pub const CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED: c_int = 2;
pub const CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED: c_int = 3;
pub const CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED: c_int = 4;
pub const CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED: c_int = 5;
pub const CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED: c_int = 6;
pub const CU_GRAPH_EXEC_UPDATE_ERROR_UNSUPPORTED_FUNCTION_CHANGE: c_int = 7;
pub const CU_GRAPH_EXEC_UPDATE_ERROR_ATTRIBUTES_CHANGED: c_int = 8;
pub const enum_CUgraphExecUpdateResult_enum = c_uint;
pub const CUgraphExecUpdateResult = enum_CUgraphExecUpdateResult_enum;
pub const struct_CUgraphExecUpdateResultInfo_st = extern struct {
    result: CUgraphExecUpdateResult = @import("std").mem.zeroes(CUgraphExecUpdateResult),
    errorNode: CUgraphNode = @import("std").mem.zeroes(CUgraphNode),
    errorFromNode: CUgraphNode = @import("std").mem.zeroes(CUgraphNode),
};
pub const CUgraphExecUpdateResultInfo_v1 = struct_CUgraphExecUpdateResultInfo_st;
pub const CUgraphExecUpdateResultInfo = CUgraphExecUpdateResultInfo_v1;
pub const CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES: c_int = 1;
pub const CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC: c_int = 2;
pub const CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES: c_int = 3;
pub const CU_MEMPOOL_ATTR_RELEASE_THRESHOLD: c_int = 4;
pub const CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT: c_int = 5;
pub const CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH: c_int = 6;
pub const CU_MEMPOOL_ATTR_USED_MEM_CURRENT: c_int = 7;
pub const CU_MEMPOOL_ATTR_USED_MEM_HIGH: c_int = 8;
pub const enum_CUmemPool_attribute_enum = c_uint;
pub const CUmemPool_attribute = enum_CUmemPool_attribute_enum;
pub const struct_CUmemPoolProps_st = extern struct {
    allocType: CUmemAllocationType = @import("std").mem.zeroes(CUmemAllocationType),
    handleTypes: CUmemAllocationHandleType = @import("std").mem.zeroes(CUmemAllocationHandleType),
    location: CUmemLocation = @import("std").mem.zeroes(CUmemLocation),
    win32SecurityAttributes: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSize: usize = @import("std").mem.zeroes(usize),
    usage: c_ushort = @import("std").mem.zeroes(c_ushort),
    reserved: [54]u8 = @import("std").mem.zeroes([54]u8),
};
pub const CUmemPoolProps_v1 = struct_CUmemPoolProps_st;
pub const CUmemPoolProps = CUmemPoolProps_v1;
pub const struct_CUmemPoolPtrExportData_st = extern struct {
    reserved: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const CUmemPoolPtrExportData_v1 = struct_CUmemPoolPtrExportData_st;
pub const CUmemPoolPtrExportData = CUmemPoolPtrExportData_v1;
pub const struct_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st = extern struct {
    poolProps: CUmemPoolProps = @import("std").mem.zeroes(CUmemPoolProps),
    accessDescs: [*c]const CUmemAccessDesc = @import("std").mem.zeroes([*c]const CUmemAccessDesc),
    accessDescCount: usize = @import("std").mem.zeroes(usize),
    bytesize: usize = @import("std").mem.zeroes(usize),
    dptr: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
};
pub const CUDA_MEM_ALLOC_NODE_PARAMS_v1 = struct_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st;
pub const CUDA_MEM_ALLOC_NODE_PARAMS = CUDA_MEM_ALLOC_NODE_PARAMS_v1;
pub const struct_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st = extern struct {
    poolProps: CUmemPoolProps = @import("std").mem.zeroes(CUmemPoolProps),
    accessDescs: [*c]const CUmemAccessDesc = @import("std").mem.zeroes([*c]const CUmemAccessDesc),
    accessDescCount: usize = @import("std").mem.zeroes(usize),
    bytesize: usize = @import("std").mem.zeroes(usize),
    dptr: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
};
pub const CUDA_MEM_ALLOC_NODE_PARAMS_v2 = struct_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st;
pub const struct_CUDA_MEM_FREE_NODE_PARAMS_st = extern struct {
    dptr: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
};
pub const CUDA_MEM_FREE_NODE_PARAMS = struct_CUDA_MEM_FREE_NODE_PARAMS_st;
pub const CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT: c_int = 0;
pub const CU_GRAPH_MEM_ATTR_USED_MEM_HIGH: c_int = 1;
pub const CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT: c_int = 2;
pub const CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH: c_int = 3;
pub const enum_CUgraphMem_attribute_enum = c_uint;
pub const CUgraphMem_attribute = enum_CUgraphMem_attribute_enum;
pub const struct_CUDA_CHILD_GRAPH_NODE_PARAMS_st = extern struct {
    graph: CUgraph = @import("std").mem.zeroes(CUgraph),
};
pub const CUDA_CHILD_GRAPH_NODE_PARAMS = struct_CUDA_CHILD_GRAPH_NODE_PARAMS_st;
pub const struct_CUDA_EVENT_RECORD_NODE_PARAMS_st = extern struct {
    event: CUevent = @import("std").mem.zeroes(CUevent),
};
pub const CUDA_EVENT_RECORD_NODE_PARAMS = struct_CUDA_EVENT_RECORD_NODE_PARAMS_st;
pub const struct_CUDA_EVENT_WAIT_NODE_PARAMS_st = extern struct {
    event: CUevent = @import("std").mem.zeroes(CUevent),
};
pub const CUDA_EVENT_WAIT_NODE_PARAMS = struct_CUDA_EVENT_WAIT_NODE_PARAMS_st;
const union_unnamed_40 = extern union {
    reserved1: [29]c_longlong,
    kernel: CUDA_KERNEL_NODE_PARAMS_v3,
    memcpy: CUDA_MEMCPY_NODE_PARAMS,
    memset: CUDA_MEMSET_NODE_PARAMS_v2,
    host: CUDA_HOST_NODE_PARAMS_v2,
    graph: CUDA_CHILD_GRAPH_NODE_PARAMS,
    eventWait: CUDA_EVENT_WAIT_NODE_PARAMS,
    eventRecord: CUDA_EVENT_RECORD_NODE_PARAMS,
    extSemSignal: CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2,
    extSemWait: CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2,
    alloc: CUDA_MEM_ALLOC_NODE_PARAMS_v2,
    free: CUDA_MEM_FREE_NODE_PARAMS,
    memOp: CUDA_BATCH_MEM_OP_NODE_PARAMS_v2,
    conditional: CUDA_CONDITIONAL_NODE_PARAMS,
};
pub const struct_CUgraphNodeParams_st = extern struct {
    type: CUgraphNodeType = @import("std").mem.zeroes(CUgraphNodeType),
    reserved0: [3]c_int = @import("std").mem.zeroes([3]c_int),
    unnamed_0: union_unnamed_40 = @import("std").mem.zeroes(union_unnamed_40),
    reserved2: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const CUgraphNodeParams = struct_CUgraphNodeParams_st;
pub const CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_HOST: c_int = 1;
pub const CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS: c_int = 2;
pub const enum_CUflushGPUDirectRDMAWritesOptions_enum = c_uint;
pub const CUflushGPUDirectRDMAWritesOptions = enum_CUflushGPUDirectRDMAWritesOptions_enum;
pub const CU_GPU_DIRECT_RDMA_WRITES_ORDERING_NONE: c_int = 0;
pub const CU_GPU_DIRECT_RDMA_WRITES_ORDERING_OWNER: c_int = 100;
pub const CU_GPU_DIRECT_RDMA_WRITES_ORDERING_ALL_DEVICES: c_int = 200;
pub const enum_CUGPUDirectRDMAWritesOrdering_enum = c_uint;
pub const CUGPUDirectRDMAWritesOrdering = enum_CUGPUDirectRDMAWritesOrdering_enum;
pub const CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_OWNER: c_int = 100;
pub const CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES: c_int = 200;
pub const enum_CUflushGPUDirectRDMAWritesScope_enum = c_uint;
pub const CUflushGPUDirectRDMAWritesScope = enum_CUflushGPUDirectRDMAWritesScope_enum;
pub const CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX: c_int = 0;
pub const enum_CUflushGPUDirectRDMAWritesTarget_enum = c_uint;
pub const CUflushGPUDirectRDMAWritesTarget = enum_CUflushGPUDirectRDMAWritesTarget_enum;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_VERBOSE: c_int = 1;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_RUNTIME_TYPES: c_int = 2;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_PARAMS: c_int = 4;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_MEMCPY_NODE_PARAMS: c_int = 8;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_MEMSET_NODE_PARAMS: c_int = 16;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_HOST_NODE_PARAMS: c_int = 32;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_EVENT_NODE_PARAMS: c_int = 64;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_SIGNAL_NODE_PARAMS: c_int = 128;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_WAIT_NODE_PARAMS: c_int = 256;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_ATTRIBUTES: c_int = 512;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_HANDLES: c_int = 1024;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_MEM_ALLOC_NODE_PARAMS: c_int = 2048;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_MEM_FREE_NODE_PARAMS: c_int = 4096;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_BATCH_MEM_OP_NODE_PARAMS: c_int = 8192;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_EXTRA_TOPO_INFO: c_int = 16384;
pub const CU_GRAPH_DEBUG_DOT_FLAGS_CONDITIONAL_NODE_PARAMS: c_int = 32768;
pub const enum_CUgraphDebugDot_flags_enum = c_uint;
pub const CUgraphDebugDot_flags = enum_CUgraphDebugDot_flags_enum;
pub const CU_USER_OBJECT_NO_DESTRUCTOR_SYNC: c_int = 1;
pub const enum_CUuserObject_flags_enum = c_uint;
pub const CUuserObject_flags = enum_CUuserObject_flags_enum;
pub const CU_GRAPH_USER_OBJECT_MOVE: c_int = 1;
pub const enum_CUuserObjectRetain_flags_enum = c_uint;
pub const CUuserObjectRetain_flags = enum_CUuserObjectRetain_flags_enum;
pub const CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH: c_int = 1;
pub const CUDA_GRAPH_INSTANTIATE_FLAG_UPLOAD: c_int = 2;
pub const CUDA_GRAPH_INSTANTIATE_FLAG_DEVICE_LAUNCH: c_int = 4;
pub const CUDA_GRAPH_INSTANTIATE_FLAG_USE_NODE_PRIORITY: c_int = 8;
pub const enum_CUgraphInstantiate_flags_enum = c_uint;
pub const CUgraphInstantiate_flags = enum_CUgraphInstantiate_flags_enum;
pub const CU_DEVICE_NUMA_CONFIG_NONE: c_int = 0;
pub const CU_DEVICE_NUMA_CONFIG_NUMA_NODE: c_int = 1;
pub const enum_CUdeviceNumaConfig_enum = c_uint;
pub const CUdeviceNumaConfig = enum_CUdeviceNumaConfig_enum;
pub const CU_PROCESS_STATE_RUNNING: c_int = 0;
pub const CU_PROCESS_STATE_LOCKED: c_int = 1;
pub const CU_PROCESS_STATE_CHECKPOINTED: c_int = 2;
pub const CU_PROCESS_STATE_FAILED: c_int = 3;
pub const enum_CUprocessState_enum = c_uint;
pub const CUprocessState = enum_CUprocessState_enum;
pub const struct_CUcheckpointLockArgs_st = extern struct {
    timeoutMs: c_uint = @import("std").mem.zeroes(c_uint),
    reserved0: c_uint = @import("std").mem.zeroes(c_uint),
    reserved1: [7]cuuint64_t = @import("std").mem.zeroes([7]cuuint64_t),
};
pub const CUcheckpointLockArgs = struct_CUcheckpointLockArgs_st;
pub const struct_CUcheckpointCheckpointArgs_st = extern struct {
    reserved: [8]cuuint64_t = @import("std").mem.zeroes([8]cuuint64_t),
};
pub const CUcheckpointCheckpointArgs = struct_CUcheckpointCheckpointArgs_st;
pub const struct_CUcheckpointRestoreArgs_st = extern struct {
    reserved: [8]cuuint64_t = @import("std").mem.zeroes([8]cuuint64_t),
};
pub const CUcheckpointRestoreArgs = struct_CUcheckpointRestoreArgs_st;
pub const struct_CUcheckpointUnlockArgs_st = extern struct {
    reserved: [8]cuuint64_t = @import("std").mem.zeroes([8]cuuint64_t),
};
pub const CUcheckpointUnlockArgs = struct_CUcheckpointUnlockArgs_st;
pub const CU_MEMCPY_FLAG_DEFAULT: c_int = 0;
pub const CU_MEMCPY_FLAG_PREFER_OVERLAP_WITH_COMPUTE: c_int = 1;
pub const enum_CUmemcpyFlags_enum = c_uint;
pub const CUmemcpyFlags = enum_CUmemcpyFlags_enum;
pub const CU_MEMCPY_SRC_ACCESS_ORDER_INVALID: c_int = 0;
pub const CU_MEMCPY_SRC_ACCESS_ORDER_STREAM: c_int = 1;
pub const CU_MEMCPY_SRC_ACCESS_ORDER_DURING_API_CALL: c_int = 2;
pub const CU_MEMCPY_SRC_ACCESS_ORDER_ANY: c_int = 3;
pub const CU_MEMCPY_SRC_ACCESS_ORDER_MAX: c_int = 2147483647;
pub const enum_CUmemcpySrcAccessOrder_enum = c_uint;
pub const CUmemcpySrcAccessOrder = enum_CUmemcpySrcAccessOrder_enum;
pub const struct_CUmemcpyAttributes_st = extern struct {
    srcAccessOrder: CUmemcpySrcAccessOrder = @import("std").mem.zeroes(CUmemcpySrcAccessOrder),
    srcLocHint: CUmemLocation = @import("std").mem.zeroes(CUmemLocation),
    dstLocHint: CUmemLocation = @import("std").mem.zeroes(CUmemLocation),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUmemcpyAttributes_v1 = struct_CUmemcpyAttributes_st;
pub const CUmemcpyAttributes = CUmemcpyAttributes_v1;
pub const CU_MEMCPY_OPERAND_TYPE_POINTER: c_int = 1;
pub const CU_MEMCPY_OPERAND_TYPE_ARRAY: c_int = 2;
pub const CU_MEMCPY_OPERAND_TYPE_MAX: c_int = 2147483647;
pub const enum_CUmemcpy3DOperandType_enum = c_uint;
pub const CUmemcpy3DOperandType = enum_CUmemcpy3DOperandType_enum;
pub const struct_CUoffset3D_st = extern struct {
    x: usize = @import("std").mem.zeroes(usize),
    y: usize = @import("std").mem.zeroes(usize),
    z: usize = @import("std").mem.zeroes(usize),
};
pub const CUoffset3D_v1 = struct_CUoffset3D_st;
pub const CUoffset3D = CUoffset3D_v1;
pub const struct_CUextent3D_st = extern struct {
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
    depth: usize = @import("std").mem.zeroes(usize),
};
pub const CUextent3D_v1 = struct_CUextent3D_st;
pub const CUextent3D = CUextent3D_v1;
const struct_unnamed_42 = extern struct {
    ptr: CUdeviceptr = @import("std").mem.zeroes(CUdeviceptr),
    rowLength: usize = @import("std").mem.zeroes(usize),
    layerHeight: usize = @import("std").mem.zeroes(usize),
    locHint: CUmemLocation = @import("std").mem.zeroes(CUmemLocation),
};
const struct_unnamed_43 = extern struct {
    array: CUarray = @import("std").mem.zeroes(CUarray),
    offset: CUoffset3D = @import("std").mem.zeroes(CUoffset3D),
};
const union_unnamed_41 = extern union {
    ptr: struct_unnamed_42,
    array: struct_unnamed_43,
};
pub const struct_CUmemcpy3DOperand_st = extern struct {
    type: CUmemcpy3DOperandType = @import("std").mem.zeroes(CUmemcpy3DOperandType),
    op: union_unnamed_41 = @import("std").mem.zeroes(union_unnamed_41),
};
pub const CUmemcpy3DOperand_v1 = struct_CUmemcpy3DOperand_st;
pub const CUmemcpy3DOperand = CUmemcpy3DOperand_v1;
pub const struct_CUDA_MEMCPY3D_BATCH_OP_st = extern struct {
    src: CUmemcpy3DOperand = @import("std").mem.zeroes(CUmemcpy3DOperand),
    dst: CUmemcpy3DOperand = @import("std").mem.zeroes(CUmemcpy3DOperand),
    extent: CUextent3D = @import("std").mem.zeroes(CUextent3D),
    srcAccessOrder: CUmemcpySrcAccessOrder = @import("std").mem.zeroes(CUmemcpySrcAccessOrder),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUDA_MEMCPY3D_BATCH_OP_v1 = struct_CUDA_MEMCPY3D_BATCH_OP_st;
pub const CUDA_MEMCPY3D_BATCH_OP = CUDA_MEMCPY3D_BATCH_OP_v1;
pub extern fn cuGetErrorString(@"error": CUresult, pStr: [*c][*c]const u8) CUresult;
pub extern fn cuGetErrorName(@"error": CUresult, pStr: [*c][*c]const u8) CUresult;
pub extern fn cuInit(Flags: c_uint) CUresult;
pub extern fn cuDriverGetVersion(driverVersion: [*c]c_int) CUresult;
pub extern fn cuDeviceGet(device: [*c]CUdevice, ordinal: c_int) CUresult;
pub extern fn cuDeviceGetCount(count: [*c]c_int) CUresult;
pub extern fn cuDeviceGetName(name: [*c]u8, len: c_int, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetUuid(uuid: [*c]CUuuid, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetUuid_v2(uuid: [*c]CUuuid, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetLuid(luid: [*c]u8, deviceNodeMask: [*c]c_uint, dev: CUdevice) CUresult;
pub extern fn cuDeviceTotalMem_v2(bytes: [*c]usize, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetTexture1DLinearMaxWidth(maxWidthInElements: [*c]usize, format: CUarray_format, numChannels: c_uint, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetAttribute(pi: [*c]c_int, attrib: CUdevice_attribute, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList: ?*anyopaque, dev: CUdevice, flags: c_int) CUresult;
pub extern fn cuDeviceSetMemPool(dev: CUdevice, pool: CUmemoryPool) CUresult;
pub extern fn cuDeviceGetMemPool(pool: [*c]CUmemoryPool, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetDefaultMemPool(pool_out: [*c]CUmemoryPool, dev: CUdevice) CUresult;
pub extern fn cuDeviceGetExecAffinitySupport(pi: [*c]c_int, @"type": CUexecAffinityType, dev: CUdevice) CUresult;
pub extern fn cuFlushGPUDirectRDMAWrites(target: CUflushGPUDirectRDMAWritesTarget, scope: CUflushGPUDirectRDMAWritesScope) CUresult;
pub extern fn cuDeviceGetProperties(prop: [*c]CUdevprop, dev: CUdevice) CUresult;
pub extern fn cuDeviceComputeCapability(major: [*c]c_int, minor: [*c]c_int, dev: CUdevice) CUresult;
pub extern fn cuDevicePrimaryCtxRetain(pctx: [*c]CUcontext, dev: CUdevice) CUresult;
pub extern fn cuDevicePrimaryCtxRelease_v2(dev: CUdevice) CUresult;
pub extern fn cuDevicePrimaryCtxSetFlags_v2(dev: CUdevice, flags: c_uint) CUresult;
pub extern fn cuDevicePrimaryCtxGetState(dev: CUdevice, flags: [*c]c_uint, active: [*c]c_int) CUresult;
pub extern fn cuDevicePrimaryCtxReset_v2(dev: CUdevice) CUresult;
pub extern fn cuCtxCreate_v2(pctx: [*c]CUcontext, flags: c_uint, dev: CUdevice) CUresult;
pub extern fn cuCtxCreate_v3(pctx: [*c]CUcontext, paramsArray: [*c]CUexecAffinityParam, numParams: c_int, flags: c_uint, dev: CUdevice) CUresult;
pub extern fn cuCtxCreate_v4(pctx: [*c]CUcontext, ctxCreateParams: [*c]CUctxCreateParams, flags: c_uint, dev: CUdevice) CUresult;
pub extern fn cuCtxDestroy_v2(ctx: CUcontext) CUresult;
pub extern fn cuCtxPushCurrent_v2(ctx: CUcontext) CUresult;
pub extern fn cuCtxPopCurrent_v2(pctx: [*c]CUcontext) CUresult;
pub extern fn cuCtxSetCurrent(ctx: CUcontext) CUresult;
pub extern fn cuCtxGetCurrent(pctx: [*c]CUcontext) CUresult;
pub extern fn cuCtxGetDevice(device: [*c]CUdevice) CUresult;
pub extern fn cuCtxGetFlags(flags: [*c]c_uint) CUresult;
pub extern fn cuCtxSetFlags(flags: c_uint) CUresult;
pub extern fn cuCtxGetId(ctx: CUcontext, ctxId: [*c]c_ulonglong) CUresult;
pub extern fn cuCtxSynchronize() CUresult;
pub extern fn cuCtxSetLimit(limit: CUlimit, value: usize) CUresult;
pub extern fn cuCtxGetLimit(pvalue: [*c]usize, limit: CUlimit) CUresult;
pub extern fn cuCtxGetCacheConfig(pconfig: [*c]CUfunc_cache) CUresult;
pub extern fn cuCtxSetCacheConfig(config: CUfunc_cache) CUresult;
pub extern fn cuCtxGetApiVersion(ctx: CUcontext, version: [*c]c_uint) CUresult;
pub extern fn cuCtxGetStreamPriorityRange(leastPriority: [*c]c_int, greatestPriority: [*c]c_int) CUresult;
pub extern fn cuCtxResetPersistingL2Cache() CUresult;
pub extern fn cuCtxGetExecAffinity(pExecAffinity: [*c]CUexecAffinityParam, @"type": CUexecAffinityType) CUresult;
pub extern fn cuCtxRecordEvent(hCtx: CUcontext, hEvent: CUevent) CUresult;
pub extern fn cuCtxWaitEvent(hCtx: CUcontext, hEvent: CUevent) CUresult;
pub extern fn cuCtxAttach(pctx: [*c]CUcontext, flags: c_uint) CUresult;
pub extern fn cuCtxDetach(ctx: CUcontext) CUresult;
pub extern fn cuCtxGetSharedMemConfig(pConfig: [*c]CUsharedconfig) CUresult;
pub extern fn cuCtxSetSharedMemConfig(config: CUsharedconfig) CUresult;
pub extern fn cuModuleLoad(module: [*c]CUmodule, fname: [*c]const u8) CUresult;
pub extern fn cuModuleLoadData(module: [*c]CUmodule, image: ?*const anyopaque) CUresult;
pub extern fn cuModuleLoadDataEx(module: [*c]CUmodule, image: ?*const anyopaque, numOptions: c_uint, options: [*c]CUjit_option, optionValues: [*c]?*anyopaque) CUresult;
pub extern fn cuModuleLoadFatBinary(module: [*c]CUmodule, fatCubin: ?*const anyopaque) CUresult;
pub extern fn cuModuleUnload(hmod: CUmodule) CUresult;
pub const CU_MODULE_EAGER_LOADING: c_int = 1;
pub const CU_MODULE_LAZY_LOADING: c_int = 2;
pub const enum_CUmoduleLoadingMode_enum = c_uint;
pub const CUmoduleLoadingMode = enum_CUmoduleLoadingMode_enum;
pub extern fn cuModuleGetLoadingMode(mode: [*c]CUmoduleLoadingMode) CUresult;
pub extern fn cuModuleGetFunction(hfunc: [*c]CUfunction, hmod: CUmodule, name: [*c]const u8) CUresult;
pub extern fn cuModuleGetFunctionCount(count: [*c]c_uint, mod: CUmodule) CUresult;
pub extern fn cuModuleEnumerateFunctions(functions: [*c]CUfunction, numFunctions: c_uint, mod: CUmodule) CUresult;
pub extern fn cuModuleGetGlobal_v2(dptr: [*c]CUdeviceptr, bytes: [*c]usize, hmod: CUmodule, name: [*c]const u8) CUresult;
pub extern fn cuLinkCreate_v2(numOptions: c_uint, options: [*c]CUjit_option, optionValues: [*c]?*anyopaque, stateOut: [*c]CUlinkState) CUresult;
pub extern fn cuLinkAddData_v2(state: CUlinkState, @"type": CUjitInputType, data: ?*anyopaque, size: usize, name: [*c]const u8, numOptions: c_uint, options: [*c]CUjit_option, optionValues: [*c]?*anyopaque) CUresult;
pub extern fn cuLinkAddFile_v2(state: CUlinkState, @"type": CUjitInputType, path: [*c]const u8, numOptions: c_uint, options: [*c]CUjit_option, optionValues: [*c]?*anyopaque) CUresult;
pub extern fn cuLinkComplete(state: CUlinkState, cubinOut: [*c]?*anyopaque, sizeOut: [*c]usize) CUresult;
pub extern fn cuLinkDestroy(state: CUlinkState) CUresult;
pub extern fn cuModuleGetTexRef(pTexRef: [*c]CUtexref, hmod: CUmodule, name: [*c]const u8) CUresult;
pub extern fn cuModuleGetSurfRef(pSurfRef: [*c]CUsurfref, hmod: CUmodule, name: [*c]const u8) CUresult;
pub extern fn cuLibraryLoadData(library: [*c]CUlibrary, code: ?*const anyopaque, jitOptions: [*c]CUjit_option, jitOptionsValues: [*c]?*anyopaque, numJitOptions: c_uint, libraryOptions: [*c]CUlibraryOption, libraryOptionValues: [*c]?*anyopaque, numLibraryOptions: c_uint) CUresult;
pub extern fn cuLibraryLoadFromFile(library: [*c]CUlibrary, fileName: [*c]const u8, jitOptions: [*c]CUjit_option, jitOptionsValues: [*c]?*anyopaque, numJitOptions: c_uint, libraryOptions: [*c]CUlibraryOption, libraryOptionValues: [*c]?*anyopaque, numLibraryOptions: c_uint) CUresult;
pub extern fn cuLibraryUnload(library: CUlibrary) CUresult;
pub extern fn cuLibraryGetKernel(pKernel: [*c]CUkernel, library: CUlibrary, name: [*c]const u8) CUresult;
pub extern fn cuLibraryGetKernelCount(count: [*c]c_uint, lib: CUlibrary) CUresult;
pub extern fn cuLibraryEnumerateKernels(kernels: [*c]CUkernel, numKernels: c_uint, lib: CUlibrary) CUresult;
pub extern fn cuLibraryGetModule(pMod: [*c]CUmodule, library: CUlibrary) CUresult;
pub extern fn cuKernelGetFunction(pFunc: [*c]CUfunction, kernel: CUkernel) CUresult;
pub extern fn cuKernelGetLibrary(pLib: [*c]CUlibrary, kernel: CUkernel) CUresult;
pub extern fn cuLibraryGetGlobal(dptr: [*c]CUdeviceptr, bytes: [*c]usize, library: CUlibrary, name: [*c]const u8) CUresult;
pub extern fn cuLibraryGetManaged(dptr: [*c]CUdeviceptr, bytes: [*c]usize, library: CUlibrary, name: [*c]const u8) CUresult;
pub extern fn cuLibraryGetUnifiedFunction(fptr: [*c]?*anyopaque, library: CUlibrary, symbol: [*c]const u8) CUresult;
pub extern fn cuKernelGetAttribute(pi: [*c]c_int, attrib: CUfunction_attribute, kernel: CUkernel, dev: CUdevice) CUresult;
pub extern fn cuKernelSetAttribute(attrib: CUfunction_attribute, val: c_int, kernel: CUkernel, dev: CUdevice) CUresult;
pub extern fn cuKernelSetCacheConfig(kernel: CUkernel, config: CUfunc_cache, dev: CUdevice) CUresult;
pub extern fn cuKernelGetName(name: [*c][*c]const u8, hfunc: CUkernel) CUresult;
pub extern fn cuKernelGetParamInfo(kernel: CUkernel, paramIndex: usize, paramOffset: [*c]usize, paramSize: [*c]usize) CUresult;
pub extern fn cuMemGetInfo_v2(free: [*c]usize, total: [*c]usize) CUresult;
pub extern fn cuMemAlloc_v2(dptr: [*c]CUdeviceptr, bytesize: usize) CUresult;
pub extern fn cuMemAllocPitch_v2(dptr: [*c]CUdeviceptr, pPitch: [*c]usize, WidthInBytes: usize, Height: usize, ElementSizeBytes: c_uint) CUresult;
pub extern fn cuMemFree_v2(dptr: CUdeviceptr) CUresult;
pub extern fn cuMemGetAddressRange_v2(pbase: [*c]CUdeviceptr, psize: [*c]usize, dptr: CUdeviceptr) CUresult;
pub extern fn cuMemAllocHost_v2(pp: [*c]?*anyopaque, bytesize: usize) CUresult;
pub extern fn cuMemFreeHost(p: ?*anyopaque) CUresult;
pub extern fn cuMemHostAlloc(pp: [*c]?*anyopaque, bytesize: usize, Flags: c_uint) CUresult;
pub extern fn cuMemHostGetDevicePointer_v2(pdptr: [*c]CUdeviceptr, p: ?*anyopaque, Flags: c_uint) CUresult;
pub extern fn cuMemHostGetFlags(pFlags: [*c]c_uint, p: ?*anyopaque) CUresult;
pub extern fn cuMemAllocManaged(dptr: [*c]CUdeviceptr, bytesize: usize, flags: c_uint) CUresult;
pub extern fn cuDeviceRegisterAsyncNotification(device: CUdevice, callbackFunc: CUasyncCallback, userData: ?*anyopaque, callback: [*c]CUasyncCallbackHandle) CUresult;
pub extern fn cuDeviceUnregisterAsyncNotification(device: CUdevice, callback: CUasyncCallbackHandle) CUresult;
pub extern fn cuDeviceGetByPCIBusId(dev: [*c]CUdevice, pciBusId: [*c]const u8) CUresult;
pub extern fn cuDeviceGetPCIBusId(pciBusId: [*c]u8, len: c_int, dev: CUdevice) CUresult;
pub extern fn cuIpcGetEventHandle(pHandle: [*c]CUipcEventHandle, event: CUevent) CUresult;
pub extern fn cuIpcOpenEventHandle(phEvent: [*c]CUevent, handle: CUipcEventHandle) CUresult;
pub extern fn cuIpcGetMemHandle(pHandle: [*c]CUipcMemHandle, dptr: CUdeviceptr) CUresult;
pub extern fn cuIpcOpenMemHandle_v2(pdptr: [*c]CUdeviceptr, handle: CUipcMemHandle, Flags: c_uint) CUresult;
pub extern fn cuIpcCloseMemHandle(dptr: CUdeviceptr) CUresult;
pub extern fn cuMemHostRegister_v2(p: ?*anyopaque, bytesize: usize, Flags: c_uint) CUresult;
pub extern fn cuMemHostUnregister(p: ?*anyopaque) CUresult;
pub extern fn cuMemcpy(dst: CUdeviceptr, src: CUdeviceptr, ByteCount: usize) CUresult;
pub extern fn cuMemcpyPeer(dstDevice: CUdeviceptr, dstContext: CUcontext, srcDevice: CUdeviceptr, srcContext: CUcontext, ByteCount: usize) CUresult;
pub extern fn cuMemcpyHtoD_v2(dstDevice: CUdeviceptr, srcHost: ?*const anyopaque, ByteCount: usize) CUresult;
pub extern fn cuMemcpyDtoH_v2(dstHost: ?*anyopaque, srcDevice: CUdeviceptr, ByteCount: usize) CUresult;
pub extern fn cuMemcpyDtoD_v2(dstDevice: CUdeviceptr, srcDevice: CUdeviceptr, ByteCount: usize) CUresult;
pub extern fn cuMemcpyDtoA_v2(dstArray: CUarray, dstOffset: usize, srcDevice: CUdeviceptr, ByteCount: usize) CUresult;
pub extern fn cuMemcpyAtoD_v2(dstDevice: CUdeviceptr, srcArray: CUarray, srcOffset: usize, ByteCount: usize) CUresult;
pub extern fn cuMemcpyHtoA_v2(dstArray: CUarray, dstOffset: usize, srcHost: ?*const anyopaque, ByteCount: usize) CUresult;
pub extern fn cuMemcpyAtoH_v2(dstHost: ?*anyopaque, srcArray: CUarray, srcOffset: usize, ByteCount: usize) CUresult;
pub extern fn cuMemcpyAtoA_v2(dstArray: CUarray, dstOffset: usize, srcArray: CUarray, srcOffset: usize, ByteCount: usize) CUresult;
pub extern fn cuMemcpy2D_v2(pCopy: [*c]const CUDA_MEMCPY2D) CUresult;
pub extern fn cuMemcpy2DUnaligned_v2(pCopy: [*c]const CUDA_MEMCPY2D) CUresult;
pub extern fn cuMemcpy3D_v2(pCopy: [*c]const CUDA_MEMCPY3D) CUresult;
pub extern fn cuMemcpy3DPeer(pCopy: [*c]const CUDA_MEMCPY3D_PEER) CUresult;
pub extern fn cuMemcpyAsync(dst: CUdeviceptr, src: CUdeviceptr, ByteCount: usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpyPeerAsync(dstDevice: CUdeviceptr, dstContext: CUcontext, srcDevice: CUdeviceptr, srcContext: CUcontext, ByteCount: usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpyHtoDAsync_v2(dstDevice: CUdeviceptr, srcHost: ?*const anyopaque, ByteCount: usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpyDtoHAsync_v2(dstHost: ?*anyopaque, srcDevice: CUdeviceptr, ByteCount: usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpyDtoDAsync_v2(dstDevice: CUdeviceptr, srcDevice: CUdeviceptr, ByteCount: usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpyHtoAAsync_v2(dstArray: CUarray, dstOffset: usize, srcHost: ?*const anyopaque, ByteCount: usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpyAtoHAsync_v2(dstHost: ?*anyopaque, srcArray: CUarray, srcOffset: usize, ByteCount: usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpy2DAsync_v2(pCopy: [*c]const CUDA_MEMCPY2D, hStream: CUstream) CUresult;
pub extern fn cuMemcpy3DAsync_v2(pCopy: [*c]const CUDA_MEMCPY3D, hStream: CUstream) CUresult;
pub extern fn cuMemcpy3DPeerAsync(pCopy: [*c]const CUDA_MEMCPY3D_PEER, hStream: CUstream) CUresult;
pub extern fn cuMemcpyBatchAsync(dsts: [*c]CUdeviceptr, srcs: [*c]CUdeviceptr, sizes: [*c]usize, count: usize, attrs: [*c]CUmemcpyAttributes, attrsIdxs: [*c]usize, numAttrs: usize, failIdx: [*c]usize, hStream: CUstream) CUresult;
pub extern fn cuMemcpy3DBatchAsync(numOps: usize, opList: [*c]CUDA_MEMCPY3D_BATCH_OP, failIdx: [*c]usize, flags: c_ulonglong, hStream: CUstream) CUresult;
pub extern fn cuMemsetD8_v2(dstDevice: CUdeviceptr, uc: u8, N: usize) CUresult;
pub extern fn cuMemsetD16_v2(dstDevice: CUdeviceptr, us: c_ushort, N: usize) CUresult;
pub extern fn cuMemsetD32_v2(dstDevice: CUdeviceptr, ui: c_uint, N: usize) CUresult;
pub extern fn cuMemsetD2D8_v2(dstDevice: CUdeviceptr, dstPitch: usize, uc: u8, Width: usize, Height: usize) CUresult;
pub extern fn cuMemsetD2D16_v2(dstDevice: CUdeviceptr, dstPitch: usize, us: c_ushort, Width: usize, Height: usize) CUresult;
pub extern fn cuMemsetD2D32_v2(dstDevice: CUdeviceptr, dstPitch: usize, ui: c_uint, Width: usize, Height: usize) CUresult;
pub extern fn cuMemsetD8Async(dstDevice: CUdeviceptr, uc: u8, N: usize, hStream: CUstream) CUresult;
pub extern fn cuMemsetD16Async(dstDevice: CUdeviceptr, us: c_ushort, N: usize, hStream: CUstream) CUresult;
pub extern fn cuMemsetD32Async(dstDevice: CUdeviceptr, ui: c_uint, N: usize, hStream: CUstream) CUresult;
pub extern fn cuMemsetD2D8Async(dstDevice: CUdeviceptr, dstPitch: usize, uc: u8, Width: usize, Height: usize, hStream: CUstream) CUresult;
pub extern fn cuMemsetD2D16Async(dstDevice: CUdeviceptr, dstPitch: usize, us: c_ushort, Width: usize, Height: usize, hStream: CUstream) CUresult;
pub extern fn cuMemsetD2D32Async(dstDevice: CUdeviceptr, dstPitch: usize, ui: c_uint, Width: usize, Height: usize, hStream: CUstream) CUresult;
pub extern fn cuArrayCreate_v2(pHandle: [*c]CUarray, pAllocateArray: [*c]const CUDA_ARRAY_DESCRIPTOR) CUresult;
pub extern fn cuArrayGetDescriptor_v2(pArrayDescriptor: [*c]CUDA_ARRAY_DESCRIPTOR, hArray: CUarray) CUresult;
pub extern fn cuArrayGetSparseProperties(sparseProperties: [*c]CUDA_ARRAY_SPARSE_PROPERTIES, array: CUarray) CUresult;
pub extern fn cuMipmappedArrayGetSparseProperties(sparseProperties: [*c]CUDA_ARRAY_SPARSE_PROPERTIES, mipmap: CUmipmappedArray) CUresult;
pub extern fn cuArrayGetMemoryRequirements(memoryRequirements: [*c]CUDA_ARRAY_MEMORY_REQUIREMENTS, array: CUarray, device: CUdevice) CUresult;
pub extern fn cuMipmappedArrayGetMemoryRequirements(memoryRequirements: [*c]CUDA_ARRAY_MEMORY_REQUIREMENTS, mipmap: CUmipmappedArray, device: CUdevice) CUresult;
pub extern fn cuArrayGetPlane(pPlaneArray: [*c]CUarray, hArray: CUarray, planeIdx: c_uint) CUresult;
pub extern fn cuArrayDestroy(hArray: CUarray) CUresult;
pub extern fn cuArray3DCreate_v2(pHandle: [*c]CUarray, pAllocateArray: [*c]const CUDA_ARRAY3D_DESCRIPTOR) CUresult;
pub extern fn cuArray3DGetDescriptor_v2(pArrayDescriptor: [*c]CUDA_ARRAY3D_DESCRIPTOR, hArray: CUarray) CUresult;
pub extern fn cuMipmappedArrayCreate(pHandle: [*c]CUmipmappedArray, pMipmappedArrayDesc: [*c]const CUDA_ARRAY3D_DESCRIPTOR, numMipmapLevels: c_uint) CUresult;
pub extern fn cuMipmappedArrayGetLevel(pLevelArray: [*c]CUarray, hMipmappedArray: CUmipmappedArray, level: c_uint) CUresult;
pub extern fn cuMipmappedArrayDestroy(hMipmappedArray: CUmipmappedArray) CUresult;
pub extern fn cuMemGetHandleForAddressRange(handle: ?*anyopaque, dptr: CUdeviceptr, size: usize, handleType: CUmemRangeHandleType, flags: c_ulonglong) CUresult;
pub const CU_MEM_DECOMPRESS_UNSUPPORTED: c_int = 0;
pub const CU_MEM_DECOMPRESS_ALGORITHM_DEFLATE: c_int = 1;
pub const CU_MEM_DECOMPRESS_ALGORITHM_SNAPPY: c_int = 2;
pub const enum_CUmemDecompressAlgorithm_enum = c_uint;
pub const CUmemDecompressAlgorithm = enum_CUmemDecompressAlgorithm_enum;
pub const struct_CUmemDecompressParams_st = extern struct {
    srcNumBytes: usize = @import("std").mem.zeroes(usize),
    dstNumBytes: usize = @import("std").mem.zeroes(usize),
    dstActBytes: [*c]cuuint32_t = @import("std").mem.zeroes([*c]cuuint32_t),
    src: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dst: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    algo: CUmemDecompressAlgorithm = @import("std").mem.zeroes(CUmemDecompressAlgorithm),
    padding: [20]u8 = @import("std").mem.zeroes([20]u8),
};
pub const CUmemDecompressParams = struct_CUmemDecompressParams_st;
pub extern fn cuMemBatchDecompressAsync(paramsArray: [*c]CUmemDecompressParams, count: usize, flags: c_uint, errorIndex: [*c]usize, stream: CUstream) CUresult;
pub extern fn cuMemAddressReserve(ptr: [*c]CUdeviceptr, size: usize, alignment: usize, addr: CUdeviceptr, flags: c_ulonglong) CUresult;
pub extern fn cuMemAddressFree(ptr: CUdeviceptr, size: usize) CUresult;
pub extern fn cuMemCreate(handle: [*c]CUmemGenericAllocationHandle, size: usize, prop: [*c]const CUmemAllocationProp, flags: c_ulonglong) CUresult;
pub extern fn cuMemRelease(handle: CUmemGenericAllocationHandle) CUresult;
pub extern fn cuMemMap(ptr: CUdeviceptr, size: usize, offset: usize, handle: CUmemGenericAllocationHandle, flags: c_ulonglong) CUresult;
pub extern fn cuMemMapArrayAsync(mapInfoList: [*c]CUarrayMapInfo, count: c_uint, hStream: CUstream) CUresult;
pub extern fn cuMemUnmap(ptr: CUdeviceptr, size: usize) CUresult;
pub extern fn cuMemSetAccess(ptr: CUdeviceptr, size: usize, desc: [*c]const CUmemAccessDesc, count: usize) CUresult;
pub extern fn cuMemGetAccess(flags: [*c]c_ulonglong, location: [*c]const CUmemLocation, ptr: CUdeviceptr) CUresult;
pub extern fn cuMemExportToShareableHandle(shareableHandle: ?*anyopaque, handle: CUmemGenericAllocationHandle, handleType: CUmemAllocationHandleType, flags: c_ulonglong) CUresult;
pub extern fn cuMemImportFromShareableHandle(handle: [*c]CUmemGenericAllocationHandle, osHandle: ?*anyopaque, shHandleType: CUmemAllocationHandleType) CUresult;
pub extern fn cuMemGetAllocationGranularity(granularity: [*c]usize, prop: [*c]const CUmemAllocationProp, option: CUmemAllocationGranularity_flags) CUresult;
pub extern fn cuMemGetAllocationPropertiesFromHandle(prop: [*c]CUmemAllocationProp, handle: CUmemGenericAllocationHandle) CUresult;
pub extern fn cuMemRetainAllocationHandle(handle: [*c]CUmemGenericAllocationHandle, addr: ?*anyopaque) CUresult;
pub extern fn cuMemFreeAsync(dptr: CUdeviceptr, hStream: CUstream) CUresult;
pub extern fn cuMemAllocAsync(dptr: [*c]CUdeviceptr, bytesize: usize, hStream: CUstream) CUresult;
pub extern fn cuMemPoolTrimTo(pool: CUmemoryPool, minBytesToKeep: usize) CUresult;
pub extern fn cuMemPoolSetAttribute(pool: CUmemoryPool, attr: CUmemPool_attribute, value: ?*anyopaque) CUresult;
pub extern fn cuMemPoolGetAttribute(pool: CUmemoryPool, attr: CUmemPool_attribute, value: ?*anyopaque) CUresult;
pub extern fn cuMemPoolSetAccess(pool: CUmemoryPool, map: [*c]const CUmemAccessDesc, count: usize) CUresult;
pub extern fn cuMemPoolGetAccess(flags: [*c]CUmemAccess_flags, memPool: CUmemoryPool, location: [*c]CUmemLocation) CUresult;
pub extern fn cuMemPoolCreate(pool: [*c]CUmemoryPool, poolProps: [*c]const CUmemPoolProps) CUresult;
pub extern fn cuMemPoolDestroy(pool: CUmemoryPool) CUresult;
pub extern fn cuMemAllocFromPoolAsync(dptr: [*c]CUdeviceptr, bytesize: usize, pool: CUmemoryPool, hStream: CUstream) CUresult;
pub extern fn cuMemPoolExportToShareableHandle(handle_out: ?*anyopaque, pool: CUmemoryPool, handleType: CUmemAllocationHandleType, flags: c_ulonglong) CUresult;
pub extern fn cuMemPoolImportFromShareableHandle(pool_out: [*c]CUmemoryPool, handle: ?*anyopaque, handleType: CUmemAllocationHandleType, flags: c_ulonglong) CUresult;
pub extern fn cuMemPoolExportPointer(shareData_out: [*c]CUmemPoolPtrExportData, ptr: CUdeviceptr) CUresult;
pub extern fn cuMemPoolImportPointer(ptr_out: [*c]CUdeviceptr, pool: CUmemoryPool, shareData: [*c]CUmemPoolPtrExportData) CUresult;
pub extern fn cuMulticastCreate(mcHandle: [*c]CUmemGenericAllocationHandle, prop: [*c]const CUmulticastObjectProp) CUresult;
pub extern fn cuMulticastAddDevice(mcHandle: CUmemGenericAllocationHandle, dev: CUdevice) CUresult;
pub extern fn cuMulticastBindMem(mcHandle: CUmemGenericAllocationHandle, mcOffset: usize, memHandle: CUmemGenericAllocationHandle, memOffset: usize, size: usize, flags: c_ulonglong) CUresult;
pub extern fn cuMulticastBindAddr(mcHandle: CUmemGenericAllocationHandle, mcOffset: usize, memptr: CUdeviceptr, size: usize, flags: c_ulonglong) CUresult;
pub extern fn cuMulticastUnbind(mcHandle: CUmemGenericAllocationHandle, dev: CUdevice, mcOffset: usize, size: usize) CUresult;
pub extern fn cuMulticastGetGranularity(granularity: [*c]usize, prop: [*c]const CUmulticastObjectProp, option: CUmulticastGranularity_flags) CUresult;
pub extern fn cuPointerGetAttribute(data: ?*anyopaque, attribute: CUpointer_attribute, ptr: CUdeviceptr) CUresult;
pub extern fn cuMemPrefetchAsync(devPtr: CUdeviceptr, count: usize, dstDevice: CUdevice, hStream: CUstream) CUresult;
pub extern fn cuMemPrefetchAsync_v2(devPtr: CUdeviceptr, count: usize, location: CUmemLocation, flags: c_uint, hStream: CUstream) CUresult;
pub extern fn cuMemAdvise(devPtr: CUdeviceptr, count: usize, advice: CUmem_advise, device: CUdevice) CUresult;
pub extern fn cuMemAdvise_v2(devPtr: CUdeviceptr, count: usize, advice: CUmem_advise, location: CUmemLocation) CUresult;
pub extern fn cuMemRangeGetAttribute(data: ?*anyopaque, dataSize: usize, attribute: CUmem_range_attribute, devPtr: CUdeviceptr, count: usize) CUresult;
pub extern fn cuMemRangeGetAttributes(data: [*c]?*anyopaque, dataSizes: [*c]usize, attributes: [*c]CUmem_range_attribute, numAttributes: usize, devPtr: CUdeviceptr, count: usize) CUresult;
pub extern fn cuPointerSetAttribute(value: ?*const anyopaque, attribute: CUpointer_attribute, ptr: CUdeviceptr) CUresult;
pub extern fn cuPointerGetAttributes(numAttributes: c_uint, attributes: [*c]CUpointer_attribute, data: [*c]?*anyopaque, ptr: CUdeviceptr) CUresult;
pub extern fn cuStreamCreate(phStream: [*c]CUstream, Flags: c_uint) CUresult;
pub extern fn cuStreamCreateWithPriority(phStream: [*c]CUstream, flags: c_uint, priority: c_int) CUresult;
pub extern fn cuStreamGetPriority(hStream: CUstream, priority: [*c]c_int) CUresult;
pub extern fn cuStreamGetDevice(hStream: CUstream, device: [*c]CUdevice) CUresult;
pub extern fn cuStreamGetFlags(hStream: CUstream, flags: [*c]c_uint) CUresult;
pub extern fn cuStreamGetId(hStream: CUstream, streamId: [*c]c_ulonglong) CUresult;
pub extern fn cuStreamGetCtx(hStream: CUstream, pctx: [*c]CUcontext) CUresult;
pub extern fn cuStreamGetCtx_v2(hStream: CUstream, pCtx: [*c]CUcontext, pGreenCtx: [*c]CUgreenCtx) CUresult;
pub extern fn cuStreamWaitEvent(hStream: CUstream, hEvent: CUevent, Flags: c_uint) CUresult;
pub extern fn cuStreamAddCallback(hStream: CUstream, callback: CUstreamCallback, userData: ?*anyopaque, flags: c_uint) CUresult;
pub extern fn cuStreamBeginCapture_v2(hStream: CUstream, mode: CUstreamCaptureMode) CUresult;
pub extern fn cuStreamBeginCaptureToGraph(hStream: CUstream, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, dependencyData: [*c]const CUgraphEdgeData, numDependencies: usize, mode: CUstreamCaptureMode) CUresult;
pub extern fn cuThreadExchangeStreamCaptureMode(mode: [*c]CUstreamCaptureMode) CUresult;
pub extern fn cuStreamEndCapture(hStream: CUstream, phGraph: [*c]CUgraph) CUresult;
pub extern fn cuStreamIsCapturing(hStream: CUstream, captureStatus: [*c]CUstreamCaptureStatus) CUresult;
pub extern fn cuStreamGetCaptureInfo_v2(hStream: CUstream, captureStatus_out: [*c]CUstreamCaptureStatus, id_out: [*c]cuuint64_t, graph_out: [*c]CUgraph, dependencies_out: [*c][*c]const CUgraphNode, numDependencies_out: [*c]usize) CUresult;
pub extern fn cuStreamGetCaptureInfo_v3(hStream: CUstream, captureStatus_out: [*c]CUstreamCaptureStatus, id_out: [*c]cuuint64_t, graph_out: [*c]CUgraph, dependencies_out: [*c][*c]const CUgraphNode, edgeData_out: [*c][*c]const CUgraphEdgeData, numDependencies_out: [*c]usize) CUresult;
pub extern fn cuStreamUpdateCaptureDependencies(hStream: CUstream, dependencies: [*c]CUgraphNode, numDependencies: usize, flags: c_uint) CUresult;
pub extern fn cuStreamUpdateCaptureDependencies_v2(hStream: CUstream, dependencies: [*c]CUgraphNode, dependencyData: [*c]const CUgraphEdgeData, numDependencies: usize, flags: c_uint) CUresult;
pub extern fn cuStreamAttachMemAsync(hStream: CUstream, dptr: CUdeviceptr, length: usize, flags: c_uint) CUresult;
pub extern fn cuStreamQuery(hStream: CUstream) CUresult;
pub extern fn cuStreamSynchronize(hStream: CUstream) CUresult;
pub extern fn cuStreamDestroy_v2(hStream: CUstream) CUresult;
pub extern fn cuStreamCopyAttributes(dst: CUstream, src: CUstream) CUresult;
pub extern fn cuStreamGetAttribute(hStream: CUstream, attr: CUstreamAttrID, value_out: [*c]CUstreamAttrValue) CUresult;
pub extern fn cuStreamSetAttribute(hStream: CUstream, attr: CUstreamAttrID, value: [*c]const CUstreamAttrValue) CUresult;
pub extern fn cuEventCreate(phEvent: [*c]CUevent, Flags: c_uint) CUresult;
pub extern fn cuEventRecord(hEvent: CUevent, hStream: CUstream) CUresult;
pub extern fn cuEventRecordWithFlags(hEvent: CUevent, hStream: CUstream, flags: c_uint) CUresult;
pub extern fn cuEventQuery(hEvent: CUevent) CUresult;
pub extern fn cuEventSynchronize(hEvent: CUevent) CUresult;
pub extern fn cuEventDestroy_v2(hEvent: CUevent) CUresult;
pub extern fn cuEventElapsedTime(pMilliseconds: [*c]f32, hStart: CUevent, hEnd: CUevent) CUresult;
pub extern fn cuEventElapsedTime_v2(pMilliseconds: [*c]f32, hStart: CUevent, hEnd: CUevent) CUresult;
pub extern fn cuImportExternalMemory(extMem_out: [*c]CUexternalMemory, memHandleDesc: [*c]const CUDA_EXTERNAL_MEMORY_HANDLE_DESC) CUresult;
pub extern fn cuExternalMemoryGetMappedBuffer(devPtr: [*c]CUdeviceptr, extMem: CUexternalMemory, bufferDesc: [*c]const CUDA_EXTERNAL_MEMORY_BUFFER_DESC) CUresult;
pub extern fn cuExternalMemoryGetMappedMipmappedArray(mipmap: [*c]CUmipmappedArray, extMem: CUexternalMemory, mipmapDesc: [*c]const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC) CUresult;
pub extern fn cuDestroyExternalMemory(extMem: CUexternalMemory) CUresult;
pub extern fn cuImportExternalSemaphore(extSem_out: [*c]CUexternalSemaphore, semHandleDesc: [*c]const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC) CUresult;
pub extern fn cuSignalExternalSemaphoresAsync(extSemArray: [*c]const CUexternalSemaphore, paramsArray: [*c]const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS, numExtSems: c_uint, stream: CUstream) CUresult;
pub extern fn cuWaitExternalSemaphoresAsync(extSemArray: [*c]const CUexternalSemaphore, paramsArray: [*c]const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS, numExtSems: c_uint, stream: CUstream) CUresult;
pub extern fn cuDestroyExternalSemaphore(extSem: CUexternalSemaphore) CUresult;
pub extern fn cuStreamWaitValue32_v2(stream: CUstream, addr: CUdeviceptr, value: cuuint32_t, flags: c_uint) CUresult;
pub extern fn cuStreamWaitValue64_v2(stream: CUstream, addr: CUdeviceptr, value: cuuint64_t, flags: c_uint) CUresult;
pub extern fn cuStreamWriteValue32_v2(stream: CUstream, addr: CUdeviceptr, value: cuuint32_t, flags: c_uint) CUresult;
pub extern fn cuStreamWriteValue64_v2(stream: CUstream, addr: CUdeviceptr, value: cuuint64_t, flags: c_uint) CUresult;
pub extern fn cuStreamBatchMemOp_v2(stream: CUstream, count: c_uint, paramArray: [*c]CUstreamBatchMemOpParams, flags: c_uint) CUresult;
pub extern fn cuFuncGetAttribute(pi: [*c]c_int, attrib: CUfunction_attribute, hfunc: CUfunction) CUresult;
pub extern fn cuFuncSetAttribute(hfunc: CUfunction, attrib: CUfunction_attribute, value: c_int) CUresult;
pub extern fn cuFuncSetCacheConfig(hfunc: CUfunction, config: CUfunc_cache) CUresult;
pub extern fn cuFuncGetModule(hmod: [*c]CUmodule, hfunc: CUfunction) CUresult;
pub extern fn cuFuncGetName(name: [*c][*c]const u8, hfunc: CUfunction) CUresult;
pub extern fn cuFuncGetParamInfo(func: CUfunction, paramIndex: usize, paramOffset: [*c]usize, paramSize: [*c]usize) CUresult;
pub const CU_FUNCTION_LOADING_STATE_UNLOADED: c_int = 0;
pub const CU_FUNCTION_LOADING_STATE_LOADED: c_int = 1;
pub const CU_FUNCTION_LOADING_STATE_MAX: c_int = 2;
pub const enum_CUfunctionLoadingState_enum = c_uint;
pub const CUfunctionLoadingState = enum_CUfunctionLoadingState_enum;
pub extern fn cuFuncIsLoaded(state: [*c]CUfunctionLoadingState, function: CUfunction) CUresult;
pub extern fn cuFuncLoad(function: CUfunction) CUresult;
pub extern fn cuLaunchKernel(f: CUfunction, gridDimX: c_uint, gridDimY: c_uint, gridDimZ: c_uint, blockDimX: c_uint, blockDimY: c_uint, blockDimZ: c_uint, sharedMemBytes: c_uint, hStream: CUstream, kernelParams: [*c]?*anyopaque, extra: [*c]?*anyopaque) CUresult;
pub extern fn cuLaunchKernelEx(config: [*c]const CUlaunchConfig, f: CUfunction, kernelParams: [*c]?*anyopaque, extra: [*c]?*anyopaque) CUresult;
pub extern fn cuLaunchCooperativeKernel(f: CUfunction, gridDimX: c_uint, gridDimY: c_uint, gridDimZ: c_uint, blockDimX: c_uint, blockDimY: c_uint, blockDimZ: c_uint, sharedMemBytes: c_uint, hStream: CUstream, kernelParams: [*c]?*anyopaque) CUresult;
pub extern fn cuLaunchCooperativeKernelMultiDevice(launchParamsList: [*c]CUDA_LAUNCH_PARAMS, numDevices: c_uint, flags: c_uint) CUresult;
pub extern fn cuLaunchHostFunc(hStream: CUstream, @"fn": CUhostFn, userData: ?*anyopaque) CUresult;
pub extern fn cuFuncSetBlockShape(hfunc: CUfunction, x: c_int, y: c_int, z: c_int) CUresult;
pub extern fn cuFuncSetSharedSize(hfunc: CUfunction, bytes: c_uint) CUresult;
pub extern fn cuParamSetSize(hfunc: CUfunction, numbytes: c_uint) CUresult;
pub extern fn cuParamSeti(hfunc: CUfunction, offset: c_int, value: c_uint) CUresult;
pub extern fn cuParamSetf(hfunc: CUfunction, offset: c_int, value: f32) CUresult;
pub extern fn cuParamSetv(hfunc: CUfunction, offset: c_int, ptr: ?*anyopaque, numbytes: c_uint) CUresult;
pub extern fn cuLaunch(f: CUfunction) CUresult;
pub extern fn cuLaunchGrid(f: CUfunction, grid_width: c_int, grid_height: c_int) CUresult;
pub extern fn cuLaunchGridAsync(f: CUfunction, grid_width: c_int, grid_height: c_int, hStream: CUstream) CUresult;
pub extern fn cuParamSetTexRef(hfunc: CUfunction, texunit: c_int, hTexRef: CUtexref) CUresult;
pub extern fn cuFuncSetSharedMemConfig(hfunc: CUfunction, config: CUsharedconfig) CUresult;
pub extern fn cuGraphCreate(phGraph: [*c]CUgraph, flags: c_uint) CUresult;
pub extern fn cuGraphAddKernelNode_v2(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, nodeParams: [*c]const CUDA_KERNEL_NODE_PARAMS) CUresult;
pub extern fn cuGraphKernelNodeGetParams_v2(hNode: CUgraphNode, nodeParams: [*c]CUDA_KERNEL_NODE_PARAMS) CUresult;
pub extern fn cuGraphKernelNodeSetParams_v2(hNode: CUgraphNode, nodeParams: [*c]const CUDA_KERNEL_NODE_PARAMS) CUresult;
pub extern fn cuGraphAddMemcpyNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, copyParams: [*c]const CUDA_MEMCPY3D, ctx: CUcontext) CUresult;
pub extern fn cuGraphMemcpyNodeGetParams(hNode: CUgraphNode, nodeParams: [*c]CUDA_MEMCPY3D) CUresult;
pub extern fn cuGraphMemcpyNodeSetParams(hNode: CUgraphNode, nodeParams: [*c]const CUDA_MEMCPY3D) CUresult;
pub extern fn cuGraphAddMemsetNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, memsetParams: [*c]const CUDA_MEMSET_NODE_PARAMS, ctx: CUcontext) CUresult;
pub extern fn cuGraphMemsetNodeGetParams(hNode: CUgraphNode, nodeParams: [*c]CUDA_MEMSET_NODE_PARAMS) CUresult;
pub extern fn cuGraphMemsetNodeSetParams(hNode: CUgraphNode, nodeParams: [*c]const CUDA_MEMSET_NODE_PARAMS) CUresult;
pub extern fn cuGraphAddHostNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, nodeParams: [*c]const CUDA_HOST_NODE_PARAMS) CUresult;
pub extern fn cuGraphHostNodeGetParams(hNode: CUgraphNode, nodeParams: [*c]CUDA_HOST_NODE_PARAMS) CUresult;
pub extern fn cuGraphHostNodeSetParams(hNode: CUgraphNode, nodeParams: [*c]const CUDA_HOST_NODE_PARAMS) CUresult;
pub extern fn cuGraphAddChildGraphNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, childGraph: CUgraph) CUresult;
pub extern fn cuGraphChildGraphNodeGetGraph(hNode: CUgraphNode, phGraph: [*c]CUgraph) CUresult;
pub extern fn cuGraphAddEmptyNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize) CUresult;
pub extern fn cuGraphAddEventRecordNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, event: CUevent) CUresult;
pub extern fn cuGraphEventRecordNodeGetEvent(hNode: CUgraphNode, event_out: [*c]CUevent) CUresult;
pub extern fn cuGraphEventRecordNodeSetEvent(hNode: CUgraphNode, event: CUevent) CUresult;
pub extern fn cuGraphAddEventWaitNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, event: CUevent) CUresult;
pub extern fn cuGraphEventWaitNodeGetEvent(hNode: CUgraphNode, event_out: [*c]CUevent) CUresult;
pub extern fn cuGraphEventWaitNodeSetEvent(hNode: CUgraphNode, event: CUevent) CUresult;
pub extern fn cuGraphAddExternalSemaphoresSignalNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, nodeParams: [*c]const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS) CUresult;
pub extern fn cuGraphExternalSemaphoresSignalNodeGetParams(hNode: CUgraphNode, params_out: [*c]CUDA_EXT_SEM_SIGNAL_NODE_PARAMS) CUresult;
pub extern fn cuGraphExternalSemaphoresSignalNodeSetParams(hNode: CUgraphNode, nodeParams: [*c]const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS) CUresult;
pub extern fn cuGraphAddExternalSemaphoresWaitNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, nodeParams: [*c]const CUDA_EXT_SEM_WAIT_NODE_PARAMS) CUresult;
pub extern fn cuGraphExternalSemaphoresWaitNodeGetParams(hNode: CUgraphNode, params_out: [*c]CUDA_EXT_SEM_WAIT_NODE_PARAMS) CUresult;
pub extern fn cuGraphExternalSemaphoresWaitNodeSetParams(hNode: CUgraphNode, nodeParams: [*c]const CUDA_EXT_SEM_WAIT_NODE_PARAMS) CUresult;
pub extern fn cuGraphAddBatchMemOpNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, nodeParams: [*c]const CUDA_BATCH_MEM_OP_NODE_PARAMS) CUresult;
pub extern fn cuGraphBatchMemOpNodeGetParams(hNode: CUgraphNode, nodeParams_out: [*c]CUDA_BATCH_MEM_OP_NODE_PARAMS) CUresult;
pub extern fn cuGraphBatchMemOpNodeSetParams(hNode: CUgraphNode, nodeParams: [*c]const CUDA_BATCH_MEM_OP_NODE_PARAMS) CUresult;
pub extern fn cuGraphExecBatchMemOpNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, nodeParams: [*c]const CUDA_BATCH_MEM_OP_NODE_PARAMS) CUresult;
pub extern fn cuGraphAddMemAllocNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, nodeParams: [*c]CUDA_MEM_ALLOC_NODE_PARAMS) CUresult;
pub extern fn cuGraphMemAllocNodeGetParams(hNode: CUgraphNode, params_out: [*c]CUDA_MEM_ALLOC_NODE_PARAMS) CUresult;
pub extern fn cuGraphAddMemFreeNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, dptr: CUdeviceptr) CUresult;
pub extern fn cuGraphMemFreeNodeGetParams(hNode: CUgraphNode, dptr_out: [*c]CUdeviceptr) CUresult;
pub extern fn cuDeviceGraphMemTrim(device: CUdevice) CUresult;
pub extern fn cuDeviceGetGraphMemAttribute(device: CUdevice, attr: CUgraphMem_attribute, value: ?*anyopaque) CUresult;
pub extern fn cuDeviceSetGraphMemAttribute(device: CUdevice, attr: CUgraphMem_attribute, value: ?*anyopaque) CUresult;
pub extern fn cuGraphClone(phGraphClone: [*c]CUgraph, originalGraph: CUgraph) CUresult;
pub extern fn cuGraphNodeFindInClone(phNode: [*c]CUgraphNode, hOriginalNode: CUgraphNode, hClonedGraph: CUgraph) CUresult;
pub extern fn cuGraphNodeGetType(hNode: CUgraphNode, @"type": [*c]CUgraphNodeType) CUresult;
pub extern fn cuGraphGetNodes(hGraph: CUgraph, nodes: [*c]CUgraphNode, numNodes: [*c]usize) CUresult;
pub extern fn cuGraphGetRootNodes(hGraph: CUgraph, rootNodes: [*c]CUgraphNode, numRootNodes: [*c]usize) CUresult;
pub extern fn cuGraphGetEdges(hGraph: CUgraph, from: [*c]CUgraphNode, to: [*c]CUgraphNode, numEdges: [*c]usize) CUresult;
pub extern fn cuGraphGetEdges_v2(hGraph: CUgraph, from: [*c]CUgraphNode, to: [*c]CUgraphNode, edgeData: [*c]CUgraphEdgeData, numEdges: [*c]usize) CUresult;
pub extern fn cuGraphNodeGetDependencies(hNode: CUgraphNode, dependencies: [*c]CUgraphNode, numDependencies: [*c]usize) CUresult;
pub extern fn cuGraphNodeGetDependencies_v2(hNode: CUgraphNode, dependencies: [*c]CUgraphNode, edgeData: [*c]CUgraphEdgeData, numDependencies: [*c]usize) CUresult;
pub extern fn cuGraphNodeGetDependentNodes(hNode: CUgraphNode, dependentNodes: [*c]CUgraphNode, numDependentNodes: [*c]usize) CUresult;
pub extern fn cuGraphNodeGetDependentNodes_v2(hNode: CUgraphNode, dependentNodes: [*c]CUgraphNode, edgeData: [*c]CUgraphEdgeData, numDependentNodes: [*c]usize) CUresult;
pub extern fn cuGraphAddDependencies(hGraph: CUgraph, from: [*c]const CUgraphNode, to: [*c]const CUgraphNode, numDependencies: usize) CUresult;
pub extern fn cuGraphAddDependencies_v2(hGraph: CUgraph, from: [*c]const CUgraphNode, to: [*c]const CUgraphNode, edgeData: [*c]const CUgraphEdgeData, numDependencies: usize) CUresult;
pub extern fn cuGraphRemoveDependencies(hGraph: CUgraph, from: [*c]const CUgraphNode, to: [*c]const CUgraphNode, numDependencies: usize) CUresult;
pub extern fn cuGraphRemoveDependencies_v2(hGraph: CUgraph, from: [*c]const CUgraphNode, to: [*c]const CUgraphNode, edgeData: [*c]const CUgraphEdgeData, numDependencies: usize) CUresult;
pub extern fn cuGraphDestroyNode(hNode: CUgraphNode) CUresult;
pub extern fn cuGraphInstantiateWithFlags(phGraphExec: [*c]CUgraphExec, hGraph: CUgraph, flags: c_ulonglong) CUresult;
pub extern fn cuGraphInstantiateWithParams(phGraphExec: [*c]CUgraphExec, hGraph: CUgraph, instantiateParams: [*c]CUDA_GRAPH_INSTANTIATE_PARAMS) CUresult;
pub extern fn cuGraphExecGetFlags(hGraphExec: CUgraphExec, flags: [*c]cuuint64_t) CUresult;
pub extern fn cuGraphExecKernelNodeSetParams_v2(hGraphExec: CUgraphExec, hNode: CUgraphNode, nodeParams: [*c]const CUDA_KERNEL_NODE_PARAMS) CUresult;
pub extern fn cuGraphExecMemcpyNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, copyParams: [*c]const CUDA_MEMCPY3D, ctx: CUcontext) CUresult;
pub extern fn cuGraphExecMemsetNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, memsetParams: [*c]const CUDA_MEMSET_NODE_PARAMS, ctx: CUcontext) CUresult;
pub extern fn cuGraphExecHostNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, nodeParams: [*c]const CUDA_HOST_NODE_PARAMS) CUresult;
pub extern fn cuGraphExecChildGraphNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, childGraph: CUgraph) CUresult;
pub extern fn cuGraphExecEventRecordNodeSetEvent(hGraphExec: CUgraphExec, hNode: CUgraphNode, event: CUevent) CUresult;
pub extern fn cuGraphExecEventWaitNodeSetEvent(hGraphExec: CUgraphExec, hNode: CUgraphNode, event: CUevent) CUresult;
pub extern fn cuGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, nodeParams: [*c]const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS) CUresult;
pub extern fn cuGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, nodeParams: [*c]const CUDA_EXT_SEM_WAIT_NODE_PARAMS) CUresult;
pub extern fn cuGraphNodeSetEnabled(hGraphExec: CUgraphExec, hNode: CUgraphNode, isEnabled: c_uint) CUresult;
pub extern fn cuGraphNodeGetEnabled(hGraphExec: CUgraphExec, hNode: CUgraphNode, isEnabled: [*c]c_uint) CUresult;
pub extern fn cuGraphUpload(hGraphExec: CUgraphExec, hStream: CUstream) CUresult;
pub extern fn cuGraphLaunch(hGraphExec: CUgraphExec, hStream: CUstream) CUresult;
pub extern fn cuGraphExecDestroy(hGraphExec: CUgraphExec) CUresult;
pub extern fn cuGraphDestroy(hGraph: CUgraph) CUresult;
pub extern fn cuGraphExecUpdate_v2(hGraphExec: CUgraphExec, hGraph: CUgraph, resultInfo: [*c]CUgraphExecUpdateResultInfo) CUresult;
pub extern fn cuGraphKernelNodeCopyAttributes(dst: CUgraphNode, src: CUgraphNode) CUresult;
pub extern fn cuGraphKernelNodeGetAttribute(hNode: CUgraphNode, attr: CUkernelNodeAttrID, value_out: [*c]CUkernelNodeAttrValue) CUresult;
pub extern fn cuGraphKernelNodeSetAttribute(hNode: CUgraphNode, attr: CUkernelNodeAttrID, value: [*c]const CUkernelNodeAttrValue) CUresult;
pub extern fn cuGraphDebugDotPrint(hGraph: CUgraph, path: [*c]const u8, flags: c_uint) CUresult;
pub extern fn cuUserObjectCreate(object_out: [*c]CUuserObject, ptr: ?*anyopaque, destroy: CUhostFn, initialRefcount: c_uint, flags: c_uint) CUresult;
pub extern fn cuUserObjectRetain(object: CUuserObject, count: c_uint) CUresult;
pub extern fn cuUserObjectRelease(object: CUuserObject, count: c_uint) CUresult;
pub extern fn cuGraphRetainUserObject(graph: CUgraph, object: CUuserObject, count: c_uint, flags: c_uint) CUresult;
pub extern fn cuGraphReleaseUserObject(graph: CUgraph, object: CUuserObject, count: c_uint) CUresult;
pub extern fn cuGraphAddNode(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, numDependencies: usize, nodeParams: [*c]CUgraphNodeParams) CUresult;
pub extern fn cuGraphAddNode_v2(phGraphNode: [*c]CUgraphNode, hGraph: CUgraph, dependencies: [*c]const CUgraphNode, dependencyData: [*c]const CUgraphEdgeData, numDependencies: usize, nodeParams: [*c]CUgraphNodeParams) CUresult;
pub extern fn cuGraphNodeSetParams(hNode: CUgraphNode, nodeParams: [*c]CUgraphNodeParams) CUresult;
pub extern fn cuGraphExecNodeSetParams(hGraphExec: CUgraphExec, hNode: CUgraphNode, nodeParams: [*c]CUgraphNodeParams) CUresult;
pub extern fn cuGraphConditionalHandleCreate(pHandle_out: [*c]CUgraphConditionalHandle, hGraph: CUgraph, ctx: CUcontext, defaultLaunchValue: c_uint, flags: c_uint) CUresult;
pub extern fn cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks: [*c]c_int, func: CUfunction, blockSize: c_int, dynamicSMemSize: usize) CUresult;
pub extern fn cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks: [*c]c_int, func: CUfunction, blockSize: c_int, dynamicSMemSize: usize, flags: c_uint) CUresult;
pub extern fn cuOccupancyMaxPotentialBlockSize(minGridSize: [*c]c_int, blockSize: [*c]c_int, func: CUfunction, blockSizeToDynamicSMemSize: CUoccupancyB2DSize, dynamicSMemSize: usize, blockSizeLimit: c_int) CUresult;
pub extern fn cuOccupancyMaxPotentialBlockSizeWithFlags(minGridSize: [*c]c_int, blockSize: [*c]c_int, func: CUfunction, blockSizeToDynamicSMemSize: CUoccupancyB2DSize, dynamicSMemSize: usize, blockSizeLimit: c_int, flags: c_uint) CUresult;
pub extern fn cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize: [*c]usize, func: CUfunction, numBlocks: c_int, blockSize: c_int) CUresult;
pub extern fn cuOccupancyMaxPotentialClusterSize(clusterSize: [*c]c_int, func: CUfunction, config: [*c]const CUlaunchConfig) CUresult;
pub extern fn cuOccupancyMaxActiveClusters(numClusters: [*c]c_int, func: CUfunction, config: [*c]const CUlaunchConfig) CUresult;
pub extern fn cuTexRefSetArray(hTexRef: CUtexref, hArray: CUarray, Flags: c_uint) CUresult;
pub extern fn cuTexRefSetMipmappedArray(hTexRef: CUtexref, hMipmappedArray: CUmipmappedArray, Flags: c_uint) CUresult;
pub extern fn cuTexRefSetAddress_v2(ByteOffset: [*c]usize, hTexRef: CUtexref, dptr: CUdeviceptr, bytes: usize) CUresult;
pub extern fn cuTexRefSetAddress2D_v3(hTexRef: CUtexref, desc: [*c]const CUDA_ARRAY_DESCRIPTOR, dptr: CUdeviceptr, Pitch: usize) CUresult;
pub extern fn cuTexRefSetFormat(hTexRef: CUtexref, fmt: CUarray_format, NumPackedComponents: c_int) CUresult;
pub extern fn cuTexRefSetAddressMode(hTexRef: CUtexref, dim: c_int, am: CUaddress_mode) CUresult;
pub extern fn cuTexRefSetFilterMode(hTexRef: CUtexref, fm: CUfilter_mode) CUresult;
pub extern fn cuTexRefSetMipmapFilterMode(hTexRef: CUtexref, fm: CUfilter_mode) CUresult;
pub extern fn cuTexRefSetMipmapLevelBias(hTexRef: CUtexref, bias: f32) CUresult;
pub extern fn cuTexRefSetMipmapLevelClamp(hTexRef: CUtexref, minMipmapLevelClamp: f32, maxMipmapLevelClamp: f32) CUresult;
pub extern fn cuTexRefSetMaxAnisotropy(hTexRef: CUtexref, maxAniso: c_uint) CUresult;
pub extern fn cuTexRefSetBorderColor(hTexRef: CUtexref, pBorderColor: [*c]f32) CUresult;
pub extern fn cuTexRefSetFlags(hTexRef: CUtexref, Flags: c_uint) CUresult;
pub extern fn cuTexRefGetAddress_v2(pdptr: [*c]CUdeviceptr, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetArray(phArray: [*c]CUarray, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetMipmappedArray(phMipmappedArray: [*c]CUmipmappedArray, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetAddressMode(pam: [*c]CUaddress_mode, hTexRef: CUtexref, dim: c_int) CUresult;
pub extern fn cuTexRefGetFilterMode(pfm: [*c]CUfilter_mode, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetFormat(pFormat: [*c]CUarray_format, pNumChannels: [*c]c_int, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetMipmapFilterMode(pfm: [*c]CUfilter_mode, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetMipmapLevelBias(pbias: [*c]f32, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetMipmapLevelClamp(pminMipmapLevelClamp: [*c]f32, pmaxMipmapLevelClamp: [*c]f32, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetMaxAnisotropy(pmaxAniso: [*c]c_int, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetBorderColor(pBorderColor: [*c]f32, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefGetFlags(pFlags: [*c]c_uint, hTexRef: CUtexref) CUresult;
pub extern fn cuTexRefCreate(pTexRef: [*c]CUtexref) CUresult;
pub extern fn cuTexRefDestroy(hTexRef: CUtexref) CUresult;
pub extern fn cuSurfRefSetArray(hSurfRef: CUsurfref, hArray: CUarray, Flags: c_uint) CUresult;
pub extern fn cuSurfRefGetArray(phArray: [*c]CUarray, hSurfRef: CUsurfref) CUresult;
pub extern fn cuTexObjectCreate(pTexObject: [*c]CUtexObject, pResDesc: [*c]const CUDA_RESOURCE_DESC, pTexDesc: [*c]const CUDA_TEXTURE_DESC, pResViewDesc: [*c]const CUDA_RESOURCE_VIEW_DESC) CUresult;
pub extern fn cuTexObjectDestroy(texObject: CUtexObject) CUresult;
pub extern fn cuTexObjectGetResourceDesc(pResDesc: [*c]CUDA_RESOURCE_DESC, texObject: CUtexObject) CUresult;
pub extern fn cuTexObjectGetTextureDesc(pTexDesc: [*c]CUDA_TEXTURE_DESC, texObject: CUtexObject) CUresult;
pub extern fn cuTexObjectGetResourceViewDesc(pResViewDesc: [*c]CUDA_RESOURCE_VIEW_DESC, texObject: CUtexObject) CUresult;
pub extern fn cuSurfObjectCreate(pSurfObject: [*c]CUsurfObject, pResDesc: [*c]const CUDA_RESOURCE_DESC) CUresult;
pub extern fn cuSurfObjectDestroy(surfObject: CUsurfObject) CUresult;
pub extern fn cuSurfObjectGetResourceDesc(pResDesc: [*c]CUDA_RESOURCE_DESC, surfObject: CUsurfObject) CUresult;
pub extern fn cuTensorMapEncodeTiled(tensorMap: [*c]CUtensorMap, tensorDataType: CUtensorMapDataType, tensorRank: cuuint32_t, globalAddress: ?*anyopaque, globalDim: [*c]const cuuint64_t, globalStrides: [*c]const cuuint64_t, boxDim: [*c]const cuuint32_t, elementStrides: [*c]const cuuint32_t, interleave: CUtensorMapInterleave, swizzle: CUtensorMapSwizzle, l2Promotion: CUtensorMapL2promotion, oobFill: CUtensorMapFloatOOBfill) CUresult;
pub extern fn cuTensorMapEncodeIm2col(tensorMap: [*c]CUtensorMap, tensorDataType: CUtensorMapDataType, tensorRank: cuuint32_t, globalAddress: ?*anyopaque, globalDim: [*c]const cuuint64_t, globalStrides: [*c]const cuuint64_t, pixelBoxLowerCorner: [*c]const c_int, pixelBoxUpperCorner: [*c]const c_int, channelsPerPixel: cuuint32_t, pixelsPerColumn: cuuint32_t, elementStrides: [*c]const cuuint32_t, interleave: CUtensorMapInterleave, swizzle: CUtensorMapSwizzle, l2Promotion: CUtensorMapL2promotion, oobFill: CUtensorMapFloatOOBfill) CUresult;
pub extern fn cuTensorMapEncodeIm2colWide(tensorMap: [*c]CUtensorMap, tensorDataType: CUtensorMapDataType, tensorRank: cuuint32_t, globalAddress: ?*anyopaque, globalDim: [*c]const cuuint64_t, globalStrides: [*c]const cuuint64_t, pixelBoxLowerCornerWidth: c_int, pixelBoxUpperCornerWidth: c_int, channelsPerPixel: cuuint32_t, pixelsPerColumn: cuuint32_t, elementStrides: [*c]const cuuint32_t, interleave: CUtensorMapInterleave, mode: CUtensorMapIm2ColWideMode, swizzle: CUtensorMapSwizzle, l2Promotion: CUtensorMapL2promotion, oobFill: CUtensorMapFloatOOBfill) CUresult;
pub extern fn cuTensorMapReplaceAddress(tensorMap: [*c]CUtensorMap, globalAddress: ?*anyopaque) CUresult;
pub extern fn cuDeviceCanAccessPeer(canAccessPeer: [*c]c_int, dev: CUdevice, peerDev: CUdevice) CUresult;
pub extern fn cuCtxEnablePeerAccess(peerContext: CUcontext, Flags: c_uint) CUresult;
pub extern fn cuCtxDisablePeerAccess(peerContext: CUcontext) CUresult;
pub extern fn cuDeviceGetP2PAttribute(value: [*c]c_int, attrib: CUdevice_P2PAttribute, srcDevice: CUdevice, dstDevice: CUdevice) CUresult;
pub extern fn cuGraphicsUnregisterResource(resource: CUgraphicsResource) CUresult;
pub extern fn cuGraphicsSubResourceGetMappedArray(pArray: [*c]CUarray, resource: CUgraphicsResource, arrayIndex: c_uint, mipLevel: c_uint) CUresult;
pub extern fn cuGraphicsResourceGetMappedMipmappedArray(pMipmappedArray: [*c]CUmipmappedArray, resource: CUgraphicsResource) CUresult;
pub extern fn cuGraphicsResourceGetMappedPointer_v2(pDevPtr: [*c]CUdeviceptr, pSize: [*c]usize, resource: CUgraphicsResource) CUresult;
pub extern fn cuGraphicsResourceSetMapFlags_v2(resource: CUgraphicsResource, flags: c_uint) CUresult;
pub extern fn cuGraphicsMapResources(count: c_uint, resources: [*c]CUgraphicsResource, hStream: CUstream) CUresult;
pub extern fn cuGraphicsUnmapResources(count: c_uint, resources: [*c]CUgraphicsResource, hStream: CUstream) CUresult;
pub extern fn cuGetProcAddress_v2(symbol: [*c]const u8, pfn: [*c]?*anyopaque, cudaVersion: c_int, flags: cuuint64_t, symbolStatus: [*c]CUdriverProcAddressQueryResult) CUresult;
pub const CU_COREDUMP_ENABLE_ON_EXCEPTION: c_int = 1;
pub const CU_COREDUMP_TRIGGER_HOST: c_int = 2;
pub const CU_COREDUMP_LIGHTWEIGHT: c_int = 3;
pub const CU_COREDUMP_ENABLE_USER_TRIGGER: c_int = 4;
pub const CU_COREDUMP_FILE: c_int = 5;
pub const CU_COREDUMP_PIPE: c_int = 6;
pub const CU_COREDUMP_GENERATION_FLAGS: c_int = 7;
pub const CU_COREDUMP_MAX: c_int = 8;
pub const enum_CUcoredumpSettings_enum = c_uint;
pub const CUcoredumpSettings = enum_CUcoredumpSettings_enum;
pub const CU_COREDUMP_DEFAULT_FLAGS: c_int = 0;
pub const CU_COREDUMP_SKIP_NONRELOCATED_ELF_IMAGES: c_int = 1;
pub const CU_COREDUMP_SKIP_GLOBAL_MEMORY: c_int = 2;
pub const CU_COREDUMP_SKIP_SHARED_MEMORY: c_int = 4;
pub const CU_COREDUMP_SKIP_LOCAL_MEMORY: c_int = 8;
pub const CU_COREDUMP_SKIP_ABORT: c_int = 16;
pub const CU_COREDUMP_SKIP_CONSTBANK_MEMORY: c_int = 32;
pub const CU_COREDUMP_LIGHTWEIGHT_FLAGS: c_int = 47;
pub const enum_CUCoredumpGenerationFlags = c_uint;
pub const CUCoredumpGenerationFlags = enum_CUCoredumpGenerationFlags;
pub extern fn cuCoredumpGetAttribute(attrib: CUcoredumpSettings, value: ?*anyopaque, size: [*c]usize) CUresult;
pub extern fn cuCoredumpGetAttributeGlobal(attrib: CUcoredumpSettings, value: ?*anyopaque, size: [*c]usize) CUresult;
pub extern fn cuCoredumpSetAttribute(attrib: CUcoredumpSettings, value: ?*anyopaque, size: [*c]usize) CUresult;
pub extern fn cuCoredumpSetAttributeGlobal(attrib: CUcoredumpSettings, value: ?*anyopaque, size: [*c]usize) CUresult;
pub extern fn cuGetExportTable(ppExportTable: [*c]?*const anyopaque, pExportTableId: [*c]const CUuuid) CUresult;
pub const struct_CUdevResourceDesc_st = opaque {};
pub const CUdevResourceDesc = ?*struct_CUdevResourceDesc_st;
pub const CU_GREEN_CTX_DEFAULT_STREAM: c_int = 1;
pub const CUgreenCtxCreate_flags = c_uint;
pub const CU_DEV_SM_RESOURCE_SPLIT_IGNORE_SM_COSCHEDULING: c_int = 1;
pub const CU_DEV_SM_RESOURCE_SPLIT_MAX_POTENTIAL_CLUSTER_SIZE: c_int = 2;
pub const CUdevSmResourceSplit_flags = c_uint;
pub const CU_DEV_RESOURCE_TYPE_INVALID: c_int = 0;
pub const CU_DEV_RESOURCE_TYPE_SM: c_int = 1;
pub const CUdevResourceType = c_uint;
pub const struct_CUdevSmResource_st = extern struct {
    smCount: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const CUdevSmResource = struct_CUdevSmResource_st;
const union_unnamed_44 = extern union {
    sm: CUdevSmResource,
    _oversize: [48]u8,
};
pub const struct_CUdevResource_st = extern struct {
    type: CUdevResourceType = @import("std").mem.zeroes(CUdevResourceType),
    _internal_padding: [92]u8 = @import("std").mem.zeroes([92]u8),
    unnamed_0: union_unnamed_44 = @import("std").mem.zeroes(union_unnamed_44),
};
pub const CUdevResource_v1 = struct_CUdevResource_st;
pub const CUdevResource = CUdevResource_v1;
pub extern fn cuGreenCtxCreate(phCtx: [*c]CUgreenCtx, desc: CUdevResourceDesc, dev: CUdevice, flags: c_uint) CUresult;
pub extern fn cuGreenCtxDestroy(hCtx: CUgreenCtx) CUresult;
pub extern fn cuCtxFromGreenCtx(pContext: [*c]CUcontext, hCtx: CUgreenCtx) CUresult;
pub extern fn cuDeviceGetDevResource(device: CUdevice, resource: [*c]CUdevResource, @"type": CUdevResourceType) CUresult;
pub extern fn cuCtxGetDevResource(hCtx: CUcontext, resource: [*c]CUdevResource, @"type": CUdevResourceType) CUresult;
pub extern fn cuGreenCtxGetDevResource(hCtx: CUgreenCtx, resource: [*c]CUdevResource, @"type": CUdevResourceType) CUresult;
pub extern fn cuDevSmResourceSplitByCount(result: [*c]CUdevResource, nbGroups: [*c]c_uint, input: [*c]const CUdevResource, remaining: [*c]CUdevResource, useFlags: c_uint, minCount: c_uint) CUresult;
pub extern fn cuDevResourceGenerateDesc(phDesc: [*c]CUdevResourceDesc, resources: [*c]CUdevResource, nbResources: c_uint) CUresult;
pub extern fn cuGreenCtxRecordEvent(hCtx: CUgreenCtx, hEvent: CUevent) CUresult;
pub extern fn cuGreenCtxWaitEvent(hCtx: CUgreenCtx, hEvent: CUevent) CUresult;
pub extern fn cuStreamGetGreenCtx(hStream: CUstream, phCtx: [*c]CUgreenCtx) CUresult;
pub extern fn cuGreenCtxStreamCreate(phStream: [*c]CUstream, greenCtx: CUgreenCtx, flags: c_uint, priority: c_int) CUresult;
pub extern fn cuCheckpointProcessGetRestoreThreadId(pid: c_int, tid: [*c]c_int) CUresult;
pub extern fn cuCheckpointProcessGetState(pid: c_int, state: [*c]CUprocessState) CUresult;
pub extern fn cuCheckpointProcessLock(pid: c_int, args: [*c]CUcheckpointLockArgs) CUresult;
pub extern fn cuCheckpointProcessCheckpoint(pid: c_int, args: [*c]CUcheckpointCheckpointArgs) CUresult;
pub extern fn cuCheckpointProcessRestore(pid: c_int, args: [*c]CUcheckpointRestoreArgs) CUresult;
pub extern fn cuCheckpointProcessUnlock(pid: c_int, args: [*c]CUcheckpointUnlockArgs) CUresult;
pub const cudaRoundNearest: c_int = 0;
pub const cudaRoundZero: c_int = 1;
pub const cudaRoundPosInf: c_int = 2;
pub const cudaRoundMinInf: c_int = 3;
pub const enum_cudaRoundMode = c_uint;
pub const struct_char1 = extern struct {
    x: i8 = @import("std").mem.zeroes(i8),
};
pub const struct_uchar1 = extern struct {
    x: u8 = @import("std").mem.zeroes(u8),
};
pub const struct_char2 = extern struct {
    x: i8 = @import("std").mem.zeroes(i8),
    y: i8 = @import("std").mem.zeroes(i8),
};
pub const struct_uchar2 = extern struct {
    x: u8 = @import("std").mem.zeroes(u8),
    y: u8 = @import("std").mem.zeroes(u8),
};
pub const struct_char3 = extern struct {
    x: i8 = @import("std").mem.zeroes(i8),
    y: i8 = @import("std").mem.zeroes(i8),
    z: i8 = @import("std").mem.zeroes(i8),
};
pub const struct_uchar3 = extern struct {
    x: u8 = @import("std").mem.zeroes(u8),
    y: u8 = @import("std").mem.zeroes(u8),
    z: u8 = @import("std").mem.zeroes(u8),
};
pub const struct_char4 = extern struct {
    x: i8 = @import("std").mem.zeroes(i8),
    y: i8 = @import("std").mem.zeroes(i8),
    z: i8 = @import("std").mem.zeroes(i8),
    w: i8 = @import("std").mem.zeroes(i8),
};
pub const struct_uchar4 = extern struct {
    x: u8 = @import("std").mem.zeroes(u8),
    y: u8 = @import("std").mem.zeroes(u8),
    z: u8 = @import("std").mem.zeroes(u8),
    w: u8 = @import("std").mem.zeroes(u8),
};
pub const struct_short1 = extern struct {
    x: c_short = @import("std").mem.zeroes(c_short),
};
pub const struct_ushort1 = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const struct_short2 = extern struct {
    x: c_short = @import("std").mem.zeroes(c_short),
    y: c_short = @import("std").mem.zeroes(c_short),
};
pub const struct_ushort2 = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
    y: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const struct_short3 = extern struct {
    x: c_short = @import("std").mem.zeroes(c_short),
    y: c_short = @import("std").mem.zeroes(c_short),
    z: c_short = @import("std").mem.zeroes(c_short),
};
pub const struct_ushort3 = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
    y: c_ushort = @import("std").mem.zeroes(c_ushort),
    z: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const struct_short4 = extern struct {
    x: c_short = @import("std").mem.zeroes(c_short),
    y: c_short = @import("std").mem.zeroes(c_short),
    z: c_short = @import("std").mem.zeroes(c_short),
    w: c_short = @import("std").mem.zeroes(c_short),
};
pub const struct_ushort4 = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
    y: c_ushort = @import("std").mem.zeroes(c_ushort),
    z: c_ushort = @import("std").mem.zeroes(c_ushort),
    w: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const struct_int1 = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_uint1 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_int2 = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_uint2 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_int3 = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    z: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_uint3 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
    z: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_int4 = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    z: c_int = @import("std").mem.zeroes(c_int),
    w: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_uint4 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
    z: c_uint = @import("std").mem.zeroes(c_uint),
    w: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_long1 = extern struct {
    x: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct_ulong1 = extern struct {
    x: c_ulong = @import("std").mem.zeroes(c_ulong),
};
pub const struct_long2 = extern struct {
    x: c_long = @import("std").mem.zeroes(c_long),
    y: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct_ulong2 = extern struct {
    x: c_ulong = @import("std").mem.zeroes(c_ulong),
    y: c_ulong = @import("std").mem.zeroes(c_ulong),
};
pub const struct_long3 = extern struct {
    x: c_long = @import("std").mem.zeroes(c_long),
    y: c_long = @import("std").mem.zeroes(c_long),
    z: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct_ulong3 = extern struct {
    x: c_ulong = @import("std").mem.zeroes(c_ulong),
    y: c_ulong = @import("std").mem.zeroes(c_ulong),
    z: c_ulong = @import("std").mem.zeroes(c_ulong),
};
pub const struct_long4 = extern struct {
    x: c_long = @import("std").mem.zeroes(c_long),
    y: c_long = @import("std").mem.zeroes(c_long),
    z: c_long = @import("std").mem.zeroes(c_long),
    w: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct_ulong4 = extern struct {
    x: c_ulong = @import("std").mem.zeroes(c_ulong),
    y: c_ulong = @import("std").mem.zeroes(c_ulong),
    z: c_ulong = @import("std").mem.zeroes(c_ulong),
    w: c_ulong = @import("std").mem.zeroes(c_ulong),
};
pub const struct_float1 = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
};
pub const struct_float2 = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const struct_float3 = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
};
pub const struct_float4 = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    z: f32 = @import("std").mem.zeroes(f32),
    w: f32 = @import("std").mem.zeroes(f32),
};
pub const struct_longlong1 = extern struct {
    x: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const struct_ulonglong1 = extern struct {
    x: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
pub const struct_longlong2 = extern struct {
    x: c_longlong = @import("std").mem.zeroes(c_longlong),
    y: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const struct_ulonglong2 = extern struct {
    x: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    y: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
pub const struct_longlong3 = extern struct {
    x: c_longlong = @import("std").mem.zeroes(c_longlong),
    y: c_longlong = @import("std").mem.zeroes(c_longlong),
    z: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const struct_ulonglong3 = extern struct {
    x: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    y: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    z: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
pub const struct_longlong4 = extern struct {
    x: c_longlong = @import("std").mem.zeroes(c_longlong),
    y: c_longlong = @import("std").mem.zeroes(c_longlong),
    z: c_longlong = @import("std").mem.zeroes(c_longlong),
    w: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const struct_ulonglong4 = extern struct {
    x: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    y: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    z: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    w: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
pub const struct_double1 = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
};
pub const struct_double2 = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
    y: f64 = @import("std").mem.zeroes(f64),
};
pub const struct_double3 = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
    y: f64 = @import("std").mem.zeroes(f64),
    z: f64 = @import("std").mem.zeroes(f64),
};
pub const struct_double4 = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
    y: f64 = @import("std").mem.zeroes(f64),
    z: f64 = @import("std").mem.zeroes(f64),
    w: f64 = @import("std").mem.zeroes(f64),
};
pub const char1 = struct_char1;
pub const uchar1 = struct_uchar1;
pub const char2 = struct_char2;
pub const uchar2 = struct_uchar2;
pub const char3 = struct_char3;
pub const uchar3 = struct_uchar3;
pub const char4 = struct_char4;
pub const uchar4 = struct_uchar4;
pub const short1 = struct_short1;
pub const ushort1 = struct_ushort1;
pub const short2 = struct_short2;
pub const ushort2 = struct_ushort2;
pub const short3 = struct_short3;
pub const ushort3 = struct_ushort3;
pub const short4 = struct_short4;
pub const ushort4 = struct_ushort4;
pub const int1 = struct_int1;
pub const uint1 = struct_uint1;
pub const int2 = struct_int2;
pub const uint2 = struct_uint2;
pub const int3 = struct_int3;
pub const uint3 = struct_uint3;
pub const int4 = struct_int4;
pub const uint4 = struct_uint4;
pub const long1 = struct_long1;
pub const ulong1 = struct_ulong1;
pub const long2 = struct_long2;
pub const ulong2 = struct_ulong2;
pub const long3 = struct_long3;
pub const ulong3 = struct_ulong3;
pub const long4 = struct_long4;
pub const ulong4 = struct_ulong4;
pub const float1 = struct_float1;
pub const float2 = struct_float2;
pub const float3 = struct_float3;
pub const float4 = struct_float4;
pub const longlong1 = struct_longlong1;
pub const ulonglong1 = struct_ulonglong1;
pub const longlong2 = struct_longlong2;
pub const ulonglong2 = struct_ulonglong2;
pub const longlong3 = struct_longlong3;
pub const ulonglong3 = struct_ulonglong3;
pub const longlong4 = struct_longlong4;
pub const ulonglong4 = struct_ulonglong4;
pub const double1 = struct_double1;
pub const double2 = struct_double2;
pub const double3 = struct_double3;
pub const double4 = struct_double4;
pub const struct_dim3 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
    z: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const dim3 = struct_dim3;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const cudaSuccess: c_int = 0;
pub const cudaErrorInvalidValue: c_int = 1;
pub const cudaErrorMemoryAllocation: c_int = 2;
pub const cudaErrorInitializationError: c_int = 3;
pub const cudaErrorCudartUnloading: c_int = 4;
pub const cudaErrorProfilerDisabled: c_int = 5;
pub const cudaErrorProfilerNotInitialized: c_int = 6;
pub const cudaErrorProfilerAlreadyStarted: c_int = 7;
pub const cudaErrorProfilerAlreadyStopped: c_int = 8;
pub const cudaErrorInvalidConfiguration: c_int = 9;
pub const cudaErrorInvalidPitchValue: c_int = 12;
pub const cudaErrorInvalidSymbol: c_int = 13;
pub const cudaErrorInvalidHostPointer: c_int = 16;
pub const cudaErrorInvalidDevicePointer: c_int = 17;
pub const cudaErrorInvalidTexture: c_int = 18;
pub const cudaErrorInvalidTextureBinding: c_int = 19;
pub const cudaErrorInvalidChannelDescriptor: c_int = 20;
pub const cudaErrorInvalidMemcpyDirection: c_int = 21;
pub const cudaErrorAddressOfConstant: c_int = 22;
pub const cudaErrorTextureFetchFailed: c_int = 23;
pub const cudaErrorTextureNotBound: c_int = 24;
pub const cudaErrorSynchronizationError: c_int = 25;
pub const cudaErrorInvalidFilterSetting: c_int = 26;
pub const cudaErrorInvalidNormSetting: c_int = 27;
pub const cudaErrorMixedDeviceExecution: c_int = 28;
pub const cudaErrorNotYetImplemented: c_int = 31;
pub const cudaErrorMemoryValueTooLarge: c_int = 32;
pub const cudaErrorStubLibrary: c_int = 34;
pub const cudaErrorInsufficientDriver: c_int = 35;
pub const cudaErrorCallRequiresNewerDriver: c_int = 36;
pub const cudaErrorInvalidSurface: c_int = 37;
pub const cudaErrorDuplicateVariableName: c_int = 43;
pub const cudaErrorDuplicateTextureName: c_int = 44;
pub const cudaErrorDuplicateSurfaceName: c_int = 45;
pub const cudaErrorDevicesUnavailable: c_int = 46;
pub const cudaErrorIncompatibleDriverContext: c_int = 49;
pub const cudaErrorMissingConfiguration: c_int = 52;
pub const cudaErrorPriorLaunchFailure: c_int = 53;
pub const cudaErrorLaunchMaxDepthExceeded: c_int = 65;
pub const cudaErrorLaunchFileScopedTex: c_int = 66;
pub const cudaErrorLaunchFileScopedSurf: c_int = 67;
pub const cudaErrorSyncDepthExceeded: c_int = 68;
pub const cudaErrorLaunchPendingCountExceeded: c_int = 69;
pub const cudaErrorInvalidDeviceFunction: c_int = 98;
pub const cudaErrorNoDevice: c_int = 100;
pub const cudaErrorInvalidDevice: c_int = 101;
pub const cudaErrorDeviceNotLicensed: c_int = 102;
pub const cudaErrorSoftwareValidityNotEstablished: c_int = 103;
pub const cudaErrorStartupFailure: c_int = 127;
pub const cudaErrorInvalidKernelImage: c_int = 200;
pub const cudaErrorDeviceUninitialized: c_int = 201;
pub const cudaErrorMapBufferObjectFailed: c_int = 205;
pub const cudaErrorUnmapBufferObjectFailed: c_int = 206;
pub const cudaErrorArrayIsMapped: c_int = 207;
pub const cudaErrorAlreadyMapped: c_int = 208;
pub const cudaErrorNoKernelImageForDevice: c_int = 209;
pub const cudaErrorAlreadyAcquired: c_int = 210;
pub const cudaErrorNotMapped: c_int = 211;
pub const cudaErrorNotMappedAsArray: c_int = 212;
pub const cudaErrorNotMappedAsPointer: c_int = 213;
pub const cudaErrorECCUncorrectable: c_int = 214;
pub const cudaErrorUnsupportedLimit: c_int = 215;
pub const cudaErrorDeviceAlreadyInUse: c_int = 216;
pub const cudaErrorPeerAccessUnsupported: c_int = 217;
pub const cudaErrorInvalidPtx: c_int = 218;
pub const cudaErrorInvalidGraphicsContext: c_int = 219;
pub const cudaErrorNvlinkUncorrectable: c_int = 220;
pub const cudaErrorJitCompilerNotFound: c_int = 221;
pub const cudaErrorUnsupportedPtxVersion: c_int = 222;
pub const cudaErrorJitCompilationDisabled: c_int = 223;
pub const cudaErrorUnsupportedExecAffinity: c_int = 224;
pub const cudaErrorUnsupportedDevSideSync: c_int = 225;
pub const cudaErrorContained: c_int = 226;
pub const cudaErrorInvalidSource: c_int = 300;
pub const cudaErrorFileNotFound: c_int = 301;
pub const cudaErrorSharedObjectSymbolNotFound: c_int = 302;
pub const cudaErrorSharedObjectInitFailed: c_int = 303;
pub const cudaErrorOperatingSystem: c_int = 304;
pub const cudaErrorInvalidResourceHandle: c_int = 400;
pub const cudaErrorIllegalState: c_int = 401;
pub const cudaErrorLossyQuery: c_int = 402;
pub const cudaErrorSymbolNotFound: c_int = 500;
pub const cudaErrorNotReady: c_int = 600;
pub const cudaErrorIllegalAddress: c_int = 700;
pub const cudaErrorLaunchOutOfResources: c_int = 701;
pub const cudaErrorLaunchTimeout: c_int = 702;
pub const cudaErrorLaunchIncompatibleTexturing: c_int = 703;
pub const cudaErrorPeerAccessAlreadyEnabled: c_int = 704;
pub const cudaErrorPeerAccessNotEnabled: c_int = 705;
pub const cudaErrorSetOnActiveProcess: c_int = 708;
pub const cudaErrorContextIsDestroyed: c_int = 709;
pub const cudaErrorAssert: c_int = 710;
pub const cudaErrorTooManyPeers: c_int = 711;
pub const cudaErrorHostMemoryAlreadyRegistered: c_int = 712;
pub const cudaErrorHostMemoryNotRegistered: c_int = 713;
pub const cudaErrorHardwareStackError: c_int = 714;
pub const cudaErrorIllegalInstruction: c_int = 715;
pub const cudaErrorMisalignedAddress: c_int = 716;
pub const cudaErrorInvalidAddressSpace: c_int = 717;
pub const cudaErrorInvalidPc: c_int = 718;
pub const cudaErrorLaunchFailure: c_int = 719;
pub const cudaErrorCooperativeLaunchTooLarge: c_int = 720;
pub const cudaErrorTensorMemoryLeak: c_int = 721;
pub const cudaErrorNotPermitted: c_int = 800;
pub const cudaErrorNotSupported: c_int = 801;
pub const cudaErrorSystemNotReady: c_int = 802;
pub const cudaErrorSystemDriverMismatch: c_int = 803;
pub const cudaErrorCompatNotSupportedOnDevice: c_int = 804;
pub const cudaErrorMpsConnectionFailed: c_int = 805;
pub const cudaErrorMpsRpcFailure: c_int = 806;
pub const cudaErrorMpsServerNotReady: c_int = 807;
pub const cudaErrorMpsMaxClientsReached: c_int = 808;
pub const cudaErrorMpsMaxConnectionsReached: c_int = 809;
pub const cudaErrorMpsClientTerminated: c_int = 810;
pub const cudaErrorCdpNotSupported: c_int = 811;
pub const cudaErrorCdpVersionMismatch: c_int = 812;
pub const cudaErrorStreamCaptureUnsupported: c_int = 900;
pub const cudaErrorStreamCaptureInvalidated: c_int = 901;
pub const cudaErrorStreamCaptureMerge: c_int = 902;
pub const cudaErrorStreamCaptureUnmatched: c_int = 903;
pub const cudaErrorStreamCaptureUnjoined: c_int = 904;
pub const cudaErrorStreamCaptureIsolation: c_int = 905;
pub const cudaErrorStreamCaptureImplicit: c_int = 906;
pub const cudaErrorCapturedEvent: c_int = 907;
pub const cudaErrorStreamCaptureWrongThread: c_int = 908;
pub const cudaErrorTimeout: c_int = 909;
pub const cudaErrorGraphExecUpdateFailure: c_int = 910;
pub const cudaErrorExternalDevice: c_int = 911;
pub const cudaErrorInvalidClusterSize: c_int = 912;
pub const cudaErrorFunctionNotLoaded: c_int = 913;
pub const cudaErrorInvalidResourceType: c_int = 914;
pub const cudaErrorInvalidResourceConfiguration: c_int = 915;
pub const cudaErrorUnknown: c_int = 999;
pub const cudaErrorApiFailureBase: c_int = 10000;
pub const enum_cudaError = c_uint;
pub const cudaChannelFormatKindSigned: c_int = 0;
pub const cudaChannelFormatKindUnsigned: c_int = 1;
pub const cudaChannelFormatKindFloat: c_int = 2;
pub const cudaChannelFormatKindNone: c_int = 3;
pub const cudaChannelFormatKindNV12: c_int = 4;
pub const cudaChannelFormatKindUnsignedNormalized8X1: c_int = 5;
pub const cudaChannelFormatKindUnsignedNormalized8X2: c_int = 6;
pub const cudaChannelFormatKindUnsignedNormalized8X4: c_int = 7;
pub const cudaChannelFormatKindUnsignedNormalized16X1: c_int = 8;
pub const cudaChannelFormatKindUnsignedNormalized16X2: c_int = 9;
pub const cudaChannelFormatKindUnsignedNormalized16X4: c_int = 10;
pub const cudaChannelFormatKindSignedNormalized8X1: c_int = 11;
pub const cudaChannelFormatKindSignedNormalized8X2: c_int = 12;
pub const cudaChannelFormatKindSignedNormalized8X4: c_int = 13;
pub const cudaChannelFormatKindSignedNormalized16X1: c_int = 14;
pub const cudaChannelFormatKindSignedNormalized16X2: c_int = 15;
pub const cudaChannelFormatKindSignedNormalized16X4: c_int = 16;
pub const cudaChannelFormatKindUnsignedBlockCompressed1: c_int = 17;
pub const cudaChannelFormatKindUnsignedBlockCompressed1SRGB: c_int = 18;
pub const cudaChannelFormatKindUnsignedBlockCompressed2: c_int = 19;
pub const cudaChannelFormatKindUnsignedBlockCompressed2SRGB: c_int = 20;
pub const cudaChannelFormatKindUnsignedBlockCompressed3: c_int = 21;
pub const cudaChannelFormatKindUnsignedBlockCompressed3SRGB: c_int = 22;
pub const cudaChannelFormatKindUnsignedBlockCompressed4: c_int = 23;
pub const cudaChannelFormatKindSignedBlockCompressed4: c_int = 24;
pub const cudaChannelFormatKindUnsignedBlockCompressed5: c_int = 25;
pub const cudaChannelFormatKindSignedBlockCompressed5: c_int = 26;
pub const cudaChannelFormatKindUnsignedBlockCompressed6H: c_int = 27;
pub const cudaChannelFormatKindSignedBlockCompressed6H: c_int = 28;
pub const cudaChannelFormatKindUnsignedBlockCompressed7: c_int = 29;
pub const cudaChannelFormatKindUnsignedBlockCompressed7SRGB: c_int = 30;
pub const cudaChannelFormatKindUnsignedNormalized1010102: c_int = 31;
pub const enum_cudaChannelFormatKind = c_uint;
pub const struct_cudaChannelFormatDesc = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    z: c_int = @import("std").mem.zeroes(c_int),
    w: c_int = @import("std").mem.zeroes(c_int),
    f: enum_cudaChannelFormatKind = @import("std").mem.zeroes(enum_cudaChannelFormatKind),
};
pub const struct_cudaArray = opaque {};
pub const cudaArray_t = ?*struct_cudaArray;
pub const cudaArray_const_t = ?*const struct_cudaArray;
pub const struct_cudaMipmappedArray = opaque {};
pub const cudaMipmappedArray_t = ?*struct_cudaMipmappedArray;
pub const cudaMipmappedArray_const_t = ?*const struct_cudaMipmappedArray;
const struct_unnamed_45 = extern struct {
    width: c_uint = @import("std").mem.zeroes(c_uint),
    height: c_uint = @import("std").mem.zeroes(c_uint),
    depth: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_cudaArraySparseProperties = extern struct {
    tileExtent: struct_unnamed_45 = @import("std").mem.zeroes(struct_unnamed_45),
    miptailFirstLevel: c_uint = @import("std").mem.zeroes(c_uint),
    miptailSize: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [4]c_uint = @import("std").mem.zeroes([4]c_uint),
};
pub const struct_cudaArrayMemoryRequirements = extern struct {
    size: usize = @import("std").mem.zeroes(usize),
    alignment: usize = @import("std").mem.zeroes(usize),
    reserved: [4]c_uint = @import("std").mem.zeroes([4]c_uint),
};
pub const cudaMemoryTypeUnregistered: c_int = 0;
pub const cudaMemoryTypeHost: c_int = 1;
pub const cudaMemoryTypeDevice: c_int = 2;
pub const cudaMemoryTypeManaged: c_int = 3;
pub const enum_cudaMemoryType = c_uint;
pub const cudaMemcpyHostToHost: c_int = 0;
pub const cudaMemcpyHostToDevice: c_int = 1;
pub const cudaMemcpyDeviceToHost: c_int = 2;
pub const cudaMemcpyDeviceToDevice: c_int = 3;
pub const cudaMemcpyDefault: c_int = 4;
pub const enum_cudaMemcpyKind = c_uint;
pub const struct_cudaPitchedPtr = extern struct {
    ptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pitch: usize = @import("std").mem.zeroes(usize),
    xsize: usize = @import("std").mem.zeroes(usize),
    ysize: usize = @import("std").mem.zeroes(usize),
};
pub const struct_cudaExtent = extern struct {
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
    depth: usize = @import("std").mem.zeroes(usize),
};
pub const struct_cudaPos = extern struct {
    x: usize = @import("std").mem.zeroes(usize),
    y: usize = @import("std").mem.zeroes(usize),
    z: usize = @import("std").mem.zeroes(usize),
};
pub const struct_cudaMemcpy3DParms = extern struct {
    srcArray: cudaArray_t = @import("std").mem.zeroes(cudaArray_t),
    srcPos: struct_cudaPos = @import("std").mem.zeroes(struct_cudaPos),
    srcPtr: struct_cudaPitchedPtr = @import("std").mem.zeroes(struct_cudaPitchedPtr),
    dstArray: cudaArray_t = @import("std").mem.zeroes(cudaArray_t),
    dstPos: struct_cudaPos = @import("std").mem.zeroes(struct_cudaPos),
    dstPtr: struct_cudaPitchedPtr = @import("std").mem.zeroes(struct_cudaPitchedPtr),
    extent: struct_cudaExtent = @import("std").mem.zeroes(struct_cudaExtent),
    kind: enum_cudaMemcpyKind = @import("std").mem.zeroes(enum_cudaMemcpyKind),
};
pub const struct_cudaMemcpyNodeParams = extern struct {
    flags: c_int = @import("std").mem.zeroes(c_int),
    reserved: [3]c_int = @import("std").mem.zeroes([3]c_int),
    copyParams: struct_cudaMemcpy3DParms = @import("std").mem.zeroes(struct_cudaMemcpy3DParms),
};
pub const struct_cudaMemcpy3DPeerParms = extern struct {
    srcArray: cudaArray_t = @import("std").mem.zeroes(cudaArray_t),
    srcPos: struct_cudaPos = @import("std").mem.zeroes(struct_cudaPos),
    srcPtr: struct_cudaPitchedPtr = @import("std").mem.zeroes(struct_cudaPitchedPtr),
    srcDevice: c_int = @import("std").mem.zeroes(c_int),
    dstArray: cudaArray_t = @import("std").mem.zeroes(cudaArray_t),
    dstPos: struct_cudaPos = @import("std").mem.zeroes(struct_cudaPos),
    dstPtr: struct_cudaPitchedPtr = @import("std").mem.zeroes(struct_cudaPitchedPtr),
    dstDevice: c_int = @import("std").mem.zeroes(c_int),
    extent: struct_cudaExtent = @import("std").mem.zeroes(struct_cudaExtent),
};
pub const struct_cudaMemsetParams = extern struct {
    dst: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pitch: usize = @import("std").mem.zeroes(usize),
    value: c_uint = @import("std").mem.zeroes(c_uint),
    elementSize: c_uint = @import("std").mem.zeroes(c_uint),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
};
pub const struct_cudaMemsetParamsV2 = extern struct {
    dst: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pitch: usize = @import("std").mem.zeroes(usize),
    value: c_uint = @import("std").mem.zeroes(c_uint),
    elementSize: c_uint = @import("std").mem.zeroes(c_uint),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
};
pub const cudaAccessPropertyNormal: c_int = 0;
pub const cudaAccessPropertyStreaming: c_int = 1;
pub const cudaAccessPropertyPersisting: c_int = 2;
pub const enum_cudaAccessProperty = c_uint;
pub const struct_cudaAccessPolicyWindow = extern struct {
    base_ptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    num_bytes: usize = @import("std").mem.zeroes(usize),
    hitRatio: f32 = @import("std").mem.zeroes(f32),
    hitProp: enum_cudaAccessProperty = @import("std").mem.zeroes(enum_cudaAccessProperty),
    missProp: enum_cudaAccessProperty = @import("std").mem.zeroes(enum_cudaAccessProperty),
};
pub const cudaHostFn_t = ?*const fn (?*anyopaque) callconv(.c) void;
pub const struct_cudaHostNodeParams = extern struct {
    @"fn": cudaHostFn_t = @import("std").mem.zeroes(cudaHostFn_t),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const struct_cudaHostNodeParamsV2 = extern struct {
    @"fn": cudaHostFn_t = @import("std").mem.zeroes(cudaHostFn_t),
    userData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const cudaStreamCaptureStatusNone: c_int = 0;
pub const cudaStreamCaptureStatusActive: c_int = 1;
pub const cudaStreamCaptureStatusInvalidated: c_int = 2;
pub const enum_cudaStreamCaptureStatus = c_uint;
pub const cudaStreamCaptureModeGlobal: c_int = 0;
pub const cudaStreamCaptureModeThreadLocal: c_int = 1;
pub const cudaStreamCaptureModeRelaxed: c_int = 2;
pub const enum_cudaStreamCaptureMode = c_uint;
pub const cudaSyncPolicyAuto: c_int = 1;
pub const cudaSyncPolicySpin: c_int = 2;
pub const cudaSyncPolicyYield: c_int = 3;
pub const cudaSyncPolicyBlockingSync: c_int = 4;
pub const enum_cudaSynchronizationPolicy = c_uint;
pub const cudaClusterSchedulingPolicyDefault: c_int = 0;
pub const cudaClusterSchedulingPolicySpread: c_int = 1;
pub const cudaClusterSchedulingPolicyLoadBalancing: c_int = 2;
pub const enum_cudaClusterSchedulingPolicy = c_uint;
pub const cudaStreamAddCaptureDependencies: c_int = 0;
pub const cudaStreamSetCaptureDependencies: c_int = 1;
pub const enum_cudaStreamUpdateCaptureDependenciesFlags = c_uint;
pub const cudaUserObjectNoDestructorSync: c_int = 1;
pub const enum_cudaUserObjectFlags = c_uint;
pub const cudaGraphUserObjectMove: c_int = 1;
pub const enum_cudaUserObjectRetainFlags = c_uint;
pub const struct_cudaGraphicsResource = opaque {};
pub const cudaGraphicsRegisterFlagsNone: c_int = 0;
pub const cudaGraphicsRegisterFlagsReadOnly: c_int = 1;
pub const cudaGraphicsRegisterFlagsWriteDiscard: c_int = 2;
pub const cudaGraphicsRegisterFlagsSurfaceLoadStore: c_int = 4;
pub const cudaGraphicsRegisterFlagsTextureGather: c_int = 8;
pub const enum_cudaGraphicsRegisterFlags = c_uint;
pub const cudaGraphicsMapFlagsNone: c_int = 0;
pub const cudaGraphicsMapFlagsReadOnly: c_int = 1;
pub const cudaGraphicsMapFlagsWriteDiscard: c_int = 2;
pub const enum_cudaGraphicsMapFlags = c_uint;
pub const cudaGraphicsCubeFacePositiveX: c_int = 0;
pub const cudaGraphicsCubeFaceNegativeX: c_int = 1;
pub const cudaGraphicsCubeFacePositiveY: c_int = 2;
pub const cudaGraphicsCubeFaceNegativeY: c_int = 3;
pub const cudaGraphicsCubeFacePositiveZ: c_int = 4;
pub const cudaGraphicsCubeFaceNegativeZ: c_int = 5;
pub const enum_cudaGraphicsCubeFace = c_uint;
pub const cudaResourceTypeArray: c_int = 0;
pub const cudaResourceTypeMipmappedArray: c_int = 1;
pub const cudaResourceTypeLinear: c_int = 2;
pub const cudaResourceTypePitch2D: c_int = 3;
pub const enum_cudaResourceType = c_uint;
pub const cudaResViewFormatNone: c_int = 0;
pub const cudaResViewFormatUnsignedChar1: c_int = 1;
pub const cudaResViewFormatUnsignedChar2: c_int = 2;
pub const cudaResViewFormatUnsignedChar4: c_int = 3;
pub const cudaResViewFormatSignedChar1: c_int = 4;
pub const cudaResViewFormatSignedChar2: c_int = 5;
pub const cudaResViewFormatSignedChar4: c_int = 6;
pub const cudaResViewFormatUnsignedShort1: c_int = 7;
pub const cudaResViewFormatUnsignedShort2: c_int = 8;
pub const cudaResViewFormatUnsignedShort4: c_int = 9;
pub const cudaResViewFormatSignedShort1: c_int = 10;
pub const cudaResViewFormatSignedShort2: c_int = 11;
pub const cudaResViewFormatSignedShort4: c_int = 12;
pub const cudaResViewFormatUnsignedInt1: c_int = 13;
pub const cudaResViewFormatUnsignedInt2: c_int = 14;
pub const cudaResViewFormatUnsignedInt4: c_int = 15;
pub const cudaResViewFormatSignedInt1: c_int = 16;
pub const cudaResViewFormatSignedInt2: c_int = 17;
pub const cudaResViewFormatSignedInt4: c_int = 18;
pub const cudaResViewFormatHalf1: c_int = 19;
pub const cudaResViewFormatHalf2: c_int = 20;
pub const cudaResViewFormatHalf4: c_int = 21;
pub const cudaResViewFormatFloat1: c_int = 22;
pub const cudaResViewFormatFloat2: c_int = 23;
pub const cudaResViewFormatFloat4: c_int = 24;
pub const cudaResViewFormatUnsignedBlockCompressed1: c_int = 25;
pub const cudaResViewFormatUnsignedBlockCompressed2: c_int = 26;
pub const cudaResViewFormatUnsignedBlockCompressed3: c_int = 27;
pub const cudaResViewFormatUnsignedBlockCompressed4: c_int = 28;
pub const cudaResViewFormatSignedBlockCompressed4: c_int = 29;
pub const cudaResViewFormatUnsignedBlockCompressed5: c_int = 30;
pub const cudaResViewFormatSignedBlockCompressed5: c_int = 31;
pub const cudaResViewFormatUnsignedBlockCompressed6H: c_int = 32;
pub const cudaResViewFormatSignedBlockCompressed6H: c_int = 33;
pub const cudaResViewFormatUnsignedBlockCompressed7: c_int = 34;
pub const enum_cudaResourceViewFormat = c_uint;
const struct_unnamed_47 = extern struct {
    array: cudaArray_t = @import("std").mem.zeroes(cudaArray_t),
};
const struct_unnamed_48 = extern struct {
    mipmap: cudaMipmappedArray_t = @import("std").mem.zeroes(cudaMipmappedArray_t),
};
const struct_unnamed_49 = extern struct {
    devPtr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    desc: struct_cudaChannelFormatDesc = @import("std").mem.zeroes(struct_cudaChannelFormatDesc),
    sizeInBytes: usize = @import("std").mem.zeroes(usize),
};
const struct_unnamed_50 = extern struct {
    devPtr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    desc: struct_cudaChannelFormatDesc = @import("std").mem.zeroes(struct_cudaChannelFormatDesc),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
    pitchInBytes: usize = @import("std").mem.zeroes(usize),
};
const union_unnamed_46 = extern union {
    array: struct_unnamed_47,
    mipmap: struct_unnamed_48,
    linear: struct_unnamed_49,
    pitch2D: struct_unnamed_50,
};
pub const struct_cudaResourceDesc = extern struct {
    resType: enum_cudaResourceType = @import("std").mem.zeroes(enum_cudaResourceType),
    res: union_unnamed_46 = @import("std").mem.zeroes(union_unnamed_46),
};
pub const struct_cudaResourceViewDesc = extern struct {
    format: enum_cudaResourceViewFormat = @import("std").mem.zeroes(enum_cudaResourceViewFormat),
    width: usize = @import("std").mem.zeroes(usize),
    height: usize = @import("std").mem.zeroes(usize),
    depth: usize = @import("std").mem.zeroes(usize),
    firstMipmapLevel: c_uint = @import("std").mem.zeroes(c_uint),
    lastMipmapLevel: c_uint = @import("std").mem.zeroes(c_uint),
    firstLayer: c_uint = @import("std").mem.zeroes(c_uint),
    lastLayer: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_cudaPointerAttributes = extern struct {
    type: enum_cudaMemoryType = @import("std").mem.zeroes(enum_cudaMemoryType),
    device: c_int = @import("std").mem.zeroes(c_int),
    devicePointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const struct_cudaFuncAttributes = extern struct {
    sharedSizeBytes: usize = @import("std").mem.zeroes(usize),
    constSizeBytes: usize = @import("std").mem.zeroes(usize),
    localSizeBytes: usize = @import("std").mem.zeroes(usize),
    maxThreadsPerBlock: c_int = @import("std").mem.zeroes(c_int),
    numRegs: c_int = @import("std").mem.zeroes(c_int),
    ptxVersion: c_int = @import("std").mem.zeroes(c_int),
    binaryVersion: c_int = @import("std").mem.zeroes(c_int),
    cacheModeCA: c_int = @import("std").mem.zeroes(c_int),
    maxDynamicSharedSizeBytes: c_int = @import("std").mem.zeroes(c_int),
    preferredShmemCarveout: c_int = @import("std").mem.zeroes(c_int),
    clusterDimMustBeSet: c_int = @import("std").mem.zeroes(c_int),
    requiredClusterWidth: c_int = @import("std").mem.zeroes(c_int),
    requiredClusterHeight: c_int = @import("std").mem.zeroes(c_int),
    requiredClusterDepth: c_int = @import("std").mem.zeroes(c_int),
    clusterSchedulingPolicyPreference: c_int = @import("std").mem.zeroes(c_int),
    nonPortableClusterSizeAllowed: c_int = @import("std").mem.zeroes(c_int),
    reserved: [16]c_int = @import("std").mem.zeroes([16]c_int),
};
pub const cudaFuncAttributeMaxDynamicSharedMemorySize: c_int = 8;
pub const cudaFuncAttributePreferredSharedMemoryCarveout: c_int = 9;
pub const cudaFuncAttributeClusterDimMustBeSet: c_int = 10;
pub const cudaFuncAttributeRequiredClusterWidth: c_int = 11;
pub const cudaFuncAttributeRequiredClusterHeight: c_int = 12;
pub const cudaFuncAttributeRequiredClusterDepth: c_int = 13;
pub const cudaFuncAttributeNonPortableClusterSizeAllowed: c_int = 14;
pub const cudaFuncAttributeClusterSchedulingPolicyPreference: c_int = 15;
pub const cudaFuncAttributeMax: c_int = 16;
pub const enum_cudaFuncAttribute = c_uint;
pub const cudaFuncCachePreferNone: c_int = 0;
pub const cudaFuncCachePreferShared: c_int = 1;
pub const cudaFuncCachePreferL1: c_int = 2;
pub const cudaFuncCachePreferEqual: c_int = 3;
pub const enum_cudaFuncCache = c_uint;
pub const cudaSharedMemBankSizeDefault: c_int = 0;
pub const cudaSharedMemBankSizeFourByte: c_int = 1;
pub const cudaSharedMemBankSizeEightByte: c_int = 2;
pub const enum_cudaSharedMemConfig = c_uint;
pub const cudaSharedmemCarveoutDefault: c_int = -1;
pub const cudaSharedmemCarveoutMaxShared: c_int = 100;
pub const cudaSharedmemCarveoutMaxL1: c_int = 0;
pub const enum_cudaSharedCarveout = c_int;
pub const cudaComputeModeDefault: c_int = 0;
pub const cudaComputeModeExclusive: c_int = 1;
pub const cudaComputeModeProhibited: c_int = 2;
pub const cudaComputeModeExclusiveProcess: c_int = 3;
pub const enum_cudaComputeMode = c_uint;
pub const cudaLimitStackSize: c_int = 0;
pub const cudaLimitPrintfFifoSize: c_int = 1;
pub const cudaLimitMallocHeapSize: c_int = 2;
pub const cudaLimitDevRuntimeSyncDepth: c_int = 3;
pub const cudaLimitDevRuntimePendingLaunchCount: c_int = 4;
pub const cudaLimitMaxL2FetchGranularity: c_int = 5;
pub const cudaLimitPersistingL2CacheSize: c_int = 6;
pub const enum_cudaLimit = c_uint;
pub const cudaMemAdviseSetReadMostly: c_int = 1;
pub const cudaMemAdviseUnsetReadMostly: c_int = 2;
pub const cudaMemAdviseSetPreferredLocation: c_int = 3;
pub const cudaMemAdviseUnsetPreferredLocation: c_int = 4;
pub const cudaMemAdviseSetAccessedBy: c_int = 5;
pub const cudaMemAdviseUnsetAccessedBy: c_int = 6;
pub const enum_cudaMemoryAdvise = c_uint;
pub const cudaMemRangeAttributeReadMostly: c_int = 1;
pub const cudaMemRangeAttributePreferredLocation: c_int = 2;
pub const cudaMemRangeAttributeAccessedBy: c_int = 3;
pub const cudaMemRangeAttributeLastPrefetchLocation: c_int = 4;
pub const cudaMemRangeAttributePreferredLocationType: c_int = 5;
pub const cudaMemRangeAttributePreferredLocationId: c_int = 6;
pub const cudaMemRangeAttributeLastPrefetchLocationType: c_int = 7;
pub const cudaMemRangeAttributeLastPrefetchLocationId: c_int = 8;
pub const enum_cudaMemRangeAttribute = c_uint;
pub const cudaFlushGPUDirectRDMAWritesOptionHost: c_int = 1;
pub const cudaFlushGPUDirectRDMAWritesOptionMemOps: c_int = 2;
pub const enum_cudaFlushGPUDirectRDMAWritesOptions = c_uint;
pub const cudaGPUDirectRDMAWritesOrderingNone: c_int = 0;
pub const cudaGPUDirectRDMAWritesOrderingOwner: c_int = 100;
pub const cudaGPUDirectRDMAWritesOrderingAllDevices: c_int = 200;
pub const enum_cudaGPUDirectRDMAWritesOrdering = c_uint;
pub const cudaFlushGPUDirectRDMAWritesToOwner: c_int = 100;
pub const cudaFlushGPUDirectRDMAWritesToAllDevices: c_int = 200;
pub const enum_cudaFlushGPUDirectRDMAWritesScope = c_uint;
pub const cudaFlushGPUDirectRDMAWritesTargetCurrentDevice: c_int = 0;
pub const enum_cudaFlushGPUDirectRDMAWritesTarget = c_uint;
pub const cudaDevAttrMaxThreadsPerBlock: c_int = 1;
pub const cudaDevAttrMaxBlockDimX: c_int = 2;
pub const cudaDevAttrMaxBlockDimY: c_int = 3;
pub const cudaDevAttrMaxBlockDimZ: c_int = 4;
pub const cudaDevAttrMaxGridDimX: c_int = 5;
pub const cudaDevAttrMaxGridDimY: c_int = 6;
pub const cudaDevAttrMaxGridDimZ: c_int = 7;
pub const cudaDevAttrMaxSharedMemoryPerBlock: c_int = 8;
pub const cudaDevAttrTotalConstantMemory: c_int = 9;
pub const cudaDevAttrWarpSize: c_int = 10;
pub const cudaDevAttrMaxPitch: c_int = 11;
pub const cudaDevAttrMaxRegistersPerBlock: c_int = 12;
pub const cudaDevAttrClockRate: c_int = 13;
pub const cudaDevAttrTextureAlignment: c_int = 14;
pub const cudaDevAttrGpuOverlap: c_int = 15;
pub const cudaDevAttrMultiProcessorCount: c_int = 16;
pub const cudaDevAttrKernelExecTimeout: c_int = 17;
pub const cudaDevAttrIntegrated: c_int = 18;
pub const cudaDevAttrCanMapHostMemory: c_int = 19;
pub const cudaDevAttrComputeMode: c_int = 20;
pub const cudaDevAttrMaxTexture1DWidth: c_int = 21;
pub const cudaDevAttrMaxTexture2DWidth: c_int = 22;
pub const cudaDevAttrMaxTexture2DHeight: c_int = 23;
pub const cudaDevAttrMaxTexture3DWidth: c_int = 24;
pub const cudaDevAttrMaxTexture3DHeight: c_int = 25;
pub const cudaDevAttrMaxTexture3DDepth: c_int = 26;
pub const cudaDevAttrMaxTexture2DLayeredWidth: c_int = 27;
pub const cudaDevAttrMaxTexture2DLayeredHeight: c_int = 28;
pub const cudaDevAttrMaxTexture2DLayeredLayers: c_int = 29;
pub const cudaDevAttrSurfaceAlignment: c_int = 30;
pub const cudaDevAttrConcurrentKernels: c_int = 31;
pub const cudaDevAttrEccEnabled: c_int = 32;
pub const cudaDevAttrPciBusId: c_int = 33;
pub const cudaDevAttrPciDeviceId: c_int = 34;
pub const cudaDevAttrTccDriver: c_int = 35;
pub const cudaDevAttrMemoryClockRate: c_int = 36;
pub const cudaDevAttrGlobalMemoryBusWidth: c_int = 37;
pub const cudaDevAttrL2CacheSize: c_int = 38;
pub const cudaDevAttrMaxThreadsPerMultiProcessor: c_int = 39;
pub const cudaDevAttrAsyncEngineCount: c_int = 40;
pub const cudaDevAttrUnifiedAddressing: c_int = 41;
pub const cudaDevAttrMaxTexture1DLayeredWidth: c_int = 42;
pub const cudaDevAttrMaxTexture1DLayeredLayers: c_int = 43;
pub const cudaDevAttrMaxTexture2DGatherWidth: c_int = 45;
pub const cudaDevAttrMaxTexture2DGatherHeight: c_int = 46;
pub const cudaDevAttrMaxTexture3DWidthAlt: c_int = 47;
pub const cudaDevAttrMaxTexture3DHeightAlt: c_int = 48;
pub const cudaDevAttrMaxTexture3DDepthAlt: c_int = 49;
pub const cudaDevAttrPciDomainId: c_int = 50;
pub const cudaDevAttrTexturePitchAlignment: c_int = 51;
pub const cudaDevAttrMaxTextureCubemapWidth: c_int = 52;
pub const cudaDevAttrMaxTextureCubemapLayeredWidth: c_int = 53;
pub const cudaDevAttrMaxTextureCubemapLayeredLayers: c_int = 54;
pub const cudaDevAttrMaxSurface1DWidth: c_int = 55;
pub const cudaDevAttrMaxSurface2DWidth: c_int = 56;
pub const cudaDevAttrMaxSurface2DHeight: c_int = 57;
pub const cudaDevAttrMaxSurface3DWidth: c_int = 58;
pub const cudaDevAttrMaxSurface3DHeight: c_int = 59;
pub const cudaDevAttrMaxSurface3DDepth: c_int = 60;
pub const cudaDevAttrMaxSurface1DLayeredWidth: c_int = 61;
pub const cudaDevAttrMaxSurface1DLayeredLayers: c_int = 62;
pub const cudaDevAttrMaxSurface2DLayeredWidth: c_int = 63;
pub const cudaDevAttrMaxSurface2DLayeredHeight: c_int = 64;
pub const cudaDevAttrMaxSurface2DLayeredLayers: c_int = 65;
pub const cudaDevAttrMaxSurfaceCubemapWidth: c_int = 66;
pub const cudaDevAttrMaxSurfaceCubemapLayeredWidth: c_int = 67;
pub const cudaDevAttrMaxSurfaceCubemapLayeredLayers: c_int = 68;
pub const cudaDevAttrMaxTexture1DLinearWidth: c_int = 69;
pub const cudaDevAttrMaxTexture2DLinearWidth: c_int = 70;
pub const cudaDevAttrMaxTexture2DLinearHeight: c_int = 71;
pub const cudaDevAttrMaxTexture2DLinearPitch: c_int = 72;
pub const cudaDevAttrMaxTexture2DMipmappedWidth: c_int = 73;
pub const cudaDevAttrMaxTexture2DMipmappedHeight: c_int = 74;
pub const cudaDevAttrComputeCapabilityMajor: c_int = 75;
pub const cudaDevAttrComputeCapabilityMinor: c_int = 76;
pub const cudaDevAttrMaxTexture1DMipmappedWidth: c_int = 77;
pub const cudaDevAttrStreamPrioritiesSupported: c_int = 78;
pub const cudaDevAttrGlobalL1CacheSupported: c_int = 79;
pub const cudaDevAttrLocalL1CacheSupported: c_int = 80;
pub const cudaDevAttrMaxSharedMemoryPerMultiprocessor: c_int = 81;
pub const cudaDevAttrMaxRegistersPerMultiprocessor: c_int = 82;
pub const cudaDevAttrManagedMemory: c_int = 83;
pub const cudaDevAttrIsMultiGpuBoard: c_int = 84;
pub const cudaDevAttrMultiGpuBoardGroupID: c_int = 85;
pub const cudaDevAttrHostNativeAtomicSupported: c_int = 86;
pub const cudaDevAttrSingleToDoublePrecisionPerfRatio: c_int = 87;
pub const cudaDevAttrPageableMemoryAccess: c_int = 88;
pub const cudaDevAttrConcurrentManagedAccess: c_int = 89;
pub const cudaDevAttrComputePreemptionSupported: c_int = 90;
pub const cudaDevAttrCanUseHostPointerForRegisteredMem: c_int = 91;
pub const cudaDevAttrReserved92: c_int = 92;
pub const cudaDevAttrReserved93: c_int = 93;
pub const cudaDevAttrReserved94: c_int = 94;
pub const cudaDevAttrCooperativeLaunch: c_int = 95;
pub const cudaDevAttrCooperativeMultiDeviceLaunch: c_int = 96;
pub const cudaDevAttrMaxSharedMemoryPerBlockOptin: c_int = 97;
pub const cudaDevAttrCanFlushRemoteWrites: c_int = 98;
pub const cudaDevAttrHostRegisterSupported: c_int = 99;
pub const cudaDevAttrPageableMemoryAccessUsesHostPageTables: c_int = 100;
pub const cudaDevAttrDirectManagedMemAccessFromHost: c_int = 101;
pub const cudaDevAttrMaxBlocksPerMultiprocessor: c_int = 106;
pub const cudaDevAttrMaxPersistingL2CacheSize: c_int = 108;
pub const cudaDevAttrMaxAccessPolicyWindowSize: c_int = 109;
pub const cudaDevAttrReservedSharedMemoryPerBlock: c_int = 111;
pub const cudaDevAttrSparseCudaArraySupported: c_int = 112;
pub const cudaDevAttrHostRegisterReadOnlySupported: c_int = 113;
pub const cudaDevAttrTimelineSemaphoreInteropSupported: c_int = 114;
pub const cudaDevAttrMaxTimelineSemaphoreInteropSupported: c_int = 114;
pub const cudaDevAttrMemoryPoolsSupported: c_int = 115;
pub const cudaDevAttrGPUDirectRDMASupported: c_int = 116;
pub const cudaDevAttrGPUDirectRDMAFlushWritesOptions: c_int = 117;
pub const cudaDevAttrGPUDirectRDMAWritesOrdering: c_int = 118;
pub const cudaDevAttrMemoryPoolSupportedHandleTypes: c_int = 119;
pub const cudaDevAttrClusterLaunch: c_int = 120;
pub const cudaDevAttrDeferredMappingCudaArraySupported: c_int = 121;
pub const cudaDevAttrReserved122: c_int = 122;
pub const cudaDevAttrReserved123: c_int = 123;
pub const cudaDevAttrReserved124: c_int = 124;
pub const cudaDevAttrIpcEventSupport: c_int = 125;
pub const cudaDevAttrMemSyncDomainCount: c_int = 126;
pub const cudaDevAttrReserved127: c_int = 127;
pub const cudaDevAttrReserved128: c_int = 128;
pub const cudaDevAttrReserved129: c_int = 129;
pub const cudaDevAttrNumaConfig: c_int = 130;
pub const cudaDevAttrNumaId: c_int = 131;
pub const cudaDevAttrReserved132: c_int = 132;
pub const cudaDevAttrMpsEnabled: c_int = 133;
pub const cudaDevAttrHostNumaId: c_int = 134;
pub const cudaDevAttrD3D12CigSupported: c_int = 135;
pub const cudaDevAttrGpuPciDeviceId: c_int = 139;
pub const cudaDevAttrGpuPciSubsystemId: c_int = 140;
pub const cudaDevAttrHostNumaMultinodeIpcSupported: c_int = 143;
pub const cudaDevAttrMax: c_int = 144;
pub const enum_cudaDeviceAttr = c_uint;
pub const cudaMemPoolReuseFollowEventDependencies: c_int = 1;
pub const cudaMemPoolReuseAllowOpportunistic: c_int = 2;
pub const cudaMemPoolReuseAllowInternalDependencies: c_int = 3;
pub const cudaMemPoolAttrReleaseThreshold: c_int = 4;
pub const cudaMemPoolAttrReservedMemCurrent: c_int = 5;
pub const cudaMemPoolAttrReservedMemHigh: c_int = 6;
pub const cudaMemPoolAttrUsedMemCurrent: c_int = 7;
pub const cudaMemPoolAttrUsedMemHigh: c_int = 8;
pub const enum_cudaMemPoolAttr = c_uint;
pub const cudaMemLocationTypeInvalid: c_int = 0;
pub const cudaMemLocationTypeDevice: c_int = 1;
pub const cudaMemLocationTypeHost: c_int = 2;
pub const cudaMemLocationTypeHostNuma: c_int = 3;
pub const cudaMemLocationTypeHostNumaCurrent: c_int = 4;
pub const enum_cudaMemLocationType = c_uint;
pub const struct_cudaMemLocation = extern struct {
    type: enum_cudaMemLocationType = @import("std").mem.zeroes(enum_cudaMemLocationType),
    id: c_int = @import("std").mem.zeroes(c_int),
};
pub const cudaMemAccessFlagsProtNone: c_int = 0;
pub const cudaMemAccessFlagsProtRead: c_int = 1;
pub const cudaMemAccessFlagsProtReadWrite: c_int = 3;
pub const enum_cudaMemAccessFlags = c_uint;
pub const struct_cudaMemAccessDesc = extern struct {
    location: struct_cudaMemLocation = @import("std").mem.zeroes(struct_cudaMemLocation),
    flags: enum_cudaMemAccessFlags = @import("std").mem.zeroes(enum_cudaMemAccessFlags),
};
pub const cudaMemAllocationTypeInvalid: c_int = 0;
pub const cudaMemAllocationTypePinned: c_int = 1;
pub const cudaMemAllocationTypeMax: c_int = 2147483647;
pub const enum_cudaMemAllocationType = c_uint;
pub const cudaMemHandleTypeNone: c_int = 0;
pub const cudaMemHandleTypePosixFileDescriptor: c_int = 1;
pub const cudaMemHandleTypeWin32: c_int = 2;
pub const cudaMemHandleTypeWin32Kmt: c_int = 4;
pub const cudaMemHandleTypeFabric: c_int = 8;
pub const enum_cudaMemAllocationHandleType = c_uint;
pub const struct_cudaMemPoolProps = extern struct {
    allocType: enum_cudaMemAllocationType = @import("std").mem.zeroes(enum_cudaMemAllocationType),
    handleTypes: enum_cudaMemAllocationHandleType = @import("std").mem.zeroes(enum_cudaMemAllocationHandleType),
    location: struct_cudaMemLocation = @import("std").mem.zeroes(struct_cudaMemLocation),
    win32SecurityAttributes: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSize: usize = @import("std").mem.zeroes(usize),
    usage: c_ushort = @import("std").mem.zeroes(c_ushort),
    reserved: [54]u8 = @import("std").mem.zeroes([54]u8),
};
pub const struct_cudaMemPoolPtrExportData = extern struct {
    reserved: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const struct_cudaMemAllocNodeParams = extern struct {
    poolProps: struct_cudaMemPoolProps = @import("std").mem.zeroes(struct_cudaMemPoolProps),
    accessDescs: [*c]const struct_cudaMemAccessDesc = @import("std").mem.zeroes([*c]const struct_cudaMemAccessDesc),
    accessDescCount: usize = @import("std").mem.zeroes(usize),
    bytesize: usize = @import("std").mem.zeroes(usize),
    dptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const struct_cudaMemAllocNodeParamsV2 = extern struct {
    poolProps: struct_cudaMemPoolProps = @import("std").mem.zeroes(struct_cudaMemPoolProps),
    accessDescs: [*c]const struct_cudaMemAccessDesc = @import("std").mem.zeroes([*c]const struct_cudaMemAccessDesc),
    accessDescCount: usize = @import("std").mem.zeroes(usize),
    bytesize: usize = @import("std").mem.zeroes(usize),
    dptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const struct_cudaMemFreeNodeParams = extern struct {
    dptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const cudaGraphMemAttrUsedMemCurrent: c_int = 0;
pub const cudaGraphMemAttrUsedMemHigh: c_int = 1;
pub const cudaGraphMemAttrReservedMemCurrent: c_int = 2;
pub const cudaGraphMemAttrReservedMemHigh: c_int = 3;
pub const enum_cudaGraphMemAttributeType = c_uint;
pub const cudaMemcpyFlagDefault: c_int = 0;
pub const cudaMemcpyFlagPreferOverlapWithCompute: c_int = 1;
pub const enum_cudaMemcpyFlags = c_uint;
pub const cudaMemcpySrcAccessOrderInvalid: c_int = 0;
pub const cudaMemcpySrcAccessOrderStream: c_int = 1;
pub const cudaMemcpySrcAccessOrderDuringApiCall: c_int = 2;
pub const cudaMemcpySrcAccessOrderAny: c_int = 3;
pub const cudaMemcpySrcAccessOrderMax: c_int = 2147483647;
pub const enum_cudaMemcpySrcAccessOrder = c_uint;
pub const struct_cudaMemcpyAttributes = extern struct {
    srcAccessOrder: enum_cudaMemcpySrcAccessOrder = @import("std").mem.zeroes(enum_cudaMemcpySrcAccessOrder),
    srcLocHint: struct_cudaMemLocation = @import("std").mem.zeroes(struct_cudaMemLocation),
    dstLocHint: struct_cudaMemLocation = @import("std").mem.zeroes(struct_cudaMemLocation),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const cudaMemcpyOperandTypePointer: c_int = 1;
pub const cudaMemcpyOperandTypeArray: c_int = 2;
pub const cudaMemcpyOperandTypeMax: c_int = 2147483647;
pub const enum_cudaMemcpy3DOperandType = c_uint;
pub const struct_cudaOffset3D = extern struct {
    x: usize = @import("std").mem.zeroes(usize),
    y: usize = @import("std").mem.zeroes(usize),
    z: usize = @import("std").mem.zeroes(usize),
};
const struct_unnamed_52 = extern struct {
    ptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rowLength: usize = @import("std").mem.zeroes(usize),
    layerHeight: usize = @import("std").mem.zeroes(usize),
    locHint: struct_cudaMemLocation = @import("std").mem.zeroes(struct_cudaMemLocation),
};
const struct_unnamed_53 = extern struct {
    array: cudaArray_t = @import("std").mem.zeroes(cudaArray_t),
    offset: struct_cudaOffset3D = @import("std").mem.zeroes(struct_cudaOffset3D),
};
const union_unnamed_51 = extern union {
    ptr: struct_unnamed_52,
    array: struct_unnamed_53,
};
pub const struct_cudaMemcpy3DOperand = extern struct {
    type: enum_cudaMemcpy3DOperandType = @import("std").mem.zeroes(enum_cudaMemcpy3DOperandType),
    op: union_unnamed_51 = @import("std").mem.zeroes(union_unnamed_51),
};
pub const struct_cudaMemcpy3DBatchOp = extern struct {
    src: struct_cudaMemcpy3DOperand = @import("std").mem.zeroes(struct_cudaMemcpy3DOperand),
    dst: struct_cudaMemcpy3DOperand = @import("std").mem.zeroes(struct_cudaMemcpy3DOperand),
    extent: struct_cudaExtent = @import("std").mem.zeroes(struct_cudaExtent),
    srcAccessOrder: enum_cudaMemcpySrcAccessOrder = @import("std").mem.zeroes(enum_cudaMemcpySrcAccessOrder),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const cudaDevP2PAttrPerformanceRank: c_int = 1;
pub const cudaDevP2PAttrAccessSupported: c_int = 2;
pub const cudaDevP2PAttrNativeAtomicSupported: c_int = 3;
pub const cudaDevP2PAttrCudaArrayAccessSupported: c_int = 4;
pub const enum_cudaDeviceP2PAttr = c_uint;
pub const cudaUUID_t = struct_CUuuid_st;
pub const struct_cudaDeviceProp = extern struct {
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    uuid: cudaUUID_t = @import("std").mem.zeroes(cudaUUID_t),
    luid: [8]u8 = @import("std").mem.zeroes([8]u8),
    luidDeviceNodeMask: c_uint = @import("std").mem.zeroes(c_uint),
    totalGlobalMem: usize = @import("std").mem.zeroes(usize),
    sharedMemPerBlock: usize = @import("std").mem.zeroes(usize),
    regsPerBlock: c_int = @import("std").mem.zeroes(c_int),
    warpSize: c_int = @import("std").mem.zeroes(c_int),
    memPitch: usize = @import("std").mem.zeroes(usize),
    maxThreadsPerBlock: c_int = @import("std").mem.zeroes(c_int),
    maxThreadsDim: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxGridSize: [3]c_int = @import("std").mem.zeroes([3]c_int),
    clockRate: c_int = @import("std").mem.zeroes(c_int),
    totalConstMem: usize = @import("std").mem.zeroes(usize),
    major: c_int = @import("std").mem.zeroes(c_int),
    minor: c_int = @import("std").mem.zeroes(c_int),
    textureAlignment: usize = @import("std").mem.zeroes(usize),
    texturePitchAlignment: usize = @import("std").mem.zeroes(usize),
    deviceOverlap: c_int = @import("std").mem.zeroes(c_int),
    multiProcessorCount: c_int = @import("std").mem.zeroes(c_int),
    kernelExecTimeoutEnabled: c_int = @import("std").mem.zeroes(c_int),
    integrated: c_int = @import("std").mem.zeroes(c_int),
    canMapHostMemory: c_int = @import("std").mem.zeroes(c_int),
    computeMode: c_int = @import("std").mem.zeroes(c_int),
    maxTexture1D: c_int = @import("std").mem.zeroes(c_int),
    maxTexture1DMipmap: c_int = @import("std").mem.zeroes(c_int),
    maxTexture1DLinear: c_int = @import("std").mem.zeroes(c_int),
    maxTexture2D: [2]c_int = @import("std").mem.zeroes([2]c_int),
    maxTexture2DMipmap: [2]c_int = @import("std").mem.zeroes([2]c_int),
    maxTexture2DLinear: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxTexture2DGather: [2]c_int = @import("std").mem.zeroes([2]c_int),
    maxTexture3D: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxTexture3DAlt: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxTextureCubemap: c_int = @import("std").mem.zeroes(c_int),
    maxTexture1DLayered: [2]c_int = @import("std").mem.zeroes([2]c_int),
    maxTexture2DLayered: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxTextureCubemapLayered: [2]c_int = @import("std").mem.zeroes([2]c_int),
    maxSurface1D: c_int = @import("std").mem.zeroes(c_int),
    maxSurface2D: [2]c_int = @import("std").mem.zeroes([2]c_int),
    maxSurface3D: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxSurface1DLayered: [2]c_int = @import("std").mem.zeroes([2]c_int),
    maxSurface2DLayered: [3]c_int = @import("std").mem.zeroes([3]c_int),
    maxSurfaceCubemap: c_int = @import("std").mem.zeroes(c_int),
    maxSurfaceCubemapLayered: [2]c_int = @import("std").mem.zeroes([2]c_int),
    surfaceAlignment: usize = @import("std").mem.zeroes(usize),
    concurrentKernels: c_int = @import("std").mem.zeroes(c_int),
    ECCEnabled: c_int = @import("std").mem.zeroes(c_int),
    pciBusID: c_int = @import("std").mem.zeroes(c_int),
    pciDeviceID: c_int = @import("std").mem.zeroes(c_int),
    pciDomainID: c_int = @import("std").mem.zeroes(c_int),
    tccDriver: c_int = @import("std").mem.zeroes(c_int),
    asyncEngineCount: c_int = @import("std").mem.zeroes(c_int),
    unifiedAddressing: c_int = @import("std").mem.zeroes(c_int),
    memoryClockRate: c_int = @import("std").mem.zeroes(c_int),
    memoryBusWidth: c_int = @import("std").mem.zeroes(c_int),
    l2CacheSize: c_int = @import("std").mem.zeroes(c_int),
    persistingL2CacheMaxSize: c_int = @import("std").mem.zeroes(c_int),
    maxThreadsPerMultiProcessor: c_int = @import("std").mem.zeroes(c_int),
    streamPrioritiesSupported: c_int = @import("std").mem.zeroes(c_int),
    globalL1CacheSupported: c_int = @import("std").mem.zeroes(c_int),
    localL1CacheSupported: c_int = @import("std").mem.zeroes(c_int),
    sharedMemPerMultiprocessor: usize = @import("std").mem.zeroes(usize),
    regsPerMultiprocessor: c_int = @import("std").mem.zeroes(c_int),
    managedMemory: c_int = @import("std").mem.zeroes(c_int),
    isMultiGpuBoard: c_int = @import("std").mem.zeroes(c_int),
    multiGpuBoardGroupID: c_int = @import("std").mem.zeroes(c_int),
    hostNativeAtomicSupported: c_int = @import("std").mem.zeroes(c_int),
    singleToDoublePrecisionPerfRatio: c_int = @import("std").mem.zeroes(c_int),
    pageableMemoryAccess: c_int = @import("std").mem.zeroes(c_int),
    concurrentManagedAccess: c_int = @import("std").mem.zeroes(c_int),
    computePreemptionSupported: c_int = @import("std").mem.zeroes(c_int),
    canUseHostPointerForRegisteredMem: c_int = @import("std").mem.zeroes(c_int),
    cooperativeLaunch: c_int = @import("std").mem.zeroes(c_int),
    cooperativeMultiDeviceLaunch: c_int = @import("std").mem.zeroes(c_int),
    sharedMemPerBlockOptin: usize = @import("std").mem.zeroes(usize),
    pageableMemoryAccessUsesHostPageTables: c_int = @import("std").mem.zeroes(c_int),
    directManagedMemAccessFromHost: c_int = @import("std").mem.zeroes(c_int),
    maxBlocksPerMultiProcessor: c_int = @import("std").mem.zeroes(c_int),
    accessPolicyMaxWindowSize: c_int = @import("std").mem.zeroes(c_int),
    reservedSharedMemPerBlock: usize = @import("std").mem.zeroes(usize),
    hostRegisterSupported: c_int = @import("std").mem.zeroes(c_int),
    sparseCudaArraySupported: c_int = @import("std").mem.zeroes(c_int),
    hostRegisterReadOnlySupported: c_int = @import("std").mem.zeroes(c_int),
    timelineSemaphoreInteropSupported: c_int = @import("std").mem.zeroes(c_int),
    memoryPoolsSupported: c_int = @import("std").mem.zeroes(c_int),
    gpuDirectRDMASupported: c_int = @import("std").mem.zeroes(c_int),
    gpuDirectRDMAFlushWritesOptions: c_uint = @import("std").mem.zeroes(c_uint),
    gpuDirectRDMAWritesOrdering: c_int = @import("std").mem.zeroes(c_int),
    memoryPoolSupportedHandleTypes: c_uint = @import("std").mem.zeroes(c_uint),
    deferredMappingCudaArraySupported: c_int = @import("std").mem.zeroes(c_int),
    ipcEventSupported: c_int = @import("std").mem.zeroes(c_int),
    clusterLaunch: c_int = @import("std").mem.zeroes(c_int),
    unifiedFunctionPointers: c_int = @import("std").mem.zeroes(c_int),
    reserved: [63]c_int = @import("std").mem.zeroes([63]c_int),
};
pub const struct_cudaIpcEventHandle_st = extern struct {
    reserved: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const cudaIpcEventHandle_t = struct_cudaIpcEventHandle_st;
pub const struct_cudaIpcMemHandle_st = extern struct {
    reserved: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const cudaIpcMemHandle_t = struct_cudaIpcMemHandle_st;
pub const struct_cudaMemFabricHandle_st = extern struct {
    reserved: [64]u8 = @import("std").mem.zeroes([64]u8),
};
pub const cudaMemFabricHandle_t = struct_cudaMemFabricHandle_st;
pub const cudaExternalMemoryHandleTypeOpaqueFd: c_int = 1;
pub const cudaExternalMemoryHandleTypeOpaqueWin32: c_int = 2;
pub const cudaExternalMemoryHandleTypeOpaqueWin32Kmt: c_int = 3;
pub const cudaExternalMemoryHandleTypeD3D12Heap: c_int = 4;
pub const cudaExternalMemoryHandleTypeD3D12Resource: c_int = 5;
pub const cudaExternalMemoryHandleTypeD3D11Resource: c_int = 6;
pub const cudaExternalMemoryHandleTypeD3D11ResourceKmt: c_int = 7;
pub const cudaExternalMemoryHandleTypeNvSciBuf: c_int = 8;
pub const enum_cudaExternalMemoryHandleType = c_uint;
const struct_unnamed_55 = extern struct {
    handle: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
const union_unnamed_54 = extern union {
    fd: c_int,
    win32: struct_unnamed_55,
    nvSciBufObject: ?*const anyopaque,
};
pub const struct_cudaExternalMemoryHandleDesc = extern struct {
    type: enum_cudaExternalMemoryHandleType = @import("std").mem.zeroes(enum_cudaExternalMemoryHandleType),
    handle: union_unnamed_54 = @import("std").mem.zeroes(union_unnamed_54),
    size: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_cudaExternalMemoryBufferDesc = extern struct {
    offset: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    size: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_cudaExternalMemoryMipmappedArrayDesc = extern struct {
    offset: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    formatDesc: struct_cudaChannelFormatDesc = @import("std").mem.zeroes(struct_cudaChannelFormatDesc),
    extent: struct_cudaExtent = @import("std").mem.zeroes(struct_cudaExtent),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    numLevels: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const cudaExternalSemaphoreHandleTypeOpaqueFd: c_int = 1;
pub const cudaExternalSemaphoreHandleTypeOpaqueWin32: c_int = 2;
pub const cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt: c_int = 3;
pub const cudaExternalSemaphoreHandleTypeD3D12Fence: c_int = 4;
pub const cudaExternalSemaphoreHandleTypeD3D11Fence: c_int = 5;
pub const cudaExternalSemaphoreHandleTypeNvSciSync: c_int = 6;
pub const cudaExternalSemaphoreHandleTypeKeyedMutex: c_int = 7;
pub const cudaExternalSemaphoreHandleTypeKeyedMutexKmt: c_int = 8;
pub const cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd: c_int = 9;
pub const cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32: c_int = 10;
pub const enum_cudaExternalSemaphoreHandleType = c_uint;
const struct_unnamed_57 = extern struct {
    handle: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
const union_unnamed_56 = extern union {
    fd: c_int,
    win32: struct_unnamed_57,
    nvSciSyncObj: ?*const anyopaque,
};
pub const struct_cudaExternalSemaphoreHandleDesc = extern struct {
    type: enum_cudaExternalSemaphoreHandleType = @import("std").mem.zeroes(enum_cudaExternalSemaphoreHandleType),
    handle: union_unnamed_56 = @import("std").mem.zeroes(union_unnamed_56),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_59 = extern struct {
    value: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_60 = extern union {
    fence: ?*anyopaque,
    reserved: c_ulonglong,
};
const struct_unnamed_61 = extern struct {
    key: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const struct_unnamed_58 = extern struct {
    fence: struct_unnamed_59 = @import("std").mem.zeroes(struct_unnamed_59),
    nvSciSync: union_unnamed_60 = @import("std").mem.zeroes(union_unnamed_60),
    keyedMutex: struct_unnamed_61 = @import("std").mem.zeroes(struct_unnamed_61),
};
pub const struct_cudaExternalSemaphoreSignalParams_v1 = extern struct {
    params: struct_unnamed_58 = @import("std").mem.zeroes(struct_unnamed_58),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_63 = extern struct {
    value: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_64 = extern union {
    fence: ?*anyopaque,
    reserved: c_ulonglong,
};
const struct_unnamed_65 = extern struct {
    key: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    timeoutMs: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_62 = extern struct {
    fence: struct_unnamed_63 = @import("std").mem.zeroes(struct_unnamed_63),
    nvSciSync: union_unnamed_64 = @import("std").mem.zeroes(union_unnamed_64),
    keyedMutex: struct_unnamed_65 = @import("std").mem.zeroes(struct_unnamed_65),
};
pub const struct_cudaExternalSemaphoreWaitParams_v1 = extern struct {
    params: struct_unnamed_62 = @import("std").mem.zeroes(struct_unnamed_62),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_67 = extern struct {
    value: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_68 = extern union {
    fence: ?*anyopaque,
    reserved: c_ulonglong,
};
const struct_unnamed_69 = extern struct {
    key: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const struct_unnamed_66 = extern struct {
    fence: struct_unnamed_67 = @import("std").mem.zeroes(struct_unnamed_67),
    nvSciSync: union_unnamed_68 = @import("std").mem.zeroes(union_unnamed_68),
    keyedMutex: struct_unnamed_69 = @import("std").mem.zeroes(struct_unnamed_69),
    reserved: [12]c_uint = @import("std").mem.zeroes([12]c_uint),
};
pub const struct_cudaExternalSemaphoreSignalParams = extern struct {
    params: struct_unnamed_66 = @import("std").mem.zeroes(struct_unnamed_66),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
const struct_unnamed_71 = extern struct {
    value: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_72 = extern union {
    fence: ?*anyopaque,
    reserved: c_ulonglong,
};
const struct_unnamed_73 = extern struct {
    key: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    timeoutMs: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_70 = extern struct {
    fence: struct_unnamed_71 = @import("std").mem.zeroes(struct_unnamed_71),
    nvSciSync: union_unnamed_72 = @import("std").mem.zeroes(union_unnamed_72),
    keyedMutex: struct_unnamed_73 = @import("std").mem.zeroes(struct_unnamed_73),
    reserved: [10]c_uint = @import("std").mem.zeroes([10]c_uint),
};
pub const struct_cudaExternalSemaphoreWaitParams = extern struct {
    params: struct_unnamed_70 = @import("std").mem.zeroes(struct_unnamed_70),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    reserved: [16]c_uint = @import("std").mem.zeroes([16]c_uint),
};
pub const cudaError_t = enum_cudaError;
pub const cudaStream_t = ?*struct_CUstream_st;
pub const cudaEvent_t = ?*struct_CUevent_st;
pub const cudaGraphicsResource_t = ?*struct_cudaGraphicsResource;
pub const struct_CUexternalMemory_st = opaque {};
pub const cudaExternalMemory_t = ?*struct_CUexternalMemory_st;
pub const struct_CUexternalSemaphore_st = opaque {};
pub const cudaExternalSemaphore_t = ?*struct_CUexternalSemaphore_st;
pub const cudaGraph_t = ?*struct_CUgraph_st;
pub const cudaGraphNode_t = ?*struct_CUgraphNode_st;
pub const cudaUserObject_t = ?*struct_CUuserObject_st;
pub const cudaGraphConditionalHandle = c_ulonglong;
pub const cudaFunction_t = ?*struct_CUfunc_st;
pub const cudaKernel_t = ?*struct_CUkern_st;
pub const cudaJitMaxRegisters: c_int = 0;
pub const cudaJitThreadsPerBlock: c_int = 1;
pub const cudaJitWallTime: c_int = 2;
pub const cudaJitInfoLogBuffer: c_int = 3;
pub const cudaJitInfoLogBufferSizeBytes: c_int = 4;
pub const cudaJitErrorLogBuffer: c_int = 5;
pub const cudaJitErrorLogBufferSizeBytes: c_int = 6;
pub const cudaJitOptimizationLevel: c_int = 7;
pub const cudaJitFallbackStrategy: c_int = 10;
pub const cudaJitGenerateDebugInfo: c_int = 11;
pub const cudaJitLogVerbose: c_int = 12;
pub const cudaJitGenerateLineInfo: c_int = 13;
pub const cudaJitCacheMode: c_int = 14;
pub const cudaJitPositionIndependentCode: c_int = 30;
pub const cudaJitMinCtaPerSm: c_int = 31;
pub const cudaJitMaxThreadsPerBlock: c_int = 32;
pub const cudaJitOverrideDirectiveValues: c_int = 33;
pub const enum_cudaJitOption = c_uint;
pub const cudaLibraryHostUniversalFunctionAndDataTable: c_int = 0;
pub const cudaLibraryBinaryIsPreserved: c_int = 1;
pub const enum_cudaLibraryOption = c_uint;
pub const struct_cudalibraryHostUniversalFunctionAndDataTable = extern struct {
    functionTable: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    functionWindowSize: usize = @import("std").mem.zeroes(usize),
    dataTable: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dataWindowSize: usize = @import("std").mem.zeroes(usize),
};
pub const cudaJitCacheOptionNone: c_int = 0;
pub const cudaJitCacheOptionCG: c_int = 1;
pub const cudaJitCacheOptionCA: c_int = 2;
pub const enum_cudaJit_CacheMode = c_uint;
pub const cudaPreferPtx: c_int = 0;
pub const cudaPreferBinary: c_int = 1;
pub const enum_cudaJit_Fallback = c_uint;
pub const cudaLibrary_t = ?*struct_CUlib_st;
pub const cudaMemPool_t = ?*struct_CUmemPoolHandle_st;
pub const cudaCGScopeInvalid: c_int = 0;
pub const cudaCGScopeGrid: c_int = 1;
pub const cudaCGScopeMultiGrid: c_int = 2;
pub const enum_cudaCGScope = c_uint;
pub const struct_cudaLaunchParams = extern struct {
    func: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    gridDim: dim3 = @import("std").mem.zeroes(dim3),
    blockDim: dim3 = @import("std").mem.zeroes(dim3),
    args: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    sharedMem: usize = @import("std").mem.zeroes(usize),
    stream: cudaStream_t = @import("std").mem.zeroes(cudaStream_t),
};
pub const struct_cudaKernelNodeParams = extern struct {
    func: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    gridDim: dim3 = @import("std").mem.zeroes(dim3),
    blockDim: dim3 = @import("std").mem.zeroes(dim3),
    sharedMemBytes: c_uint = @import("std").mem.zeroes(c_uint),
    kernelParams: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    extra: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
};
pub const struct_cudaKernelNodeParamsV2 = extern struct {
    func: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    gridDim: dim3 = @import("std").mem.zeroes(dim3),
    blockDim: dim3 = @import("std").mem.zeroes(dim3),
    sharedMemBytes: c_uint = @import("std").mem.zeroes(c_uint),
    kernelParams: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
    extra: [*c]?*anyopaque = @import("std").mem.zeroes([*c]?*anyopaque),
};
pub const struct_cudaExternalSemaphoreSignalNodeParams = extern struct {
    extSemArray: [*c]cudaExternalSemaphore_t = @import("std").mem.zeroes([*c]cudaExternalSemaphore_t),
    paramsArray: [*c]const struct_cudaExternalSemaphoreSignalParams = @import("std").mem.zeroes([*c]const struct_cudaExternalSemaphoreSignalParams),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_cudaExternalSemaphoreSignalNodeParamsV2 = extern struct {
    extSemArray: [*c]cudaExternalSemaphore_t = @import("std").mem.zeroes([*c]cudaExternalSemaphore_t),
    paramsArray: [*c]const struct_cudaExternalSemaphoreSignalParams = @import("std").mem.zeroes([*c]const struct_cudaExternalSemaphoreSignalParams),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_cudaExternalSemaphoreWaitNodeParams = extern struct {
    extSemArray: [*c]cudaExternalSemaphore_t = @import("std").mem.zeroes([*c]cudaExternalSemaphore_t),
    paramsArray: [*c]const struct_cudaExternalSemaphoreWaitParams = @import("std").mem.zeroes([*c]const struct_cudaExternalSemaphoreWaitParams),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_cudaExternalSemaphoreWaitNodeParamsV2 = extern struct {
    extSemArray: [*c]cudaExternalSemaphore_t = @import("std").mem.zeroes([*c]cudaExternalSemaphore_t),
    paramsArray: [*c]const struct_cudaExternalSemaphoreWaitParams = @import("std").mem.zeroes([*c]const struct_cudaExternalSemaphoreWaitParams),
    numExtSems: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const cudaGraphCondAssignDefault: c_int = 1;
pub const enum_cudaGraphConditionalHandleFlags = c_uint;
pub const cudaGraphCondTypeIf: c_int = 0;
pub const cudaGraphCondTypeWhile: c_int = 1;
pub const cudaGraphCondTypeSwitch: c_int = 2;
pub const enum_cudaGraphConditionalNodeType = c_uint;
pub const struct_cudaConditionalNodeParams = extern struct {
    handle: cudaGraphConditionalHandle = @import("std").mem.zeroes(cudaGraphConditionalHandle),
    type: enum_cudaGraphConditionalNodeType = @import("std").mem.zeroes(enum_cudaGraphConditionalNodeType),
    size: c_uint = @import("std").mem.zeroes(c_uint),
    phGraph_out: [*c]cudaGraph_t = @import("std").mem.zeroes([*c]cudaGraph_t),
};
pub const cudaGraphNodeTypeKernel: c_int = 0;
pub const cudaGraphNodeTypeMemcpy: c_int = 1;
pub const cudaGraphNodeTypeMemset: c_int = 2;
pub const cudaGraphNodeTypeHost: c_int = 3;
pub const cudaGraphNodeTypeGraph: c_int = 4;
pub const cudaGraphNodeTypeEmpty: c_int = 5;
pub const cudaGraphNodeTypeWaitEvent: c_int = 6;
pub const cudaGraphNodeTypeEventRecord: c_int = 7;
pub const cudaGraphNodeTypeExtSemaphoreSignal: c_int = 8;
pub const cudaGraphNodeTypeExtSemaphoreWait: c_int = 9;
pub const cudaGraphNodeTypeMemAlloc: c_int = 10;
pub const cudaGraphNodeTypeMemFree: c_int = 11;
pub const cudaGraphNodeTypeConditional: c_int = 13;
pub const cudaGraphNodeTypeCount: c_int = 14;
pub const enum_cudaGraphNodeType = c_uint;
pub const struct_cudaChildGraphNodeParams = extern struct {
    graph: cudaGraph_t = @import("std").mem.zeroes(cudaGraph_t),
};
pub const struct_cudaEventRecordNodeParams = extern struct {
    event: cudaEvent_t = @import("std").mem.zeroes(cudaEvent_t),
};
pub const struct_cudaEventWaitNodeParams = extern struct {
    event: cudaEvent_t = @import("std").mem.zeroes(cudaEvent_t),
};
const union_unnamed_74 = extern union {
    reserved1: [29]c_longlong,
    kernel: struct_cudaKernelNodeParamsV2,
    memcpy: struct_cudaMemcpyNodeParams,
    memset: struct_cudaMemsetParamsV2,
    host: struct_cudaHostNodeParamsV2,
    graph: struct_cudaChildGraphNodeParams,
    eventWait: struct_cudaEventWaitNodeParams,
    eventRecord: struct_cudaEventRecordNodeParams,
    extSemSignal: struct_cudaExternalSemaphoreSignalNodeParamsV2,
    extSemWait: struct_cudaExternalSemaphoreWaitNodeParamsV2,
    alloc: struct_cudaMemAllocNodeParamsV2,
    free: struct_cudaMemFreeNodeParams,
    conditional: struct_cudaConditionalNodeParams,
};
pub const struct_cudaGraphNodeParams = extern struct {
    type: enum_cudaGraphNodeType = @import("std").mem.zeroes(enum_cudaGraphNodeType),
    reserved0: [3]c_int = @import("std").mem.zeroes([3]c_int),
    unnamed_0: union_unnamed_74 = @import("std").mem.zeroes(union_unnamed_74),
    reserved2: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const cudaGraphDependencyTypeDefault: c_int = 0;
pub const cudaGraphDependencyTypeProgrammatic: c_int = 1;
pub const enum_cudaGraphDependencyType_enum = c_uint;
pub const cudaGraphDependencyType = enum_cudaGraphDependencyType_enum;
pub const struct_cudaGraphEdgeData_st = extern struct {
    from_port: u8 = @import("std").mem.zeroes(u8),
    to_port: u8 = @import("std").mem.zeroes(u8),
    type: u8 = @import("std").mem.zeroes(u8),
    reserved: [5]u8 = @import("std").mem.zeroes([5]u8),
};
pub const cudaGraphEdgeData = struct_cudaGraphEdgeData_st;
pub const cudaGraphExec_t = ?*struct_CUgraphExec_st;
pub const cudaGraphExecUpdateSuccess: c_int = 0;
pub const cudaGraphExecUpdateError: c_int = 1;
pub const cudaGraphExecUpdateErrorTopologyChanged: c_int = 2;
pub const cudaGraphExecUpdateErrorNodeTypeChanged: c_int = 3;
pub const cudaGraphExecUpdateErrorFunctionChanged: c_int = 4;
pub const cudaGraphExecUpdateErrorParametersChanged: c_int = 5;
pub const cudaGraphExecUpdateErrorNotSupported: c_int = 6;
pub const cudaGraphExecUpdateErrorUnsupportedFunctionChange: c_int = 7;
pub const cudaGraphExecUpdateErrorAttributesChanged: c_int = 8;
pub const enum_cudaGraphExecUpdateResult = c_uint;
pub const cudaGraphInstantiateSuccess: c_int = 0;
pub const cudaGraphInstantiateError: c_int = 1;
pub const cudaGraphInstantiateInvalidStructure: c_int = 2;
pub const cudaGraphInstantiateNodeOperationNotSupported: c_int = 3;
pub const cudaGraphInstantiateMultipleDevicesNotSupported: c_int = 4;
pub const cudaGraphInstantiateConditionalHandleUnused: c_int = 5;
pub const enum_cudaGraphInstantiateResult = c_uint;
pub const cudaGraphInstantiateResult = enum_cudaGraphInstantiateResult;
pub const struct_cudaGraphInstantiateParams_st = extern struct {
    flags: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    uploadStream: cudaStream_t = @import("std").mem.zeroes(cudaStream_t),
    errNode_out: cudaGraphNode_t = @import("std").mem.zeroes(cudaGraphNode_t),
    result_out: cudaGraphInstantiateResult = @import("std").mem.zeroes(cudaGraphInstantiateResult),
};
pub const cudaGraphInstantiateParams = struct_cudaGraphInstantiateParams_st;
pub const struct_cudaGraphExecUpdateResultInfo_st = extern struct {
    result: enum_cudaGraphExecUpdateResult = @import("std").mem.zeroes(enum_cudaGraphExecUpdateResult),
    errorNode: cudaGraphNode_t = @import("std").mem.zeroes(cudaGraphNode_t),
    errorFromNode: cudaGraphNode_t = @import("std").mem.zeroes(cudaGraphNode_t),
};
pub const cudaGraphExecUpdateResultInfo = struct_cudaGraphExecUpdateResultInfo_st;
pub const cudaGraphDeviceNode_t = ?*struct_CUgraphDeviceUpdatableNode_st;
pub const cudaGraphKernelNodeFieldInvalid: c_int = 0;
pub const cudaGraphKernelNodeFieldGridDim: c_int = 1;
pub const cudaGraphKernelNodeFieldParam: c_int = 2;
pub const cudaGraphKernelNodeFieldEnabled: c_int = 3;
pub const enum_cudaGraphKernelNodeField = c_uint;
const struct_unnamed_76 = extern struct {
    pValue: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    offset: usize = @import("std").mem.zeroes(usize),
    size: usize = @import("std").mem.zeroes(usize),
};
const union_unnamed_75 = extern union {
    gridDim: dim3,
    param: struct_unnamed_76,
    isEnabled: c_uint,
};
pub const struct_cudaGraphKernelNodeUpdate = extern struct {
    node: cudaGraphDeviceNode_t = @import("std").mem.zeroes(cudaGraphDeviceNode_t),
    field: enum_cudaGraphKernelNodeField = @import("std").mem.zeroes(enum_cudaGraphKernelNodeField),
    updateData: union_unnamed_75 = @import("std").mem.zeroes(union_unnamed_75),
};
pub const cudaEnableDefault: c_int = 0;
pub const cudaEnableLegacyStream: c_int = 1;
pub const cudaEnablePerThreadDefaultStream: c_int = 2;
pub const enum_cudaGetDriverEntryPointFlags = c_uint;
pub const cudaDriverEntryPointSuccess: c_int = 0;
pub const cudaDriverEntryPointSymbolNotFound: c_int = 1;
pub const cudaDriverEntryPointVersionNotSufficent: c_int = 2;
pub const enum_cudaDriverEntryPointQueryResult = c_uint;
pub const cudaGraphDebugDotFlagsVerbose: c_int = 1;
pub const cudaGraphDebugDotFlagsKernelNodeParams: c_int = 4;
pub const cudaGraphDebugDotFlagsMemcpyNodeParams: c_int = 8;
pub const cudaGraphDebugDotFlagsMemsetNodeParams: c_int = 16;
pub const cudaGraphDebugDotFlagsHostNodeParams: c_int = 32;
pub const cudaGraphDebugDotFlagsEventNodeParams: c_int = 64;
pub const cudaGraphDebugDotFlagsExtSemasSignalNodeParams: c_int = 128;
pub const cudaGraphDebugDotFlagsExtSemasWaitNodeParams: c_int = 256;
pub const cudaGraphDebugDotFlagsKernelNodeAttributes: c_int = 512;
pub const cudaGraphDebugDotFlagsHandles: c_int = 1024;
pub const cudaGraphDebugDotFlagsConditionalNodeParams: c_int = 32768;
pub const enum_cudaGraphDebugDotFlags = c_uint;
pub const cudaGraphInstantiateFlagAutoFreeOnLaunch: c_int = 1;
pub const cudaGraphInstantiateFlagUpload: c_int = 2;
pub const cudaGraphInstantiateFlagDeviceLaunch: c_int = 4;
pub const cudaGraphInstantiateFlagUseNodePriority: c_int = 8;
pub const enum_cudaGraphInstantiateFlags = c_uint;
pub const cudaLaunchMemSyncDomainDefault: c_int = 0;
pub const cudaLaunchMemSyncDomainRemote: c_int = 1;
pub const enum_cudaLaunchMemSyncDomain = c_uint;
pub const cudaLaunchMemSyncDomain = enum_cudaLaunchMemSyncDomain;
pub const struct_cudaLaunchMemSyncDomainMap_st = extern struct {
    default_: u8 = @import("std").mem.zeroes(u8),
    remote: u8 = @import("std").mem.zeroes(u8),
};
pub const cudaLaunchMemSyncDomainMap = struct_cudaLaunchMemSyncDomainMap_st;
pub const cudaLaunchAttributeIgnore: c_int = 0;
pub const cudaLaunchAttributeAccessPolicyWindow: c_int = 1;
pub const cudaLaunchAttributeCooperative: c_int = 2;
pub const cudaLaunchAttributeSynchronizationPolicy: c_int = 3;
pub const cudaLaunchAttributeClusterDimension: c_int = 4;
pub const cudaLaunchAttributeClusterSchedulingPolicyPreference: c_int = 5;
pub const cudaLaunchAttributeProgrammaticStreamSerialization: c_int = 6;
pub const cudaLaunchAttributeProgrammaticEvent: c_int = 7;
pub const cudaLaunchAttributePriority: c_int = 8;
pub const cudaLaunchAttributeMemSyncDomainMap: c_int = 9;
pub const cudaLaunchAttributeMemSyncDomain: c_int = 10;
pub const cudaLaunchAttributePreferredClusterDimension: c_int = 11;
pub const cudaLaunchAttributeLaunchCompletionEvent: c_int = 12;
pub const cudaLaunchAttributeDeviceUpdatableKernelNode: c_int = 13;
pub const cudaLaunchAttributePreferredSharedMemoryCarveout: c_int = 14;
pub const enum_cudaLaunchAttributeID = c_uint;
pub const cudaLaunchAttributeID = enum_cudaLaunchAttributeID;
const struct_unnamed_77 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
    z: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_78 = extern struct {
    event: cudaEvent_t = @import("std").mem.zeroes(cudaEvent_t),
    flags: c_int = @import("std").mem.zeroes(c_int),
    triggerAtBlockStart: c_int = @import("std").mem.zeroes(c_int),
};
const struct_unnamed_79 = extern struct {
    x: c_uint = @import("std").mem.zeroes(c_uint),
    y: c_uint = @import("std").mem.zeroes(c_uint),
    z: c_uint = @import("std").mem.zeroes(c_uint),
};
const struct_unnamed_80 = extern struct {
    event: cudaEvent_t = @import("std").mem.zeroes(cudaEvent_t),
    flags: c_int = @import("std").mem.zeroes(c_int),
};
const struct_unnamed_81 = extern struct {
    deviceUpdatable: c_int = @import("std").mem.zeroes(c_int),
    devNode: cudaGraphDeviceNode_t = @import("std").mem.zeroes(cudaGraphDeviceNode_t),
};
pub const union_cudaLaunchAttributeValue = extern union {
    pad: [64]u8,
    accessPolicyWindow: struct_cudaAccessPolicyWindow,
    cooperative: c_int,
    syncPolicy: enum_cudaSynchronizationPolicy,
    clusterDim: struct_unnamed_77,
    clusterSchedulingPolicyPreference: enum_cudaClusterSchedulingPolicy,
    programmaticStreamSerializationAllowed: c_int,
    programmaticEvent: struct_unnamed_78,
    priority: c_int,
    memSyncDomainMap: cudaLaunchMemSyncDomainMap,
    memSyncDomain: cudaLaunchMemSyncDomain,
    preferredClusterDim: struct_unnamed_79,
    launchCompletionEvent: struct_unnamed_80,
    deviceUpdatableKernelNode: struct_unnamed_81,
    sharedMemCarveout: c_uint,
};
pub const cudaLaunchAttributeValue = union_cudaLaunchAttributeValue;
pub const struct_cudaLaunchAttribute_st = extern struct {
    id: cudaLaunchAttributeID = @import("std").mem.zeroes(cudaLaunchAttributeID),
    pad: [4]u8 = @import("std").mem.zeroes([4]u8),
    val: cudaLaunchAttributeValue = @import("std").mem.zeroes(cudaLaunchAttributeValue),
};
pub const cudaLaunchAttribute = struct_cudaLaunchAttribute_st;
pub const struct_cudaLaunchConfig_st = extern struct {
    gridDim: dim3 = @import("std").mem.zeroes(dim3),
    blockDim: dim3 = @import("std").mem.zeroes(dim3),
    dynamicSmemBytes: usize = @import("std").mem.zeroes(usize),
    stream: cudaStream_t = @import("std").mem.zeroes(cudaStream_t),
    attrs: [*c]cudaLaunchAttribute = @import("std").mem.zeroes([*c]cudaLaunchAttribute),
    numAttrs: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const cudaLaunchConfig_t = struct_cudaLaunchConfig_st;
pub const cudaDeviceNumaConfigNone: c_int = 0;
pub const cudaDeviceNumaConfigNumaNode: c_int = 1;
pub const enum_cudaDeviceNumaConfig = c_uint;
pub const struct_cudaAsyncCallbackEntry = opaque {};
pub const cudaAsyncCallbackHandle_t = ?*struct_cudaAsyncCallbackEntry;
pub const cudaAsyncNotificationTypeOverBudget: c_int = 1;
pub const enum_cudaAsyncNotificationType_enum = c_uint;
pub const cudaAsyncNotificationType = enum_cudaAsyncNotificationType_enum;
const struct_unnamed_83 = extern struct {
    bytesOverBudget: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
};
const union_unnamed_82 = extern union {
    overBudget: struct_unnamed_83,
};
pub const struct_cudaAsyncNotificationInfo = extern struct {
    type: cudaAsyncNotificationType = @import("std").mem.zeroes(cudaAsyncNotificationType),
    info: union_unnamed_82 = @import("std").mem.zeroes(union_unnamed_82),
};
pub const cudaAsyncNotificationInfo_t = struct_cudaAsyncNotificationInfo;
pub const cudaAsyncCallback = ?*const fn ([*c]cudaAsyncNotificationInfo_t, ?*anyopaque, cudaAsyncCallbackHandle_t) callconv(.c) void;
pub const cudaBoundaryModeZero: c_int = 0;
pub const cudaBoundaryModeClamp: c_int = 1;
pub const cudaBoundaryModeTrap: c_int = 2;
pub const enum_cudaSurfaceBoundaryMode = c_uint;
pub const cudaFormatModeForced: c_int = 0;
pub const cudaFormatModeAuto: c_int = 1;
pub const enum_cudaSurfaceFormatMode = c_uint;
pub const cudaSurfaceObject_t = c_ulonglong;
pub const cudaAddressModeWrap: c_int = 0;
pub const cudaAddressModeClamp: c_int = 1;
pub const cudaAddressModeMirror: c_int = 2;
pub const cudaAddressModeBorder: c_int = 3;
pub const enum_cudaTextureAddressMode = c_uint;
pub const cudaFilterModePoint: c_int = 0;
pub const cudaFilterModeLinear: c_int = 1;
pub const enum_cudaTextureFilterMode = c_uint;
pub const cudaReadModeElementType: c_int = 0;
pub const cudaReadModeNormalizedFloat: c_int = 1;
pub const enum_cudaTextureReadMode = c_uint;
pub const struct_cudaTextureDesc = extern struct {
    addressMode: [3]enum_cudaTextureAddressMode = @import("std").mem.zeroes([3]enum_cudaTextureAddressMode),
    filterMode: enum_cudaTextureFilterMode = @import("std").mem.zeroes(enum_cudaTextureFilterMode),
    readMode: enum_cudaTextureReadMode = @import("std").mem.zeroes(enum_cudaTextureReadMode),
    sRGB: c_int = @import("std").mem.zeroes(c_int),
    borderColor: [4]f32 = @import("std").mem.zeroes([4]f32),
    normalizedCoords: c_int = @import("std").mem.zeroes(c_int),
    maxAnisotropy: c_uint = @import("std").mem.zeroes(c_uint),
    mipmapFilterMode: enum_cudaTextureFilterMode = @import("std").mem.zeroes(enum_cudaTextureFilterMode),
    mipmapLevelBias: f32 = @import("std").mem.zeroes(f32),
    minMipmapLevelClamp: f32 = @import("std").mem.zeroes(f32),
    maxMipmapLevelClamp: f32 = @import("std").mem.zeroes(f32),
    disableTrilinearOptimization: c_int = @import("std").mem.zeroes(c_int),
    seamlessCubemap: c_int = @import("std").mem.zeroes(c_int),
};
pub const cudaTextureObject_t = c_ulonglong;
pub const CUDA_R_16F: c_int = 2;
pub const CUDA_C_16F: c_int = 6;
pub const CUDA_R_16BF: c_int = 14;
pub const CUDA_C_16BF: c_int = 15;
pub const CUDA_R_32F: c_int = 0;
pub const CUDA_C_32F: c_int = 4;
pub const CUDA_R_64F: c_int = 1;
pub const CUDA_C_64F: c_int = 5;
pub const CUDA_R_4I: c_int = 16;
pub const CUDA_C_4I: c_int = 17;
pub const CUDA_R_4U: c_int = 18;
pub const CUDA_C_4U: c_int = 19;
pub const CUDA_R_8I: c_int = 3;
pub const CUDA_C_8I: c_int = 7;
pub const CUDA_R_8U: c_int = 8;
pub const CUDA_C_8U: c_int = 9;
pub const CUDA_R_16I: c_int = 20;
pub const CUDA_C_16I: c_int = 21;
pub const CUDA_R_16U: c_int = 22;
pub const CUDA_C_16U: c_int = 23;
pub const CUDA_R_32I: c_int = 10;
pub const CUDA_C_32I: c_int = 11;
pub const CUDA_R_32U: c_int = 12;
pub const CUDA_C_32U: c_int = 13;
pub const CUDA_R_64I: c_int = 24;
pub const CUDA_C_64I: c_int = 25;
pub const CUDA_R_64U: c_int = 26;
pub const CUDA_C_64U: c_int = 27;
pub const CUDA_R_8F_E4M3: c_int = 28;
pub const CUDA_R_8F_UE4M3: c_int = 28;
pub const CUDA_R_8F_E5M2: c_int = 29;
pub const CUDA_R_8F_UE8M0: c_int = 30;
pub const CUDA_R_6F_E2M3: c_int = 31;
pub const CUDA_R_6F_E3M2: c_int = 32;
pub const CUDA_R_4F_E2M1: c_int = 33;
pub const enum_cudaDataType_t = c_uint;
pub const cudaDataType = enum_cudaDataType_t;
pub const MAJOR_VERSION: c_int = 0;
pub const MINOR_VERSION: c_int = 1;
pub const PATCH_LEVEL: c_int = 2;
pub const enum_libraryPropertyType_t = c_uint;
pub const libraryPropertyType = enum_libraryPropertyType_t;
pub const cudaDataType_t = enum_cudaDataType_t;
pub const libraryPropertyType_t = enum_libraryPropertyType_t;
pub extern fn cudaDeviceReset() cudaError_t;
pub extern fn cudaDeviceSynchronize() cudaError_t;
pub extern fn cudaDeviceSetLimit(limit: enum_cudaLimit, value: usize) cudaError_t;
pub extern fn cudaDeviceGetLimit(pValue: [*c]usize, limit: enum_cudaLimit) cudaError_t;
pub extern fn cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements: [*c]usize, fmtDesc: [*c]const struct_cudaChannelFormatDesc, device: c_int) cudaError_t;
pub extern fn cudaDeviceGetCacheConfig(pCacheConfig: [*c]enum_cudaFuncCache) cudaError_t;
pub extern fn cudaDeviceGetStreamPriorityRange(leastPriority: [*c]c_int, greatestPriority: [*c]c_int) cudaError_t;
pub extern fn cudaDeviceSetCacheConfig(cacheConfig: enum_cudaFuncCache) cudaError_t;
pub extern fn cudaDeviceGetByPCIBusId(device: [*c]c_int, pciBusId: [*c]const u8) cudaError_t;
pub extern fn cudaDeviceGetPCIBusId(pciBusId: [*c]u8, len: c_int, device: c_int) cudaError_t;
pub extern fn cudaIpcGetEventHandle(handle: [*c]cudaIpcEventHandle_t, event: cudaEvent_t) cudaError_t;
pub extern fn cudaIpcOpenEventHandle(event: [*c]cudaEvent_t, handle: cudaIpcEventHandle_t) cudaError_t;
pub extern fn cudaIpcGetMemHandle(handle: [*c]cudaIpcMemHandle_t, devPtr: ?*anyopaque) cudaError_t;
pub extern fn cudaIpcOpenMemHandle(devPtr: [*c]?*anyopaque, handle: cudaIpcMemHandle_t, flags: c_uint) cudaError_t;
pub extern fn cudaIpcCloseMemHandle(devPtr: ?*anyopaque) cudaError_t;
pub extern fn cudaDeviceFlushGPUDirectRDMAWrites(target: enum_cudaFlushGPUDirectRDMAWritesTarget, scope: enum_cudaFlushGPUDirectRDMAWritesScope) cudaError_t;
pub extern fn cudaDeviceRegisterAsyncNotification(device: c_int, callbackFunc: cudaAsyncCallback, userData: ?*anyopaque, callback: [*c]cudaAsyncCallbackHandle_t) cudaError_t;
pub extern fn cudaDeviceUnregisterAsyncNotification(device: c_int, callback: cudaAsyncCallbackHandle_t) cudaError_t;
pub extern fn cudaDeviceGetSharedMemConfig(pConfig: [*c]enum_cudaSharedMemConfig) cudaError_t;
pub extern fn cudaDeviceSetSharedMemConfig(config: enum_cudaSharedMemConfig) cudaError_t;
pub extern fn cudaThreadExit() cudaError_t;
pub extern fn cudaThreadSynchronize() cudaError_t;
pub extern fn cudaThreadSetLimit(limit: enum_cudaLimit, value: usize) cudaError_t;
pub extern fn cudaThreadGetLimit(pValue: [*c]usize, limit: enum_cudaLimit) cudaError_t;
pub extern fn cudaThreadGetCacheConfig(pCacheConfig: [*c]enum_cudaFuncCache) cudaError_t;
pub extern fn cudaThreadSetCacheConfig(cacheConfig: enum_cudaFuncCache) cudaError_t;
pub extern fn cudaGetLastError() cudaError_t;
pub extern fn cudaPeekAtLastError() cudaError_t;
pub extern fn cudaGetErrorName(@"error": cudaError_t) [*c]const u8;
pub extern fn cudaGetErrorString(@"error": cudaError_t) [*c]const u8;
pub extern fn cudaGetDeviceCount(count: [*c]c_int) cudaError_t;
pub extern fn cudaGetDeviceProperties_v2(prop: [*c]struct_cudaDeviceProp, device: c_int) cudaError_t;
pub extern fn cudaDeviceGetAttribute(value: [*c]c_int, attr: enum_cudaDeviceAttr, device: c_int) cudaError_t;
pub extern fn cudaDeviceGetDefaultMemPool(memPool: [*c]cudaMemPool_t, device: c_int) cudaError_t;
pub extern fn cudaDeviceSetMemPool(device: c_int, memPool: cudaMemPool_t) cudaError_t;
pub extern fn cudaDeviceGetMemPool(memPool: [*c]cudaMemPool_t, device: c_int) cudaError_t;
pub extern fn cudaDeviceGetNvSciSyncAttributes(nvSciSyncAttrList: ?*anyopaque, device: c_int, flags: c_int) cudaError_t;
pub extern fn cudaDeviceGetP2PAttribute(value: [*c]c_int, attr: enum_cudaDeviceP2PAttr, srcDevice: c_int, dstDevice: c_int) cudaError_t;
pub extern fn cudaChooseDevice(device: [*c]c_int, prop: [*c]const struct_cudaDeviceProp) cudaError_t;
pub extern fn cudaInitDevice(device: c_int, deviceFlags: c_uint, flags: c_uint) cudaError_t;
pub extern fn cudaSetDevice(device: c_int) cudaError_t;
pub extern fn cudaGetDevice(device: [*c]c_int) cudaError_t;
pub extern fn cudaSetValidDevices(device_arr: [*c]c_int, len: c_int) cudaError_t;
pub extern fn cudaSetDeviceFlags(flags: c_uint) cudaError_t;
pub extern fn cudaGetDeviceFlags(flags: [*c]c_uint) cudaError_t;
pub extern fn cudaStreamCreate(pStream: [*c]cudaStream_t) cudaError_t;
pub extern fn cudaStreamCreateWithFlags(pStream: [*c]cudaStream_t, flags: c_uint) cudaError_t;
pub extern fn cudaStreamCreateWithPriority(pStream: [*c]cudaStream_t, flags: c_uint, priority: c_int) cudaError_t;
pub extern fn cudaStreamGetPriority(hStream: cudaStream_t, priority: [*c]c_int) cudaError_t;
pub extern fn cudaStreamGetFlags(hStream: cudaStream_t, flags: [*c]c_uint) cudaError_t;
pub extern fn cudaStreamGetId(hStream: cudaStream_t, streamId: [*c]c_ulonglong) cudaError_t;
pub extern fn cudaStreamGetDevice(hStream: cudaStream_t, device: [*c]c_int) cudaError_t;
pub extern fn cudaCtxResetPersistingL2Cache() cudaError_t;
pub extern fn cudaStreamCopyAttributes(dst: cudaStream_t, src: cudaStream_t) cudaError_t;
pub extern fn cudaStreamGetAttribute(hStream: cudaStream_t, attr: cudaLaunchAttributeID, value_out: [*c]cudaLaunchAttributeValue) cudaError_t;
pub extern fn cudaStreamSetAttribute(hStream: cudaStream_t, attr: cudaLaunchAttributeID, value: [*c]const cudaLaunchAttributeValue) cudaError_t;
pub extern fn cudaStreamDestroy(stream: cudaStream_t) cudaError_t;
pub extern fn cudaStreamWaitEvent(stream: cudaStream_t, event: cudaEvent_t, flags: c_uint) cudaError_t;
pub const cudaStreamCallback_t = ?*const fn (cudaStream_t, cudaError_t, ?*anyopaque) callconv(.c) void;
pub extern fn cudaStreamAddCallback(stream: cudaStream_t, callback: cudaStreamCallback_t, userData: ?*anyopaque, flags: c_uint) cudaError_t;
pub extern fn cudaStreamSynchronize(stream: cudaStream_t) cudaError_t;
pub extern fn cudaStreamQuery(stream: cudaStream_t) cudaError_t;
pub extern fn cudaStreamAttachMemAsync(stream: cudaStream_t, devPtr: ?*anyopaque, length: usize, flags: c_uint) cudaError_t;
pub extern fn cudaStreamBeginCapture(stream: cudaStream_t, mode: enum_cudaStreamCaptureMode) cudaError_t;
pub extern fn cudaStreamBeginCaptureToGraph(stream: cudaStream_t, graph: cudaGraph_t, dependencies: [*c]const cudaGraphNode_t, dependencyData: [*c]const cudaGraphEdgeData, numDependencies: usize, mode: enum_cudaStreamCaptureMode) cudaError_t;
pub extern fn cudaThreadExchangeStreamCaptureMode(mode: [*c]enum_cudaStreamCaptureMode) cudaError_t;
pub extern fn cudaStreamEndCapture(stream: cudaStream_t, pGraph: [*c]cudaGraph_t) cudaError_t;
pub extern fn cudaStreamIsCapturing(stream: cudaStream_t, pCaptureStatus: [*c]enum_cudaStreamCaptureStatus) cudaError_t;
pub extern fn cudaStreamGetCaptureInfo_v2(stream: cudaStream_t, captureStatus_out: [*c]enum_cudaStreamCaptureStatus, id_out: [*c]c_ulonglong, graph_out: [*c]cudaGraph_t, dependencies_out: [*c][*c]const cudaGraphNode_t, numDependencies_out: [*c]usize) cudaError_t;
pub extern fn cudaStreamGetCaptureInfo_v3(stream: cudaStream_t, captureStatus_out: [*c]enum_cudaStreamCaptureStatus, id_out: [*c]c_ulonglong, graph_out: [*c]cudaGraph_t, dependencies_out: [*c][*c]const cudaGraphNode_t, edgeData_out: [*c][*c]const cudaGraphEdgeData, numDependencies_out: [*c]usize) cudaError_t;
pub extern fn cudaStreamUpdateCaptureDependencies(stream: cudaStream_t, dependencies: [*c]cudaGraphNode_t, numDependencies: usize, flags: c_uint) cudaError_t;
pub extern fn cudaStreamUpdateCaptureDependencies_v2(stream: cudaStream_t, dependencies: [*c]cudaGraphNode_t, dependencyData: [*c]const cudaGraphEdgeData, numDependencies: usize, flags: c_uint) cudaError_t;
pub extern fn cudaEventCreate(event: [*c]cudaEvent_t) cudaError_t;
pub extern fn cudaEventCreateWithFlags(event: [*c]cudaEvent_t, flags: c_uint) cudaError_t;
pub extern fn cudaEventRecord(event: cudaEvent_t, stream: cudaStream_t) cudaError_t;
pub extern fn cudaEventRecordWithFlags(event: cudaEvent_t, stream: cudaStream_t, flags: c_uint) cudaError_t;
pub extern fn cudaEventQuery(event: cudaEvent_t) cudaError_t;
pub extern fn cudaEventSynchronize(event: cudaEvent_t) cudaError_t;
pub extern fn cudaEventDestroy(event: cudaEvent_t) cudaError_t;
pub extern fn cudaEventElapsedTime(ms: [*c]f32, start: cudaEvent_t, end: cudaEvent_t) cudaError_t;
pub extern fn cudaEventElapsedTime_v2(ms: [*c]f32, start: cudaEvent_t, end: cudaEvent_t) cudaError_t;
pub extern fn cudaImportExternalMemory(extMem_out: [*c]cudaExternalMemory_t, memHandleDesc: [*c]const struct_cudaExternalMemoryHandleDesc) cudaError_t;
pub extern fn cudaExternalMemoryGetMappedBuffer(devPtr: [*c]?*anyopaque, extMem: cudaExternalMemory_t, bufferDesc: [*c]const struct_cudaExternalMemoryBufferDesc) cudaError_t;
pub extern fn cudaExternalMemoryGetMappedMipmappedArray(mipmap: [*c]cudaMipmappedArray_t, extMem: cudaExternalMemory_t, mipmapDesc: [*c]const struct_cudaExternalMemoryMipmappedArrayDesc) cudaError_t;
pub extern fn cudaDestroyExternalMemory(extMem: cudaExternalMemory_t) cudaError_t;
pub extern fn cudaImportExternalSemaphore(extSem_out: [*c]cudaExternalSemaphore_t, semHandleDesc: [*c]const struct_cudaExternalSemaphoreHandleDesc) cudaError_t;
pub extern fn cudaSignalExternalSemaphoresAsync_v2(extSemArray: [*c]const cudaExternalSemaphore_t, paramsArray: [*c]const struct_cudaExternalSemaphoreSignalParams, numExtSems: c_uint, stream: cudaStream_t) cudaError_t;
pub extern fn cudaWaitExternalSemaphoresAsync_v2(extSemArray: [*c]const cudaExternalSemaphore_t, paramsArray: [*c]const struct_cudaExternalSemaphoreWaitParams, numExtSems: c_uint, stream: cudaStream_t) cudaError_t;
pub extern fn cudaDestroyExternalSemaphore(extSem: cudaExternalSemaphore_t) cudaError_t;
pub extern fn cudaLaunchKernel(func: ?*const anyopaque, gridDim: dim3, blockDim: dim3, args: [*c]?*anyopaque, sharedMem: usize, stream: cudaStream_t) cudaError_t;
pub extern fn cudaLaunchKernelExC(config: [*c]const cudaLaunchConfig_t, func: ?*const anyopaque, args: [*c]?*anyopaque) cudaError_t;
pub extern fn cudaLaunchCooperativeKernel(func: ?*const anyopaque, gridDim: dim3, blockDim: dim3, args: [*c]?*anyopaque, sharedMem: usize, stream: cudaStream_t) cudaError_t;
pub extern fn cudaLaunchCooperativeKernelMultiDevice(launchParamsList: [*c]struct_cudaLaunchParams, numDevices: c_uint, flags: c_uint) cudaError_t;
pub extern fn cudaFuncSetCacheConfig(func: ?*const anyopaque, cacheConfig: enum_cudaFuncCache) cudaError_t;
pub extern fn cudaFuncGetAttributes(attr: [*c]struct_cudaFuncAttributes, func: ?*const anyopaque) cudaError_t;
pub extern fn cudaFuncSetAttribute(func: ?*const anyopaque, attr: enum_cudaFuncAttribute, value: c_int) cudaError_t;
pub extern fn cudaFuncGetName(name: [*c][*c]const u8, func: ?*const anyopaque) cudaError_t;
pub extern fn cudaFuncGetParamInfo(func: ?*const anyopaque, paramIndex: usize, paramOffset: [*c]usize, paramSize: [*c]usize) cudaError_t;
pub extern fn cudaSetDoubleForDevice(d: [*c]f64) cudaError_t;
pub extern fn cudaSetDoubleForHost(d: [*c]f64) cudaError_t;
pub extern fn cudaLaunchHostFunc(stream: cudaStream_t, @"fn": cudaHostFn_t, userData: ?*anyopaque) cudaError_t;
pub extern fn cudaFuncSetSharedMemConfig(func: ?*const anyopaque, config: enum_cudaSharedMemConfig) cudaError_t;
pub extern fn cudaOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks: [*c]c_int, func: ?*const anyopaque, blockSize: c_int, dynamicSMemSize: usize) cudaError_t;
pub extern fn cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize: [*c]usize, func: ?*const anyopaque, numBlocks: c_int, blockSize: c_int) cudaError_t;
pub extern fn cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks: [*c]c_int, func: ?*const anyopaque, blockSize: c_int, dynamicSMemSize: usize, flags: c_uint) cudaError_t;
pub extern fn cudaOccupancyMaxPotentialClusterSize(clusterSize: [*c]c_int, func: ?*const anyopaque, launchConfig: [*c]const cudaLaunchConfig_t) cudaError_t;
pub extern fn cudaOccupancyMaxActiveClusters(numClusters: [*c]c_int, func: ?*const anyopaque, launchConfig: [*c]const cudaLaunchConfig_t) cudaError_t;
pub extern fn cudaMallocManaged(devPtr: [*c]?*anyopaque, size: usize, flags: c_uint) cudaError_t;
pub extern fn cudaMalloc(devPtr: [*c]?*anyopaque, size: usize) cudaError_t;
pub extern fn cudaMallocHost(ptr: [*c]?*anyopaque, size: usize) cudaError_t;
pub extern fn cudaMallocPitch(devPtr: [*c]?*anyopaque, pitch: [*c]usize, width: usize, height: usize) cudaError_t;
pub extern fn cudaMallocArray(array: [*c]cudaArray_t, desc: [*c]const struct_cudaChannelFormatDesc, width: usize, height: usize, flags: c_uint) cudaError_t;
pub extern fn cudaFree(devPtr: ?*anyopaque) cudaError_t;
pub extern fn cudaFreeHost(ptr: ?*anyopaque) cudaError_t;
pub extern fn cudaFreeArray(array: cudaArray_t) cudaError_t;
pub extern fn cudaFreeMipmappedArray(mipmappedArray: cudaMipmappedArray_t) cudaError_t;
pub extern fn cudaHostAlloc(pHost: [*c]?*anyopaque, size: usize, flags: c_uint) cudaError_t;
pub extern fn cudaHostRegister(ptr: ?*anyopaque, size: usize, flags: c_uint) cudaError_t;
pub extern fn cudaHostUnregister(ptr: ?*anyopaque) cudaError_t;
pub extern fn cudaHostGetDevicePointer(pDevice: [*c]?*anyopaque, pHost: ?*anyopaque, flags: c_uint) cudaError_t;
pub extern fn cudaHostGetFlags(pFlags: [*c]c_uint, pHost: ?*anyopaque) cudaError_t;
pub extern fn cudaMalloc3D(pitchedDevPtr: [*c]struct_cudaPitchedPtr, extent: struct_cudaExtent) cudaError_t;
pub extern fn cudaMalloc3DArray(array: [*c]cudaArray_t, desc: [*c]const struct_cudaChannelFormatDesc, extent: struct_cudaExtent, flags: c_uint) cudaError_t;
pub extern fn cudaMallocMipmappedArray(mipmappedArray: [*c]cudaMipmappedArray_t, desc: [*c]const struct_cudaChannelFormatDesc, extent: struct_cudaExtent, numLevels: c_uint, flags: c_uint) cudaError_t;
pub extern fn cudaGetMipmappedArrayLevel(levelArray: [*c]cudaArray_t, mipmappedArray: cudaMipmappedArray_const_t, level: c_uint) cudaError_t;
pub extern fn cudaMemcpy3D(p: [*c]const struct_cudaMemcpy3DParms) cudaError_t;
pub extern fn cudaMemcpy3DPeer(p: [*c]const struct_cudaMemcpy3DPeerParms) cudaError_t;
pub extern fn cudaMemcpy3DAsync(p: [*c]const struct_cudaMemcpy3DParms, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpy3DPeerAsync(p: [*c]const struct_cudaMemcpy3DPeerParms, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemGetInfo(free: [*c]usize, total: [*c]usize) cudaError_t;
pub extern fn cudaArrayGetInfo(desc: [*c]struct_cudaChannelFormatDesc, extent: [*c]struct_cudaExtent, flags: [*c]c_uint, array: cudaArray_t) cudaError_t;
pub extern fn cudaArrayGetPlane(pPlaneArray: [*c]cudaArray_t, hArray: cudaArray_t, planeIdx: c_uint) cudaError_t;
pub extern fn cudaArrayGetMemoryRequirements(memoryRequirements: [*c]struct_cudaArrayMemoryRequirements, array: cudaArray_t, device: c_int) cudaError_t;
pub extern fn cudaMipmappedArrayGetMemoryRequirements(memoryRequirements: [*c]struct_cudaArrayMemoryRequirements, mipmap: cudaMipmappedArray_t, device: c_int) cudaError_t;
pub extern fn cudaArrayGetSparseProperties(sparseProperties: [*c]struct_cudaArraySparseProperties, array: cudaArray_t) cudaError_t;
pub extern fn cudaMipmappedArrayGetSparseProperties(sparseProperties: [*c]struct_cudaArraySparseProperties, mipmap: cudaMipmappedArray_t) cudaError_t;
pub extern fn cudaMemcpy(dst: ?*anyopaque, src: ?*const anyopaque, count: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpyPeer(dst: ?*anyopaque, dstDevice: c_int, src: ?*const anyopaque, srcDevice: c_int, count: usize) cudaError_t;
pub extern fn cudaMemcpy2D(dst: ?*anyopaque, dpitch: usize, src: ?*const anyopaque, spitch: usize, width: usize, height: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpy2DToArray(dst: cudaArray_t, wOffset: usize, hOffset: usize, src: ?*const anyopaque, spitch: usize, width: usize, height: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpy2DFromArray(dst: ?*anyopaque, dpitch: usize, src: cudaArray_const_t, wOffset: usize, hOffset: usize, width: usize, height: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpy2DArrayToArray(dst: cudaArray_t, wOffsetDst: usize, hOffsetDst: usize, src: cudaArray_const_t, wOffsetSrc: usize, hOffsetSrc: usize, width: usize, height: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpyToSymbol(symbol: ?*const anyopaque, src: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpyFromSymbol(dst: ?*anyopaque, symbol: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpyAsync(dst: ?*anyopaque, src: ?*const anyopaque, count: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpyPeerAsync(dst: ?*anyopaque, dstDevice: c_int, src: ?*const anyopaque, srcDevice: c_int, count: usize, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpyBatchAsync(dsts: [*c]?*anyopaque, srcs: [*c]?*anyopaque, sizes: [*c]usize, count: usize, attrs: [*c]struct_cudaMemcpyAttributes, attrsIdxs: [*c]usize, numAttrs: usize, failIdx: [*c]usize, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpy3DBatchAsync(numOps: usize, opList: [*c]struct_cudaMemcpy3DBatchOp, failIdx: [*c]usize, flags: c_ulonglong, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpy2DAsync(dst: ?*anyopaque, dpitch: usize, src: ?*const anyopaque, spitch: usize, width: usize, height: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpy2DToArrayAsync(dst: cudaArray_t, wOffset: usize, hOffset: usize, src: ?*const anyopaque, spitch: usize, width: usize, height: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpy2DFromArrayAsync(dst: ?*anyopaque, dpitch: usize, src: cudaArray_const_t, wOffset: usize, hOffset: usize, width: usize, height: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpyToSymbolAsync(symbol: ?*const anyopaque, src: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpyFromSymbolAsync(dst: ?*anyopaque, symbol: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemset(devPtr: ?*anyopaque, value: c_int, count: usize) cudaError_t;
pub extern fn cudaMemset2D(devPtr: ?*anyopaque, pitch: usize, value: c_int, width: usize, height: usize) cudaError_t;
pub extern fn cudaMemset3D(pitchedDevPtr: struct_cudaPitchedPtr, value: c_int, extent: struct_cudaExtent) cudaError_t;
pub extern fn cudaMemsetAsync(devPtr: ?*anyopaque, value: c_int, count: usize, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemset2DAsync(devPtr: ?*anyopaque, pitch: usize, value: c_int, width: usize, height: usize, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemset3DAsync(pitchedDevPtr: struct_cudaPitchedPtr, value: c_int, extent: struct_cudaExtent, stream: cudaStream_t) cudaError_t;
pub extern fn cudaGetSymbolAddress(devPtr: [*c]?*anyopaque, symbol: ?*const anyopaque) cudaError_t;
pub extern fn cudaGetSymbolSize(size: [*c]usize, symbol: ?*const anyopaque) cudaError_t;
pub extern fn cudaMemPrefetchAsync(devPtr: ?*const anyopaque, count: usize, dstDevice: c_int, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemPrefetchAsync_v2(devPtr: ?*const anyopaque, count: usize, location: struct_cudaMemLocation, flags: c_uint, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemAdvise(devPtr: ?*const anyopaque, count: usize, advice: enum_cudaMemoryAdvise, device: c_int) cudaError_t;
pub extern fn cudaMemAdvise_v2(devPtr: ?*const anyopaque, count: usize, advice: enum_cudaMemoryAdvise, location: struct_cudaMemLocation) cudaError_t;
pub extern fn cudaMemRangeGetAttribute(data: ?*anyopaque, dataSize: usize, attribute: enum_cudaMemRangeAttribute, devPtr: ?*const anyopaque, count: usize) cudaError_t;
pub extern fn cudaMemRangeGetAttributes(data: [*c]?*anyopaque, dataSizes: [*c]usize, attributes: [*c]enum_cudaMemRangeAttribute, numAttributes: usize, devPtr: ?*const anyopaque, count: usize) cudaError_t;
pub extern fn cudaMemcpyToArray(dst: cudaArray_t, wOffset: usize, hOffset: usize, src: ?*const anyopaque, count: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpyFromArray(dst: ?*anyopaque, src: cudaArray_const_t, wOffset: usize, hOffset: usize, count: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpyArrayToArray(dst: cudaArray_t, wOffsetDst: usize, hOffsetDst: usize, src: cudaArray_const_t, wOffsetSrc: usize, hOffsetSrc: usize, count: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaMemcpyToArrayAsync(dst: cudaArray_t, wOffset: usize, hOffset: usize, src: ?*const anyopaque, count: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemcpyFromArrayAsync(dst: ?*anyopaque, src: cudaArray_const_t, wOffset: usize, hOffset: usize, count: usize, kind: enum_cudaMemcpyKind, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMallocAsync(devPtr: [*c]?*anyopaque, size: usize, hStream: cudaStream_t) cudaError_t;
pub extern fn cudaFreeAsync(devPtr: ?*anyopaque, hStream: cudaStream_t) cudaError_t;
pub extern fn cudaMemPoolTrimTo(memPool: cudaMemPool_t, minBytesToKeep: usize) cudaError_t;
pub extern fn cudaMemPoolSetAttribute(memPool: cudaMemPool_t, attr: enum_cudaMemPoolAttr, value: ?*anyopaque) cudaError_t;
pub extern fn cudaMemPoolGetAttribute(memPool: cudaMemPool_t, attr: enum_cudaMemPoolAttr, value: ?*anyopaque) cudaError_t;
pub extern fn cudaMemPoolSetAccess(memPool: cudaMemPool_t, descList: [*c]const struct_cudaMemAccessDesc, count: usize) cudaError_t;
pub extern fn cudaMemPoolGetAccess(flags: [*c]enum_cudaMemAccessFlags, memPool: cudaMemPool_t, location: [*c]struct_cudaMemLocation) cudaError_t;
pub extern fn cudaMemPoolCreate(memPool: [*c]cudaMemPool_t, poolProps: [*c]const struct_cudaMemPoolProps) cudaError_t;
pub extern fn cudaMemPoolDestroy(memPool: cudaMemPool_t) cudaError_t;
pub extern fn cudaMallocFromPoolAsync(ptr: [*c]?*anyopaque, size: usize, memPool: cudaMemPool_t, stream: cudaStream_t) cudaError_t;
pub extern fn cudaMemPoolExportToShareableHandle(shareableHandle: ?*anyopaque, memPool: cudaMemPool_t, handleType: enum_cudaMemAllocationHandleType, flags: c_uint) cudaError_t;
pub extern fn cudaMemPoolImportFromShareableHandle(memPool: [*c]cudaMemPool_t, shareableHandle: ?*anyopaque, handleType: enum_cudaMemAllocationHandleType, flags: c_uint) cudaError_t;
pub extern fn cudaMemPoolExportPointer(exportData: [*c]struct_cudaMemPoolPtrExportData, ptr: ?*anyopaque) cudaError_t;
pub extern fn cudaMemPoolImportPointer(ptr: [*c]?*anyopaque, memPool: cudaMemPool_t, exportData: [*c]struct_cudaMemPoolPtrExportData) cudaError_t;
pub extern fn cudaPointerGetAttributes(attributes: [*c]struct_cudaPointerAttributes, ptr: ?*const anyopaque) cudaError_t;
pub extern fn cudaDeviceCanAccessPeer(canAccessPeer: [*c]c_int, device: c_int, peerDevice: c_int) cudaError_t;
pub extern fn cudaDeviceEnablePeerAccess(peerDevice: c_int, flags: c_uint) cudaError_t;
pub extern fn cudaDeviceDisablePeerAccess(peerDevice: c_int) cudaError_t;
pub extern fn cudaGraphicsUnregisterResource(resource: cudaGraphicsResource_t) cudaError_t;
pub extern fn cudaGraphicsResourceSetMapFlags(resource: cudaGraphicsResource_t, flags: c_uint) cudaError_t;
pub extern fn cudaGraphicsMapResources(count: c_int, resources: [*c]cudaGraphicsResource_t, stream: cudaStream_t) cudaError_t;
pub extern fn cudaGraphicsUnmapResources(count: c_int, resources: [*c]cudaGraphicsResource_t, stream: cudaStream_t) cudaError_t;
pub extern fn cudaGraphicsResourceGetMappedPointer(devPtr: [*c]?*anyopaque, size: [*c]usize, resource: cudaGraphicsResource_t) cudaError_t;
pub extern fn cudaGraphicsSubResourceGetMappedArray(array: [*c]cudaArray_t, resource: cudaGraphicsResource_t, arrayIndex: c_uint, mipLevel: c_uint) cudaError_t;
pub extern fn cudaGraphicsResourceGetMappedMipmappedArray(mipmappedArray: [*c]cudaMipmappedArray_t, resource: cudaGraphicsResource_t) cudaError_t;
pub extern fn cudaGetChannelDesc(desc: [*c]struct_cudaChannelFormatDesc, array: cudaArray_const_t) cudaError_t;
pub extern fn cudaCreateChannelDesc(x: c_int, y: c_int, z: c_int, w: c_int, f: enum_cudaChannelFormatKind) struct_cudaChannelFormatDesc;
pub extern fn cudaCreateTextureObject(pTexObject: [*c]cudaTextureObject_t, pResDesc: [*c]const struct_cudaResourceDesc, pTexDesc: [*c]const struct_cudaTextureDesc, pResViewDesc: [*c]const struct_cudaResourceViewDesc) cudaError_t;
pub extern fn cudaDestroyTextureObject(texObject: cudaTextureObject_t) cudaError_t;
pub extern fn cudaGetTextureObjectResourceDesc(pResDesc: [*c]struct_cudaResourceDesc, texObject: cudaTextureObject_t) cudaError_t;
pub extern fn cudaGetTextureObjectTextureDesc(pTexDesc: [*c]struct_cudaTextureDesc, texObject: cudaTextureObject_t) cudaError_t;
pub extern fn cudaGetTextureObjectResourceViewDesc(pResViewDesc: [*c]struct_cudaResourceViewDesc, texObject: cudaTextureObject_t) cudaError_t;
pub extern fn cudaCreateSurfaceObject(pSurfObject: [*c]cudaSurfaceObject_t, pResDesc: [*c]const struct_cudaResourceDesc) cudaError_t;
pub extern fn cudaDestroySurfaceObject(surfObject: cudaSurfaceObject_t) cudaError_t;
pub extern fn cudaGetSurfaceObjectResourceDesc(pResDesc: [*c]struct_cudaResourceDesc, surfObject: cudaSurfaceObject_t) cudaError_t;
pub extern fn cudaDriverGetVersion(driverVersion: [*c]c_int) cudaError_t;
pub extern fn cudaRuntimeGetVersion(runtimeVersion: [*c]c_int) cudaError_t;
pub extern fn cudaGraphCreate(pGraph: [*c]cudaGraph_t, flags: c_uint) cudaError_t;
pub extern fn cudaGraphAddKernelNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, pNodeParams: [*c]const struct_cudaKernelNodeParams) cudaError_t;
pub extern fn cudaGraphKernelNodeGetParams(node: cudaGraphNode_t, pNodeParams: [*c]struct_cudaKernelNodeParams) cudaError_t;
pub extern fn cudaGraphKernelNodeSetParams(node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaKernelNodeParams) cudaError_t;
pub extern fn cudaGraphKernelNodeCopyAttributes(hSrc: cudaGraphNode_t, hDst: cudaGraphNode_t) cudaError_t;
pub extern fn cudaGraphKernelNodeGetAttribute(hNode: cudaGraphNode_t, attr: cudaLaunchAttributeID, value_out: [*c]cudaLaunchAttributeValue) cudaError_t;
pub extern fn cudaGraphKernelNodeSetAttribute(hNode: cudaGraphNode_t, attr: cudaLaunchAttributeID, value: [*c]const cudaLaunchAttributeValue) cudaError_t;
pub extern fn cudaGraphAddMemcpyNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, pCopyParams: [*c]const struct_cudaMemcpy3DParms) cudaError_t;
pub extern fn cudaGraphAddMemcpyNodeToSymbol(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, symbol: ?*const anyopaque, src: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphAddMemcpyNodeFromSymbol(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, dst: ?*anyopaque, symbol: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphAddMemcpyNode1D(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, dst: ?*anyopaque, src: ?*const anyopaque, count: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphMemcpyNodeGetParams(node: cudaGraphNode_t, pNodeParams: [*c]struct_cudaMemcpy3DParms) cudaError_t;
pub extern fn cudaGraphMemcpyNodeSetParams(node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaMemcpy3DParms) cudaError_t;
pub extern fn cudaGraphMemcpyNodeSetParamsToSymbol(node: cudaGraphNode_t, symbol: ?*const anyopaque, src: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphMemcpyNodeSetParamsFromSymbol(node: cudaGraphNode_t, dst: ?*anyopaque, symbol: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphMemcpyNodeSetParams1D(node: cudaGraphNode_t, dst: ?*anyopaque, src: ?*const anyopaque, count: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphAddMemsetNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, pMemsetParams: [*c]const struct_cudaMemsetParams) cudaError_t;
pub extern fn cudaGraphMemsetNodeGetParams(node: cudaGraphNode_t, pNodeParams: [*c]struct_cudaMemsetParams) cudaError_t;
pub extern fn cudaGraphMemsetNodeSetParams(node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaMemsetParams) cudaError_t;
pub extern fn cudaGraphAddHostNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, pNodeParams: [*c]const struct_cudaHostNodeParams) cudaError_t;
pub extern fn cudaGraphHostNodeGetParams(node: cudaGraphNode_t, pNodeParams: [*c]struct_cudaHostNodeParams) cudaError_t;
pub extern fn cudaGraphHostNodeSetParams(node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaHostNodeParams) cudaError_t;
pub extern fn cudaGraphAddChildGraphNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, childGraph: cudaGraph_t) cudaError_t;
pub extern fn cudaGraphChildGraphNodeGetGraph(node: cudaGraphNode_t, pGraph: [*c]cudaGraph_t) cudaError_t;
pub extern fn cudaGraphAddEmptyNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize) cudaError_t;
pub extern fn cudaGraphAddEventRecordNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, event: cudaEvent_t) cudaError_t;
pub extern fn cudaGraphEventRecordNodeGetEvent(node: cudaGraphNode_t, event_out: [*c]cudaEvent_t) cudaError_t;
pub extern fn cudaGraphEventRecordNodeSetEvent(node: cudaGraphNode_t, event: cudaEvent_t) cudaError_t;
pub extern fn cudaGraphAddEventWaitNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, event: cudaEvent_t) cudaError_t;
pub extern fn cudaGraphEventWaitNodeGetEvent(node: cudaGraphNode_t, event_out: [*c]cudaEvent_t) cudaError_t;
pub extern fn cudaGraphEventWaitNodeSetEvent(node: cudaGraphNode_t, event: cudaEvent_t) cudaError_t;
pub extern fn cudaGraphAddExternalSemaphoresSignalNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, nodeParams: [*c]const struct_cudaExternalSemaphoreSignalNodeParams) cudaError_t;
pub extern fn cudaGraphExternalSemaphoresSignalNodeGetParams(hNode: cudaGraphNode_t, params_out: [*c]struct_cudaExternalSemaphoreSignalNodeParams) cudaError_t;
pub extern fn cudaGraphExternalSemaphoresSignalNodeSetParams(hNode: cudaGraphNode_t, nodeParams: [*c]const struct_cudaExternalSemaphoreSignalNodeParams) cudaError_t;
pub extern fn cudaGraphAddExternalSemaphoresWaitNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, nodeParams: [*c]const struct_cudaExternalSemaphoreWaitNodeParams) cudaError_t;
pub extern fn cudaGraphExternalSemaphoresWaitNodeGetParams(hNode: cudaGraphNode_t, params_out: [*c]struct_cudaExternalSemaphoreWaitNodeParams) cudaError_t;
pub extern fn cudaGraphExternalSemaphoresWaitNodeSetParams(hNode: cudaGraphNode_t, nodeParams: [*c]const struct_cudaExternalSemaphoreWaitNodeParams) cudaError_t;
pub extern fn cudaGraphAddMemAllocNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, nodeParams: [*c]struct_cudaMemAllocNodeParams) cudaError_t;
pub extern fn cudaGraphMemAllocNodeGetParams(node: cudaGraphNode_t, params_out: [*c]struct_cudaMemAllocNodeParams) cudaError_t;
pub extern fn cudaGraphAddMemFreeNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, dptr: ?*anyopaque) cudaError_t;
pub extern fn cudaGraphMemFreeNodeGetParams(node: cudaGraphNode_t, dptr_out: ?*anyopaque) cudaError_t;
pub extern fn cudaDeviceGraphMemTrim(device: c_int) cudaError_t;
pub extern fn cudaDeviceGetGraphMemAttribute(device: c_int, attr: enum_cudaGraphMemAttributeType, value: ?*anyopaque) cudaError_t;
pub extern fn cudaDeviceSetGraphMemAttribute(device: c_int, attr: enum_cudaGraphMemAttributeType, value: ?*anyopaque) cudaError_t;
pub extern fn cudaGraphClone(pGraphClone: [*c]cudaGraph_t, originalGraph: cudaGraph_t) cudaError_t;
pub extern fn cudaGraphNodeFindInClone(pNode: [*c]cudaGraphNode_t, originalNode: cudaGraphNode_t, clonedGraph: cudaGraph_t) cudaError_t;
pub extern fn cudaGraphNodeGetType(node: cudaGraphNode_t, pType: [*c]enum_cudaGraphNodeType) cudaError_t;
pub extern fn cudaGraphGetNodes(graph: cudaGraph_t, nodes: [*c]cudaGraphNode_t, numNodes: [*c]usize) cudaError_t;
pub extern fn cudaGraphGetRootNodes(graph: cudaGraph_t, pRootNodes: [*c]cudaGraphNode_t, pNumRootNodes: [*c]usize) cudaError_t;
pub extern fn cudaGraphGetEdges(graph: cudaGraph_t, from: [*c]cudaGraphNode_t, to: [*c]cudaGraphNode_t, numEdges: [*c]usize) cudaError_t;
pub extern fn cudaGraphGetEdges_v2(graph: cudaGraph_t, from: [*c]cudaGraphNode_t, to: [*c]cudaGraphNode_t, edgeData: [*c]cudaGraphEdgeData, numEdges: [*c]usize) cudaError_t;
pub extern fn cudaGraphNodeGetDependencies(node: cudaGraphNode_t, pDependencies: [*c]cudaGraphNode_t, pNumDependencies: [*c]usize) cudaError_t;
pub extern fn cudaGraphNodeGetDependencies_v2(node: cudaGraphNode_t, pDependencies: [*c]cudaGraphNode_t, edgeData: [*c]cudaGraphEdgeData, pNumDependencies: [*c]usize) cudaError_t;
pub extern fn cudaGraphNodeGetDependentNodes(node: cudaGraphNode_t, pDependentNodes: [*c]cudaGraphNode_t, pNumDependentNodes: [*c]usize) cudaError_t;
pub extern fn cudaGraphNodeGetDependentNodes_v2(node: cudaGraphNode_t, pDependentNodes: [*c]cudaGraphNode_t, edgeData: [*c]cudaGraphEdgeData, pNumDependentNodes: [*c]usize) cudaError_t;
pub extern fn cudaGraphAddDependencies(graph: cudaGraph_t, from: [*c]const cudaGraphNode_t, to: [*c]const cudaGraphNode_t, numDependencies: usize) cudaError_t;
pub extern fn cudaGraphAddDependencies_v2(graph: cudaGraph_t, from: [*c]const cudaGraphNode_t, to: [*c]const cudaGraphNode_t, edgeData: [*c]const cudaGraphEdgeData, numDependencies: usize) cudaError_t;
pub extern fn cudaGraphRemoveDependencies(graph: cudaGraph_t, from: [*c]const cudaGraphNode_t, to: [*c]const cudaGraphNode_t, numDependencies: usize) cudaError_t;
pub extern fn cudaGraphRemoveDependencies_v2(graph: cudaGraph_t, from: [*c]const cudaGraphNode_t, to: [*c]const cudaGraphNode_t, edgeData: [*c]const cudaGraphEdgeData, numDependencies: usize) cudaError_t;
pub extern fn cudaGraphDestroyNode(node: cudaGraphNode_t) cudaError_t;
pub extern fn cudaGraphInstantiate(pGraphExec: [*c]cudaGraphExec_t, graph: cudaGraph_t, flags: c_ulonglong) cudaError_t;
pub extern fn cudaGraphInstantiateWithFlags(pGraphExec: [*c]cudaGraphExec_t, graph: cudaGraph_t, flags: c_ulonglong) cudaError_t;
pub extern fn cudaGraphInstantiateWithParams(pGraphExec: [*c]cudaGraphExec_t, graph: cudaGraph_t, instantiateParams: [*c]cudaGraphInstantiateParams) cudaError_t;
pub extern fn cudaGraphExecGetFlags(graphExec: cudaGraphExec_t, flags: [*c]c_ulonglong) cudaError_t;
pub extern fn cudaGraphExecKernelNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaKernelNodeParams) cudaError_t;
pub extern fn cudaGraphExecMemcpyNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaMemcpy3DParms) cudaError_t;
pub extern fn cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, symbol: ?*const anyopaque, src: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, dst: ?*anyopaque, symbol: ?*const anyopaque, count: usize, offset: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphExecMemcpyNodeSetParams1D(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, dst: ?*anyopaque, src: ?*const anyopaque, count: usize, kind: enum_cudaMemcpyKind) cudaError_t;
pub extern fn cudaGraphExecMemsetNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaMemsetParams) cudaError_t;
pub extern fn cudaGraphExecHostNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: [*c]const struct_cudaHostNodeParams) cudaError_t;
pub extern fn cudaGraphExecChildGraphNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, childGraph: cudaGraph_t) cudaError_t;
pub extern fn cudaGraphExecEventRecordNodeSetEvent(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, event: cudaEvent_t) cudaError_t;
pub extern fn cudaGraphExecEventWaitNodeSetEvent(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, event: cudaEvent_t) cudaError_t;
pub extern fn cudaGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, nodeParams: [*c]const struct_cudaExternalSemaphoreSignalNodeParams) cudaError_t;
pub extern fn cudaGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, nodeParams: [*c]const struct_cudaExternalSemaphoreWaitNodeParams) cudaError_t;
pub extern fn cudaGraphNodeSetEnabled(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, isEnabled: c_uint) cudaError_t;
pub extern fn cudaGraphNodeGetEnabled(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, isEnabled: [*c]c_uint) cudaError_t;
pub extern fn cudaGraphExecUpdate(hGraphExec: cudaGraphExec_t, hGraph: cudaGraph_t, resultInfo: [*c]cudaGraphExecUpdateResultInfo) cudaError_t;
pub extern fn cudaGraphUpload(graphExec: cudaGraphExec_t, stream: cudaStream_t) cudaError_t;
pub extern fn cudaGraphLaunch(graphExec: cudaGraphExec_t, stream: cudaStream_t) cudaError_t;
pub extern fn cudaGraphExecDestroy(graphExec: cudaGraphExec_t) cudaError_t;
pub extern fn cudaGraphDestroy(graph: cudaGraph_t) cudaError_t;
pub extern fn cudaGraphDebugDotPrint(graph: cudaGraph_t, path: [*c]const u8, flags: c_uint) cudaError_t;
pub extern fn cudaUserObjectCreate(object_out: [*c]cudaUserObject_t, ptr: ?*anyopaque, destroy: cudaHostFn_t, initialRefcount: c_uint, flags: c_uint) cudaError_t;
pub extern fn cudaUserObjectRetain(object: cudaUserObject_t, count: c_uint) cudaError_t;
pub extern fn cudaUserObjectRelease(object: cudaUserObject_t, count: c_uint) cudaError_t;
pub extern fn cudaGraphRetainUserObject(graph: cudaGraph_t, object: cudaUserObject_t, count: c_uint, flags: c_uint) cudaError_t;
pub extern fn cudaGraphReleaseUserObject(graph: cudaGraph_t, object: cudaUserObject_t, count: c_uint) cudaError_t;
pub extern fn cudaGraphAddNode(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, numDependencies: usize, nodeParams: [*c]struct_cudaGraphNodeParams) cudaError_t;
pub extern fn cudaGraphAddNode_v2(pGraphNode: [*c]cudaGraphNode_t, graph: cudaGraph_t, pDependencies: [*c]const cudaGraphNode_t, dependencyData: [*c]const cudaGraphEdgeData, numDependencies: usize, nodeParams: [*c]struct_cudaGraphNodeParams) cudaError_t;
pub extern fn cudaGraphNodeSetParams(node: cudaGraphNode_t, nodeParams: [*c]struct_cudaGraphNodeParams) cudaError_t;
pub extern fn cudaGraphExecNodeSetParams(graphExec: cudaGraphExec_t, node: cudaGraphNode_t, nodeParams: [*c]struct_cudaGraphNodeParams) cudaError_t;
pub extern fn cudaGraphConditionalHandleCreate(pHandle_out: [*c]cudaGraphConditionalHandle, graph: cudaGraph_t, defaultLaunchValue: c_uint, flags: c_uint) cudaError_t;
pub extern fn cudaGetDriverEntryPoint(symbol: [*c]const u8, funcPtr: [*c]?*anyopaque, flags: c_ulonglong, driverStatus: [*c]enum_cudaDriverEntryPointQueryResult) cudaError_t;
pub extern fn cudaGetDriverEntryPointByVersion(symbol: [*c]const u8, funcPtr: [*c]?*anyopaque, cudaVersion: c_uint, flags: c_ulonglong, driverStatus: [*c]enum_cudaDriverEntryPointQueryResult) cudaError_t;
pub extern fn cudaLibraryLoadData(library: [*c]cudaLibrary_t, code: ?*const anyopaque, jitOptions: [*c]enum_cudaJitOption, jitOptionsValues: [*c]?*anyopaque, numJitOptions: c_uint, libraryOptions: [*c]enum_cudaLibraryOption, libraryOptionValues: [*c]?*anyopaque, numLibraryOptions: c_uint) cudaError_t;
pub extern fn cudaLibraryLoadFromFile(library: [*c]cudaLibrary_t, fileName: [*c]const u8, jitOptions: [*c]enum_cudaJitOption, jitOptionsValues: [*c]?*anyopaque, numJitOptions: c_uint, libraryOptions: [*c]enum_cudaLibraryOption, libraryOptionValues: [*c]?*anyopaque, numLibraryOptions: c_uint) cudaError_t;
pub extern fn cudaLibraryUnload(library: cudaLibrary_t) cudaError_t;
pub extern fn cudaLibraryGetKernel(pKernel: [*c]cudaKernel_t, library: cudaLibrary_t, name: [*c]const u8) cudaError_t;
pub extern fn cudaLibraryGetGlobal(dptr: [*c]?*anyopaque, bytes: [*c]usize, library: cudaLibrary_t, name: [*c]const u8) cudaError_t;
pub extern fn cudaLibraryGetManaged(dptr: [*c]?*anyopaque, bytes: [*c]usize, library: cudaLibrary_t, name: [*c]const u8) cudaError_t;
pub extern fn cudaLibraryGetUnifiedFunction(fptr: [*c]?*anyopaque, library: cudaLibrary_t, symbol: [*c]const u8) cudaError_t;
pub extern fn cudaLibraryGetKernelCount(count: [*c]c_uint, lib: cudaLibrary_t) cudaError_t;
pub extern fn cudaLibraryEnumerateKernels(kernels: [*c]cudaKernel_t, numKernels: c_uint, lib: cudaLibrary_t) cudaError_t;
pub extern fn cudaKernelSetAttributeForDevice(kernel: cudaKernel_t, attr: enum_cudaFuncAttribute, value: c_int, device: c_int) cudaError_t;
pub extern fn cudaGetExportTable(ppExportTable: [*c]?*const anyopaque, pExportTableId: [*c]const cudaUUID_t) cudaError_t;
pub extern fn cudaGetFuncBySymbol(functionPtr: [*c]cudaFunction_t, symbolPtr: ?*const anyopaque) cudaError_t;
pub extern fn cudaGetKernel(kernelPtr: [*c]cudaKernel_t, entryFuncAddr: ?*const anyopaque) cudaError_t;
pub fn make_cudaPitchedPtr(arg_d: ?*anyopaque, arg_p: usize, arg_xsz: usize, arg_ysz: usize) callconv(.c) struct_cudaPitchedPtr {
    var d = arg_d;
    _ = &d;
    var p = arg_p;
    _ = &p;
    var xsz = arg_xsz;
    _ = &xsz;
    var ysz = arg_ysz;
    _ = &ysz;
    var s: struct_cudaPitchedPtr = undefined;
    _ = &s;
    s.ptr = d;
    s.pitch = p;
    s.xsize = xsz;
    s.ysize = ysz;
    return s;
}
pub fn make_cudaPos(arg_x: usize, arg_y: usize, arg_z: usize) callconv(.c) struct_cudaPos {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var p: struct_cudaPos = undefined;
    _ = &p;
    p.x = x;
    p.y = y;
    p.z = z;
    return p;
}
pub fn make_cudaExtent(arg_w: usize, arg_h: usize, arg_d: usize) callconv(.c) struct_cudaExtent {
    var w = arg_w;
    _ = &w;
    var h = arg_h;
    _ = &h;
    var d = arg_d;
    _ = &d;
    var e: struct_cudaExtent = undefined;
    _ = &e;
    e.width = w;
    e.height = h;
    e.depth = d;
    return e;
}
pub fn make_char1(arg_x: i8) callconv(.c) char1 {
    var x = arg_x;
    _ = &x;
    var t: char1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_uchar1(arg_x: u8) callconv(.c) uchar1 {
    var x = arg_x;
    _ = &x;
    var t: uchar1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_char2(arg_x: i8, arg_y: i8) callconv(.c) char2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: char2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_uchar2(arg_x: u8, arg_y: u8) callconv(.c) uchar2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: uchar2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_char3(arg_x: i8, arg_y: i8, arg_z: i8) callconv(.c) char3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: char3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_uchar3(arg_x: u8, arg_y: u8, arg_z: u8) callconv(.c) uchar3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: uchar3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_char4(arg_x: i8, arg_y: i8, arg_z: i8, arg_w: i8) callconv(.c) char4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: char4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_uchar4(arg_x: u8, arg_y: u8, arg_z: u8, arg_w: u8) callconv(.c) uchar4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: uchar4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_short1(arg_x: c_short) callconv(.c) short1 {
    var x = arg_x;
    _ = &x;
    var t: short1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_ushort1(arg_x: c_ushort) callconv(.c) ushort1 {
    var x = arg_x;
    _ = &x;
    var t: ushort1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_short2(arg_x: c_short, arg_y: c_short) callconv(.c) short2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: short2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_ushort2(arg_x: c_ushort, arg_y: c_ushort) callconv(.c) ushort2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: ushort2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_short3(arg_x: c_short, arg_y: c_short, arg_z: c_short) callconv(.c) short3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: short3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_ushort3(arg_x: c_ushort, arg_y: c_ushort, arg_z: c_ushort) callconv(.c) ushort3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: ushort3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_short4(arg_x: c_short, arg_y: c_short, arg_z: c_short, arg_w: c_short) callconv(.c) short4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: short4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_ushort4(arg_x: c_ushort, arg_y: c_ushort, arg_z: c_ushort, arg_w: c_ushort) callconv(.c) ushort4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: ushort4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_int1(arg_x: c_int) callconv(.c) int1 {
    var x = arg_x;
    _ = &x;
    var t: int1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_uint1(arg_x: c_uint) callconv(.c) uint1 {
    var x = arg_x;
    _ = &x;
    var t: uint1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_int2(arg_x: c_int, arg_y: c_int) callconv(.c) int2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: int2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_uint2(arg_x: c_uint, arg_y: c_uint) callconv(.c) uint2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: uint2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_int3(arg_x: c_int, arg_y: c_int, arg_z: c_int) callconv(.c) int3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: int3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_uint3(arg_x: c_uint, arg_y: c_uint, arg_z: c_uint) callconv(.c) uint3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: uint3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_int4(arg_x: c_int, arg_y: c_int, arg_z: c_int, arg_w: c_int) callconv(.c) int4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: int4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_uint4(arg_x: c_uint, arg_y: c_uint, arg_z: c_uint, arg_w: c_uint) callconv(.c) uint4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: uint4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_long1(arg_x: c_long) callconv(.c) long1 {
    var x = arg_x;
    _ = &x;
    var t: long1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_ulong1(arg_x: c_ulong) callconv(.c) ulong1 {
    var x = arg_x;
    _ = &x;
    var t: ulong1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_long2(arg_x: c_long, arg_y: c_long) callconv(.c) long2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: long2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_ulong2(arg_x: c_ulong, arg_y: c_ulong) callconv(.c) ulong2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: ulong2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_long3(arg_x: c_long, arg_y: c_long, arg_z: c_long) callconv(.c) long3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: long3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_ulong3(arg_x: c_ulong, arg_y: c_ulong, arg_z: c_ulong) callconv(.c) ulong3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: ulong3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_long4(arg_x: c_long, arg_y: c_long, arg_z: c_long, arg_w: c_long) callconv(.c) long4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: long4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_ulong4(arg_x: c_ulong, arg_y: c_ulong, arg_z: c_ulong, arg_w: c_ulong) callconv(.c) ulong4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: ulong4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_float1(arg_x: f32) callconv(.c) float1 {
    var x = arg_x;
    _ = &x;
    var t: float1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_float2(arg_x: f32, arg_y: f32) callconv(.c) float2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: float2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_float3(arg_x: f32, arg_y: f32, arg_z: f32) callconv(.c) float3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: float3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_float4(arg_x: f32, arg_y: f32, arg_z: f32, arg_w: f32) callconv(.c) float4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: float4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_longlong1(arg_x: c_longlong) callconv(.c) longlong1 {
    var x = arg_x;
    _ = &x;
    var t: longlong1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_ulonglong1(arg_x: c_ulonglong) callconv(.c) ulonglong1 {
    var x = arg_x;
    _ = &x;
    var t: ulonglong1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_longlong2(arg_x: c_longlong, arg_y: c_longlong) callconv(.c) longlong2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: longlong2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_ulonglong2(arg_x: c_ulonglong, arg_y: c_ulonglong) callconv(.c) ulonglong2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: ulonglong2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_longlong3(arg_x: c_longlong, arg_y: c_longlong, arg_z: c_longlong) callconv(.c) longlong3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: longlong3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_ulonglong3(arg_x: c_ulonglong, arg_y: c_ulonglong, arg_z: c_ulonglong) callconv(.c) ulonglong3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: ulonglong3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_longlong4(arg_x: c_longlong, arg_y: c_longlong, arg_z: c_longlong, arg_w: c_longlong) callconv(.c) longlong4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: longlong4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_ulonglong4(arg_x: c_ulonglong, arg_y: c_ulonglong, arg_z: c_ulonglong, arg_w: c_ulonglong) callconv(.c) ulonglong4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: ulonglong4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub fn make_double1(arg_x: f64) callconv(.c) double1 {
    var x = arg_x;
    _ = &x;
    var t: double1 = undefined;
    _ = &t;
    t.x = x;
    return t;
}
pub fn make_double2(arg_x: f64, arg_y: f64) callconv(.c) double2 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var t: double2 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    return t;
}
pub fn make_double3(arg_x: f64, arg_y: f64, arg_z: f64) callconv(.c) double3 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var t: double3 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    return t;
}
pub fn make_double4(arg_x: f64, arg_y: f64, arg_z: f64, arg_w: f64) callconv(.c) double4 {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var z = arg_z;
    _ = &z;
    var w = arg_w;
    _ = &w;
    var t: double4 = undefined;
    _ = &t;
    t.x = x;
    t.y = y;
    t.z = z;
    t.w = w;
    return t;
}
pub extern const threadIdx: uint3;
pub extern const blockIdx: uint3;
pub extern const blockDim: dim3;
pub extern const gridDim: dim3;
pub extern const warpSize: c_int;
pub const struct__exception = extern struct {
    type: c_int = @import("std").mem.zeroes(c_int),
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    arg1: f64 = @import("std").mem.zeroes(f64),
    arg2: f64 = @import("std").mem.zeroes(f64),
    retval: f64 = @import("std").mem.zeroes(f64),
};
const struct_unnamed_84 = extern struct {
    low: c_uint = @import("std").mem.zeroes(c_uint),
    high: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const union___mingw_dbl_type_t = extern union {
    x: f64,
    val: c_ulonglong,
    lh: struct_unnamed_84,
};
pub const __mingw_dbl_type_t = union___mingw_dbl_type_t;
pub const union___mingw_flt_type_t = extern union {
    x: f32,
    val: c_uint,
};
pub const __mingw_flt_type_t = union___mingw_flt_type_t;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:135:11: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_85 = opaque {};
pub const union___mingw_ldbl_type_t = extern union {
    x: c_longdouble,
    lh: struct_unnamed_85,
};
pub const __mingw_ldbl_type_t = union___mingw_ldbl_type_t;
pub extern var __imp__HUGE: [*c]f64;
pub extern fn __mingw_raise_matherr(typ: c_int, name: [*c]const u8, a1: f64, a2: f64, rslt: f64) void;
pub extern fn __mingw_setusermatherr(?*const fn ([*c]struct__exception) callconv(.c) c_int) void;
pub extern fn __setusermatherr(?*const fn ([*c]struct__exception) callconv(.c) c_int) void;
pub extern fn sin(_X: f64) f64;
pub extern fn cos(_X: f64) f64;
pub extern fn tan(_X: f64) f64;
pub extern fn sinh(_X: f64) f64;
pub extern fn cosh(_X: f64) f64;
pub extern fn tanh(_X: f64) f64;
pub extern fn asin(_X: f64) f64;
pub extern fn acos(_X: f64) f64;
pub extern fn atan(_X: f64) f64;
pub extern fn atan2(_Y: f64, _X: f64) f64;
pub extern fn exp(_X: f64) f64;
pub extern fn log(_X: f64) f64;
pub extern fn log10(_X: f64) f64;
pub extern fn pow(_X: f64, _Y: f64) f64;
pub extern fn sqrt(_X: f64) f64;
pub extern fn ceil(_X: f64) f64;
pub extern fn floor(_X: f64) f64;
pub extern fn fabsf(x: f32) f32;
pub extern fn fabsl(c_longdouble) c_longdouble;
pub extern fn fabs(_X: f64) f64;
pub extern fn ldexp(_X: f64, _Y: c_int) f64;
pub extern fn frexp(_X: f64, _Y: [*c]c_int) f64;
pub extern fn modf(_X: f64, _Y: [*c]f64) f64;
pub extern fn fmod(_X: f64, _Y: f64) f64;
pub extern fn sincos(__x: f64, p_sin: [*c]f64, p_cos: [*c]f64) void;
pub extern fn sincosl(__x: c_longdouble, p_sin: [*c]c_longdouble, p_cos: [*c]c_longdouble) void;
pub extern fn sincosf(__x: f32, p_sin: [*c]f32, p_cos: [*c]f32) void;
pub const struct__complex = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
    y: f64 = @import("std").mem.zeroes(f64),
};
pub extern fn _cabs(_ComplexA: struct__complex) f64;
pub extern fn _hypot(_X: f64, _Y: f64) f64;
pub extern fn _j0(_X: f64) f64;
pub extern fn _j1(_X: f64) f64;
pub extern fn _jn(_X: c_int, _Y: f64) f64;
pub extern fn _y0(_X: f64) f64;
pub extern fn _y1(_X: f64) f64;
pub extern fn _yn(_X: c_int, _Y: f64) f64;
pub extern fn _matherr([*c]struct__exception) c_int;
pub extern fn _chgsign(_X: f64) f64;
pub extern fn _copysign(_Number: f64, _Sign: f64) f64;
pub extern fn _logb(f64) f64;
pub extern fn _nextafter(f64, f64) f64;
pub extern fn _scalb(f64, c_long) f64;
pub extern fn _finite(f64) c_int;
pub extern fn _fpclass(f64) c_int;
pub extern fn _isnan(f64) c_int;
pub extern fn j0(f64) f64;
pub extern fn j1(f64) f64;
pub extern fn jn(c_int, f64) f64;
pub extern fn y0(f64) f64;
pub extern fn y1(f64) f64;
pub extern fn yn(c_int, f64) f64;
pub extern fn chgsign(f64) f64;
pub extern fn finite(f64) c_int;
pub extern fn fpclass(f64) c_int;
pub const float_t = f32;
pub const double_t = f64;
pub extern fn __fpclassifyl(c_longdouble) c_int;
pub extern fn __fpclassifyf(f32) c_int;
pub extern fn __fpclassify(f64) c_int;
pub extern fn __isnan(f64) c_int;
pub extern fn __isnanf(f32) c_int;
pub extern fn __isnanl(c_longdouble) c_int;
pub extern fn __signbit(f64) c_int;
pub extern fn __signbitf(f32) c_int;
pub extern fn __signbitl(c_longdouble) c_int;
pub extern fn sinf(_X: f32) f32;
pub extern fn sinl(c_longdouble) c_longdouble;
pub extern fn cosf(_X: f32) f32;
pub extern fn cosl(c_longdouble) c_longdouble;
pub extern fn tanf(_X: f32) f32;
pub extern fn tanl(c_longdouble) c_longdouble;
pub extern fn asinf(_X: f32) f32;
pub extern fn asinl(c_longdouble) c_longdouble;
pub extern fn acosf(f32) f32;
pub extern fn acosl(c_longdouble) c_longdouble;
pub extern fn atanf(f32) f32;
pub extern fn atanl(c_longdouble) c_longdouble;
pub extern fn atan2f(f32, f32) f32;
pub extern fn atan2l(c_longdouble, c_longdouble) c_longdouble;
pub extern fn sinhf(_X: f32) f32;
pub extern fn sinhl(c_longdouble) c_longdouble;
pub extern fn coshf(_X: f32) f32;
pub extern fn coshl(c_longdouble) c_longdouble;
pub extern fn tanhf(_X: f32) f32;
pub extern fn tanhl(c_longdouble) c_longdouble;
pub extern fn acosh(f64) f64;
pub extern fn acoshf(f32) f32;
pub extern fn acoshl(c_longdouble) c_longdouble;
pub extern fn asinh(f64) f64;
pub extern fn asinhf(f32) f32;
pub extern fn asinhl(c_longdouble) c_longdouble;
pub extern fn atanh(f64) f64;
pub extern fn atanhf(f32) f32;
pub extern fn atanhl(c_longdouble) c_longdouble;
pub extern fn expf(_X: f32) f32;
pub extern fn expl(c_longdouble) c_longdouble;
pub extern fn exp2(f64) f64;
pub extern fn exp2f(f32) f32;
pub extern fn exp2l(c_longdouble) c_longdouble;
pub extern fn expm1(f64) f64;
pub extern fn expm1f(f32) f32;
pub extern fn expm1l(c_longdouble) c_longdouble;
pub extern fn frexpf(_X: f32, _Y: [*c]c_int) f32;
pub extern fn frexpl(c_longdouble, [*c]c_int) c_longdouble;
pub extern fn ilogb(f64) c_int;
pub extern fn ilogbf(f32) c_int;
pub extern fn ilogbl(c_longdouble) c_int;
pub extern fn ldexpf(_X: f32, _Y: c_int) f32;
pub extern fn ldexpl(c_longdouble, c_int) c_longdouble;
pub extern fn logf(f32) f32;
pub extern fn logl(c_longdouble) c_longdouble;
pub extern fn log10f(f32) f32;
pub extern fn log10l(c_longdouble) c_longdouble;
pub extern fn log1p(f64) f64;
pub extern fn log1pf(f32) f32;
pub extern fn log1pl(c_longdouble) c_longdouble;
pub extern fn log2(f64) f64;
pub extern fn log2f(f32) f32;
pub extern fn log2l(c_longdouble) c_longdouble;
pub extern fn logb(f64) f64;
pub extern fn logbf(f32) f32;
pub extern fn logbl(c_longdouble) c_longdouble;
pub extern fn modff(f32, [*c]f32) f32;
pub extern fn modfl(c_longdouble, [*c]c_longdouble) c_longdouble;
pub extern fn scalbn(f64, c_int) f64;
pub extern fn scalbnf(f32, c_int) f32;
pub extern fn scalbnl(c_longdouble, c_int) c_longdouble;
pub extern fn scalbln(f64, c_long) f64;
pub extern fn scalblnf(f32, c_long) f32;
pub extern fn scalblnl(c_longdouble, c_long) c_longdouble;
pub extern fn cbrt(f64) f64;
pub extern fn cbrtf(f32) f32;
pub extern fn cbrtl(c_longdouble) c_longdouble;
pub extern fn hypot(f64, f64) f64;
pub extern fn hypotf(x: f32, y: f32) f32;
pub extern fn hypotl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn powf(_X: f32, _Y: f32) f32;
pub extern fn powl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn sqrtf(f32) f32;
pub extern fn sqrtl(c_longdouble) c_longdouble;
pub extern fn erf(f64) f64;
pub extern fn erff(f32) f32;
pub extern fn erfl(c_longdouble) c_longdouble;
pub extern fn erfc(f64) f64;
pub extern fn erfcf(f32) f32;
pub extern fn erfcl(c_longdouble) c_longdouble;
pub extern fn lgamma(f64) f64;
pub extern fn lgammaf(f32) f32;
pub extern fn lgammal(c_longdouble) c_longdouble;
pub extern var signgam: c_int;
pub extern fn tgamma(f64) f64;
pub extern fn tgammaf(f32) f32;
pub extern fn tgammal(c_longdouble) c_longdouble;
pub extern fn ceilf(f32) f32;
pub extern fn ceill(c_longdouble) c_longdouble;
pub extern fn floorf(f32) f32;
pub extern fn floorl(c_longdouble) c_longdouble;
pub extern fn nearbyint(f64) f64;
pub extern fn nearbyintf(f32) f32;
pub extern fn nearbyintl(c_longdouble) c_longdouble;
pub extern fn rint(f64) f64;
pub extern fn rintf(f32) f32;
pub extern fn rintl(c_longdouble) c_longdouble;
pub extern fn lrint(f64) c_long;
pub extern fn lrintf(f32) c_long;
pub extern fn lrintl(c_longdouble) c_long;
pub extern fn llrint(f64) c_longlong;
pub extern fn llrintf(f32) c_longlong;
pub extern fn llrintl(c_longdouble) c_longlong;
pub extern fn round(f64) f64;
pub extern fn roundf(f32) f32;
pub extern fn roundl(c_longdouble) c_longdouble;
pub extern fn lround(f64) c_long;
pub extern fn lroundf(f32) c_long;
pub extern fn lroundl(c_longdouble) c_long;
pub extern fn llround(f64) c_longlong;
pub extern fn llroundf(f32) c_longlong;
pub extern fn llroundl(c_longdouble) c_longlong;
pub extern fn trunc(f64) f64;
pub extern fn truncf(f32) f32;
pub extern fn truncl(c_longdouble) c_longdouble;
pub extern fn fmodf(f32, f32) f32;
pub extern fn fmodl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remainder(f64, f64) f64;
pub extern fn remainderf(f32, f32) f32;
pub extern fn remainderl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remquo(f64, f64, [*c]c_int) f64;
pub extern fn remquof(f32, f32, [*c]c_int) f32;
pub extern fn remquol(c_longdouble, c_longdouble, [*c]c_int) c_longdouble;
pub extern fn copysign(f64, f64) f64;
pub extern fn copysignf(f32, f32) f32;
pub extern fn copysignl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nan(tagp: [*c]const u8) f64;
pub extern fn nanf(tagp: [*c]const u8) f32;
pub extern fn nanl(tagp: [*c]const u8) c_longdouble;
pub extern fn nextafter(f64, f64) f64;
pub extern fn nextafterf(f32, f32) f32;
pub extern fn nextafterl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nexttoward(f64, c_longdouble) f64;
pub extern fn nexttowardf(f32, c_longdouble) f32;
pub extern fn nexttowardl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fdim(x: f64, y: f64) f64;
pub extern fn fdimf(x: f32, y: f32) f32;
pub extern fn fdiml(x: c_longdouble, y: c_longdouble) c_longdouble;
pub extern fn fmax(f64, f64) f64;
pub extern fn fmaxf(f32, f32) f32;
pub extern fn fmaxl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmin(f64, f64) f64;
pub extern fn fminf(f32, f32) f32;
pub extern fn fminl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fma(f64, f64, f64) f64;
pub extern fn fmaf(f32, f32, f32) f32;
pub extern fn fmal(c_longdouble, c_longdouble, c_longdouble) c_longdouble;
pub extern fn _copysignf(_Number: f32, _Sign: f32) f32;
pub extern fn _chgsignf(_X: f32) f32;
pub extern fn _logbf(_X: f32) f32;
pub extern fn _nextafterf(_X: f32, _Y: f32) f32;
pub extern fn _finitef(_X: f32) c_int;
pub extern fn _isnanf(_X: f32) c_int;
pub extern fn _fpclassf(_X: f32) c_int;
pub extern fn _chgsignl(c_longdouble) c_longdouble;
pub const cuFloatComplex = float2;
pub fn cuCrealf(arg_x: cuFloatComplex) callconv(.c) f32 {
    var x = arg_x;
    _ = &x;
    return x.x;
}
pub fn cuCimagf(arg_x: cuFloatComplex) callconv(.c) f32 {
    var x = arg_x;
    _ = &x;
    return x.y;
}
pub fn make_cuFloatComplex(arg_r: f32, arg_i: f32) callconv(.c) cuFloatComplex {
    var r = arg_r;
    _ = &r;
    var i = arg_i;
    _ = &i;
    var res: cuFloatComplex = undefined;
    _ = &res;
    res.x = r;
    res.y = i;
    return res;
}
pub fn cuConjf(arg_x: cuFloatComplex) callconv(.c) cuFloatComplex {
    var x = arg_x;
    _ = &x;
    return make_cuFloatComplex(cuCrealf(x), -cuCimagf(x));
}
pub fn cuCaddf(arg_x: cuFloatComplex, arg_y: cuFloatComplex) callconv(.c) cuFloatComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    return make_cuFloatComplex(cuCrealf(x) + cuCrealf(y), cuCimagf(x) + cuCimagf(y));
}
pub fn cuCsubf(arg_x: cuFloatComplex, arg_y: cuFloatComplex) callconv(.c) cuFloatComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    return make_cuFloatComplex(cuCrealf(x) - cuCrealf(y), cuCimagf(x) - cuCimagf(y));
}
pub fn cuCmulf(arg_x: cuFloatComplex, arg_y: cuFloatComplex) callconv(.c) cuFloatComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var prod: cuFloatComplex = undefined;
    _ = &prod;
    prod = make_cuFloatComplex((cuCrealf(x) * cuCrealf(y)) - (cuCimagf(x) * cuCimagf(y)), (cuCrealf(x) * cuCimagf(y)) + (cuCimagf(x) * cuCrealf(y)));
    return prod;
}
pub fn cuCdivf(arg_x: cuFloatComplex, arg_y: cuFloatComplex) callconv(.c) cuFloatComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var quot: cuFloatComplex = undefined;
    _ = &quot;
    var s: f32 = fabsf(cuCrealf(y)) + fabsf(cuCimagf(y));
    _ = &s;
    var oos: f32 = 1.0 / s;
    _ = &oos;
    var ars: f32 = cuCrealf(x) * oos;
    _ = &ars;
    var ais: f32 = cuCimagf(x) * oos;
    _ = &ais;
    var brs: f32 = cuCrealf(y) * oos;
    _ = &brs;
    var bis: f32 = cuCimagf(y) * oos;
    _ = &bis;
    s = (brs * brs) + (bis * bis);
    oos = 1.0 / s;
    quot = make_cuFloatComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos);
    return quot;
}
pub fn cuCabsf(arg_x: cuFloatComplex) callconv(.c) f32 {
    var x = arg_x;
    _ = &x;
    var a: f32 = cuCrealf(x);
    _ = &a;
    var b: f32 = cuCimagf(x);
    _ = &b;
    var v: f32 = undefined;
    _ = &v;
    var w: f32 = undefined;
    _ = &w;
    var t: f32 = undefined;
    _ = &t;
    a = fabsf(a);
    b = fabsf(b);
    if (a > b) {
        v = a;
        w = b;
    } else {
        v = b;
        w = a;
    }
    t = w / v;
    t = 1.0 + (t * t);
    t = v * sqrtf(t);
    if (((v == 0.0) or (v > 340282346638528860000000000000000000000.0)) or (w > 340282346638528860000000000000000000000.0)) {
        t = v + w;
    }
    return t;
}
pub const cuDoubleComplex = double2;
pub fn cuCreal(arg_x: cuDoubleComplex) callconv(.c) f64 {
    var x = arg_x;
    _ = &x;
    return x.x;
}
pub fn cuCimag(arg_x: cuDoubleComplex) callconv(.c) f64 {
    var x = arg_x;
    _ = &x;
    return x.y;
}
pub fn make_cuDoubleComplex(arg_r: f64, arg_i: f64) callconv(.c) cuDoubleComplex {
    var r = arg_r;
    _ = &r;
    var i = arg_i;
    _ = &i;
    var res: cuDoubleComplex = undefined;
    _ = &res;
    res.x = r;
    res.y = i;
    return res;
}
pub fn cuConj(arg_x: cuDoubleComplex) callconv(.c) cuDoubleComplex {
    var x = arg_x;
    _ = &x;
    return make_cuDoubleComplex(cuCreal(x), -cuCimag(x));
}
pub fn cuCadd(arg_x: cuDoubleComplex, arg_y: cuDoubleComplex) callconv(.c) cuDoubleComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    return make_cuDoubleComplex(cuCreal(x) + cuCreal(y), cuCimag(x) + cuCimag(y));
}
pub fn cuCsub(arg_x: cuDoubleComplex, arg_y: cuDoubleComplex) callconv(.c) cuDoubleComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    return make_cuDoubleComplex(cuCreal(x) - cuCreal(y), cuCimag(x) - cuCimag(y));
}
pub fn cuCmul(arg_x: cuDoubleComplex, arg_y: cuDoubleComplex) callconv(.c) cuDoubleComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var prod: cuDoubleComplex = undefined;
    _ = &prod;
    prod = make_cuDoubleComplex((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)), (cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y)));
    return prod;
}
pub fn cuCdiv(arg_x: cuDoubleComplex, arg_y: cuDoubleComplex) callconv(.c) cuDoubleComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var quot: cuDoubleComplex = undefined;
    _ = &quot;
    var s: f64 = fabs(cuCreal(y)) + fabs(cuCimag(y));
    _ = &s;
    var oos: f64 = 1.0 / s;
    _ = &oos;
    var ars: f64 = cuCreal(x) * oos;
    _ = &ars;
    var ais: f64 = cuCimag(x) * oos;
    _ = &ais;
    var brs: f64 = cuCreal(y) * oos;
    _ = &brs;
    var bis: f64 = cuCimag(y) * oos;
    _ = &bis;
    s = (brs * brs) + (bis * bis);
    oos = 1.0 / s;
    quot = make_cuDoubleComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos);
    return quot;
}
pub fn cuCabs(arg_x: cuDoubleComplex) callconv(.c) f64 {
    var x = arg_x;
    _ = &x;
    var a: f64 = cuCreal(x);
    _ = &a;
    var b: f64 = cuCimag(x);
    _ = &b;
    var v: f64 = undefined;
    _ = &v;
    var w: f64 = undefined;
    _ = &w;
    var t: f64 = undefined;
    _ = &t;
    a = fabs(a);
    b = fabs(b);
    if (a > b) {
        v = a;
        w = b;
    } else {
        v = b;
        w = a;
    }
    t = w / v;
    t = 1.0 + (t * t);
    t = v * sqrt(t);
    if (((v == 0.0) or (v > 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)) or (w > 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0)) {
        t = v + w;
    }
    return t;
}
pub const cuComplex = cuFloatComplex;
pub fn make_cuComplex(arg_x: f32, arg_y: f32) callconv(.c) cuComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    return make_cuFloatComplex(x, y);
}
pub fn cuComplexFloatToDouble(arg_c: cuFloatComplex) callconv(.c) cuDoubleComplex {
    var c = arg_c;
    _ = &c;
    return make_cuDoubleComplex(@as(f64, @floatCast(cuCrealf(c))), @as(f64, @floatCast(cuCimagf(c))));
}
pub fn cuComplexDoubleToFloat(arg_c: cuDoubleComplex) callconv(.c) cuFloatComplex {
    var c = arg_c;
    _ = &c;
    return make_cuFloatComplex(@as(f32, @floatCast(cuCreal(c))), @as(f32, @floatCast(cuCimag(c))));
}
pub fn cuCfmaf(arg_x: cuComplex, arg_y: cuComplex, arg_d: cuComplex) callconv(.c) cuComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var d = arg_d;
    _ = &d;
    var real_res: f32 = undefined;
    _ = &real_res;
    var imag_res: f32 = undefined;
    _ = &imag_res;
    real_res = (cuCrealf(x) * cuCrealf(y)) + cuCrealf(d);
    imag_res = (cuCrealf(x) * cuCimagf(y)) + cuCimagf(d);
    real_res = -(cuCimagf(x) * cuCimagf(y)) + real_res;
    imag_res = (cuCimagf(x) * cuCrealf(y)) + imag_res;
    return make_cuComplex(real_res, imag_res);
}
pub fn cuCfma(arg_x: cuDoubleComplex, arg_y: cuDoubleComplex, arg_d: cuDoubleComplex) callconv(.c) cuDoubleComplex {
    var x = arg_x;
    _ = &x;
    var y = arg_y;
    _ = &y;
    var d = arg_d;
    _ = &d;
    var real_res: f64 = undefined;
    _ = &real_res;
    var imag_res: f64 = undefined;
    _ = &imag_res;
    real_res = (cuCreal(x) * cuCreal(y)) + cuCreal(d);
    imag_res = (cuCreal(x) * cuCimag(y)) + cuCimag(d);
    real_res = -(cuCimag(x) * cuCimag(y)) + real_res;
    imag_res = (cuCimag(x) * cuCreal(y)) + imag_res;
    return make_cuDoubleComplex(real_res, imag_res);
}
pub const __half_raw = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const __half2_raw = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
    y: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const __nv_bfloat16_raw = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const __nv_bfloat162_raw = extern struct {
    x: c_ushort = @import("std").mem.zeroes(c_ushort),
    y: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const CUBLAS_STATUS_SUCCESS: c_int = 0;
pub const CUBLAS_STATUS_NOT_INITIALIZED: c_int = 1;
pub const CUBLAS_STATUS_ALLOC_FAILED: c_int = 3;
pub const CUBLAS_STATUS_INVALID_VALUE: c_int = 7;
pub const CUBLAS_STATUS_ARCH_MISMATCH: c_int = 8;
pub const CUBLAS_STATUS_MAPPING_ERROR: c_int = 11;
pub const CUBLAS_STATUS_EXECUTION_FAILED: c_int = 13;
pub const CUBLAS_STATUS_INTERNAL_ERROR: c_int = 14;
pub const CUBLAS_STATUS_NOT_SUPPORTED: c_int = 15;
pub const CUBLAS_STATUS_LICENSE_ERROR: c_int = 16;
pub const cublasStatus_t = c_uint;
pub const CUBLAS_FILL_MODE_LOWER: c_int = 0;
pub const CUBLAS_FILL_MODE_UPPER: c_int = 1;
pub const CUBLAS_FILL_MODE_FULL: c_int = 2;
pub const cublasFillMode_t = c_uint;
pub const CUBLAS_DIAG_NON_UNIT: c_int = 0;
pub const CUBLAS_DIAG_UNIT: c_int = 1;
pub const cublasDiagType_t = c_uint;
pub const CUBLAS_SIDE_LEFT: c_int = 0;
pub const CUBLAS_SIDE_RIGHT: c_int = 1;
pub const cublasSideMode_t = c_uint;
pub const CUBLAS_OP_N: c_int = 0;
pub const CUBLAS_OP_T: c_int = 1;
pub const CUBLAS_OP_C: c_int = 2;
pub const CUBLAS_OP_HERMITAN: c_int = 2;
pub const CUBLAS_OP_CONJG: c_int = 3;
pub const cublasOperation_t = c_uint;
pub const CUBLAS_POINTER_MODE_HOST: c_int = 0;
pub const CUBLAS_POINTER_MODE_DEVICE: c_int = 1;
pub const cublasPointerMode_t = c_uint;
pub const CUBLAS_ATOMICS_NOT_ALLOWED: c_int = 0;
pub const CUBLAS_ATOMICS_ALLOWED: c_int = 1;
pub const cublasAtomicsMode_t = c_uint;
pub const CUBLAS_GEMM_DFALT: c_int = -1;
pub const CUBLAS_GEMM_DEFAULT: c_int = -1;
pub const CUBLAS_GEMM_ALGO0: c_int = 0;
pub const CUBLAS_GEMM_ALGO1: c_int = 1;
pub const CUBLAS_GEMM_ALGO2: c_int = 2;
pub const CUBLAS_GEMM_ALGO3: c_int = 3;
pub const CUBLAS_GEMM_ALGO4: c_int = 4;
pub const CUBLAS_GEMM_ALGO5: c_int = 5;
pub const CUBLAS_GEMM_ALGO6: c_int = 6;
pub const CUBLAS_GEMM_ALGO7: c_int = 7;
pub const CUBLAS_GEMM_ALGO8: c_int = 8;
pub const CUBLAS_GEMM_ALGO9: c_int = 9;
pub const CUBLAS_GEMM_ALGO10: c_int = 10;
pub const CUBLAS_GEMM_ALGO11: c_int = 11;
pub const CUBLAS_GEMM_ALGO12: c_int = 12;
pub const CUBLAS_GEMM_ALGO13: c_int = 13;
pub const CUBLAS_GEMM_ALGO14: c_int = 14;
pub const CUBLAS_GEMM_ALGO15: c_int = 15;
pub const CUBLAS_GEMM_ALGO16: c_int = 16;
pub const CUBLAS_GEMM_ALGO17: c_int = 17;
pub const CUBLAS_GEMM_ALGO18: c_int = 18;
pub const CUBLAS_GEMM_ALGO19: c_int = 19;
pub const CUBLAS_GEMM_ALGO20: c_int = 20;
pub const CUBLAS_GEMM_ALGO21: c_int = 21;
pub const CUBLAS_GEMM_ALGO22: c_int = 22;
pub const CUBLAS_GEMM_ALGO23: c_int = 23;
pub const CUBLAS_GEMM_DEFAULT_TENSOR_OP: c_int = 99;
pub const CUBLAS_GEMM_DFALT_TENSOR_OP: c_int = 99;
pub const CUBLAS_GEMM_ALGO0_TENSOR_OP: c_int = 100;
pub const CUBLAS_GEMM_ALGO1_TENSOR_OP: c_int = 101;
pub const CUBLAS_GEMM_ALGO2_TENSOR_OP: c_int = 102;
pub const CUBLAS_GEMM_ALGO3_TENSOR_OP: c_int = 103;
pub const CUBLAS_GEMM_ALGO4_TENSOR_OP: c_int = 104;
pub const CUBLAS_GEMM_ALGO5_TENSOR_OP: c_int = 105;
pub const CUBLAS_GEMM_ALGO6_TENSOR_OP: c_int = 106;
pub const CUBLAS_GEMM_ALGO7_TENSOR_OP: c_int = 107;
pub const CUBLAS_GEMM_ALGO8_TENSOR_OP: c_int = 108;
pub const CUBLAS_GEMM_ALGO9_TENSOR_OP: c_int = 109;
pub const CUBLAS_GEMM_ALGO10_TENSOR_OP: c_int = 110;
pub const CUBLAS_GEMM_ALGO11_TENSOR_OP: c_int = 111;
pub const CUBLAS_GEMM_ALGO12_TENSOR_OP: c_int = 112;
pub const CUBLAS_GEMM_ALGO13_TENSOR_OP: c_int = 113;
pub const CUBLAS_GEMM_ALGO14_TENSOR_OP: c_int = 114;
pub const CUBLAS_GEMM_ALGO15_TENSOR_OP: c_int = 115;
pub const cublasGemmAlgo_t = c_int;
pub const CUBLAS_DEFAULT_MATH: c_int = 0;
pub const CUBLAS_TENSOR_OP_MATH: c_int = 1;
pub const CUBLAS_PEDANTIC_MATH: c_int = 2;
pub const CUBLAS_TF32_TENSOR_OP_MATH: c_int = 3;
pub const CUBLAS_MATH_DISALLOW_REDUCED_PRECISION_REDUCTION: c_int = 16;
pub const cublasMath_t = c_uint;
pub const cublasDataType_t = cudaDataType;
pub const CUBLAS_COMPUTE_16F: c_int = 64;
pub const CUBLAS_COMPUTE_16F_PEDANTIC: c_int = 65;
pub const CUBLAS_COMPUTE_32F: c_int = 68;
pub const CUBLAS_COMPUTE_32F_PEDANTIC: c_int = 69;
pub const CUBLAS_COMPUTE_32F_FAST_16F: c_int = 74;
pub const CUBLAS_COMPUTE_32F_FAST_16BF: c_int = 75;
pub const CUBLAS_COMPUTE_32F_FAST_TF32: c_int = 77;
pub const CUBLAS_COMPUTE_64F: c_int = 70;
pub const CUBLAS_COMPUTE_64F_PEDANTIC: c_int = 71;
pub const CUBLAS_COMPUTE_32I: c_int = 72;
pub const CUBLAS_COMPUTE_32I_PEDANTIC: c_int = 73;
pub const cublasComputeType_t = c_uint;
pub const struct_cublasContext = opaque {};
pub const cublasHandle_t = ?*struct_cublasContext;
pub const cublasLogCallback = ?*const fn ([*c]const u8) callconv(.c) void;
pub extern fn cublasCreate_v2(handle: [*c]cublasHandle_t) cublasStatus_t;
pub extern fn cublasDestroy_v2(handle: cublasHandle_t) cublasStatus_t;
pub extern fn cublasGetVersion_v2(handle: cublasHandle_t, version: [*c]c_int) cublasStatus_t;
pub extern fn cublasGetProperty(@"type": libraryPropertyType, value: [*c]c_int) cublasStatus_t;
pub extern fn cublasGetCudartVersion() usize;
pub extern fn cublasSetWorkspace_v2(handle: cublasHandle_t, workspace: ?*anyopaque, workspaceSizeInBytes: usize) cublasStatus_t;
pub extern fn cublasSetStream_v2(handle: cublasHandle_t, streamId: cudaStream_t) cublasStatus_t;
pub extern fn cublasGetStream_v2(handle: cublasHandle_t, streamId: [*c]cudaStream_t) cublasStatus_t;
pub extern fn cublasGetPointerMode_v2(handle: cublasHandle_t, mode: [*c]cublasPointerMode_t) cublasStatus_t;
pub extern fn cublasSetPointerMode_v2(handle: cublasHandle_t, mode: cublasPointerMode_t) cublasStatus_t;
pub extern fn cublasGetAtomicsMode(handle: cublasHandle_t, mode: [*c]cublasAtomicsMode_t) cublasStatus_t;
pub extern fn cublasSetAtomicsMode(handle: cublasHandle_t, mode: cublasAtomicsMode_t) cublasStatus_t;
pub extern fn cublasGetMathMode(handle: cublasHandle_t, mode: [*c]cublasMath_t) cublasStatus_t;
pub extern fn cublasSetMathMode(handle: cublasHandle_t, mode: cublasMath_t) cublasStatus_t;
pub extern fn cublasGetSmCountTarget(handle: cublasHandle_t, smCountTarget: [*c]c_int) cublasStatus_t;
pub extern fn cublasSetSmCountTarget(handle: cublasHandle_t, smCountTarget: c_int) cublasStatus_t;
pub extern fn cublasGetStatusName(status: cublasStatus_t) [*c]const u8;
pub extern fn cublasGetStatusString(status: cublasStatus_t) [*c]const u8;
pub extern fn cublasLoggerConfigure(logIsOn: c_int, logToStdOut: c_int, logToStdErr: c_int, logFileName: [*c]const u8) cublasStatus_t;
pub extern fn cublasSetLoggerCallback(userCallback: cublasLogCallback) cublasStatus_t;
pub extern fn cublasGetLoggerCallback(userCallback: [*c]cublasLogCallback) cublasStatus_t;
pub extern fn cublasSetVector(n: c_int, elemSize: c_int, x: ?*const anyopaque, incx: c_int, devicePtr: ?*anyopaque, incy: c_int) cublasStatus_t;
pub extern fn cublasSetVector_64(n: i64, elemSize: i64, x: ?*const anyopaque, incx: i64, devicePtr: ?*anyopaque, incy: i64) cublasStatus_t;
pub extern fn cublasGetVector(n: c_int, elemSize: c_int, x: ?*const anyopaque, incx: c_int, y: ?*anyopaque, incy: c_int) cublasStatus_t;
pub extern fn cublasGetVector_64(n: i64, elemSize: i64, x: ?*const anyopaque, incx: i64, y: ?*anyopaque, incy: i64) cublasStatus_t;
pub extern fn cublasSetMatrix(rows: c_int, cols: c_int, elemSize: c_int, A: ?*const anyopaque, lda: c_int, B: ?*anyopaque, ldb: c_int) cublasStatus_t;
pub extern fn cublasSetMatrix_64(rows: i64, cols: i64, elemSize: i64, A: ?*const anyopaque, lda: i64, B: ?*anyopaque, ldb: i64) cublasStatus_t;
pub extern fn cublasGetMatrix(rows: c_int, cols: c_int, elemSize: c_int, A: ?*const anyopaque, lda: c_int, B: ?*anyopaque, ldb: c_int) cublasStatus_t;
pub extern fn cublasGetMatrix_64(rows: i64, cols: i64, elemSize: i64, A: ?*const anyopaque, lda: i64, B: ?*anyopaque, ldb: i64) cublasStatus_t;
pub extern fn cublasSetVectorAsync(n: c_int, elemSize: c_int, hostPtr: ?*const anyopaque, incx: c_int, devicePtr: ?*anyopaque, incy: c_int, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasSetVectorAsync_64(n: i64, elemSize: i64, hostPtr: ?*const anyopaque, incx: i64, devicePtr: ?*anyopaque, incy: i64, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasGetVectorAsync(n: c_int, elemSize: c_int, devicePtr: ?*const anyopaque, incx: c_int, hostPtr: ?*anyopaque, incy: c_int, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasGetVectorAsync_64(n: i64, elemSize: i64, devicePtr: ?*const anyopaque, incx: i64, hostPtr: ?*anyopaque, incy: i64, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasSetMatrixAsync(rows: c_int, cols: c_int, elemSize: c_int, A: ?*const anyopaque, lda: c_int, B: ?*anyopaque, ldb: c_int, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasSetMatrixAsync_64(rows: i64, cols: i64, elemSize: i64, A: ?*const anyopaque, lda: i64, B: ?*anyopaque, ldb: i64, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasGetMatrixAsync(rows: c_int, cols: c_int, elemSize: c_int, A: ?*const anyopaque, lda: c_int, B: ?*anyopaque, ldb: c_int, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasGetMatrixAsync_64(rows: i64, cols: i64, elemSize: i64, A: ?*const anyopaque, lda: i64, B: ?*anyopaque, ldb: i64, stream: cudaStream_t) cublasStatus_t;
pub extern fn cublasXerbla(srName: [*c]const u8, info: c_int) void;
pub extern fn cublasNrm2Ex(handle: cublasHandle_t, n: c_int, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, result: ?*anyopaque, resultType: cudaDataType, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasNrm2Ex_64(handle: cublasHandle_t, n: i64, x: ?*const anyopaque, xType: cudaDataType, incx: i64, result: ?*anyopaque, resultType: cudaDataType, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasSnrm2_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f32, incx: c_int, result: [*c]f32) cublasStatus_t;
pub extern fn cublasSnrm2_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f32, incx: i64, result: [*c]f32) cublasStatus_t;
pub extern fn cublasDnrm2_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f64, incx: c_int, result: [*c]f64) cublasStatus_t;
pub extern fn cublasDnrm2_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f64, incx: i64, result: [*c]f64) cublasStatus_t;
pub extern fn cublasScnrm2_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuComplex, incx: c_int, result: [*c]f32) cublasStatus_t;
pub extern fn cublasScnrm2_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuComplex, incx: i64, result: [*c]f32) cublasStatus_t;
pub extern fn cublasDznrm2_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuDoubleComplex, incx: c_int, result: [*c]f64) cublasStatus_t;
pub extern fn cublasDznrm2_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuDoubleComplex, incx: i64, result: [*c]f64) cublasStatus_t;
pub extern fn cublasDotEx(handle: cublasHandle_t, n: c_int, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, y: ?*const anyopaque, yType: cudaDataType, incy: c_int, result: ?*anyopaque, resultType: cudaDataType, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasDotEx_64(handle: cublasHandle_t, n: i64, x: ?*const anyopaque, xType: cudaDataType, incx: i64, y: ?*const anyopaque, yType: cudaDataType, incy: i64, result: ?*anyopaque, resultType: cudaDataType, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasDotcEx(handle: cublasHandle_t, n: c_int, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, y: ?*const anyopaque, yType: cudaDataType, incy: c_int, result: ?*anyopaque, resultType: cudaDataType, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasDotcEx_64(handle: cublasHandle_t, n: i64, x: ?*const anyopaque, xType: cudaDataType, incx: i64, y: ?*const anyopaque, yType: cudaDataType, incy: i64, result: ?*anyopaque, resultType: cudaDataType, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasSdot_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f32, incx: c_int, y: [*c]const f32, incy: c_int, result: [*c]f32) cublasStatus_t;
pub extern fn cublasSdot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f32, incx: i64, y: [*c]const f32, incy: i64, result: [*c]f32) cublasStatus_t;
pub extern fn cublasDdot_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f64, incx: c_int, y: [*c]const f64, incy: c_int, result: [*c]f64) cublasStatus_t;
pub extern fn cublasDdot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f64, incx: i64, y: [*c]const f64, incy: i64, result: [*c]f64) cublasStatus_t;
pub extern fn cublasCdotu_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuComplex, incx: c_int, y: [*c]const cuComplex, incy: c_int, result: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasCdotu_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuComplex, incx: i64, y: [*c]const cuComplex, incy: i64, result: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasCdotc_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuComplex, incx: c_int, y: [*c]const cuComplex, incy: c_int, result: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasCdotc_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuComplex, incx: i64, y: [*c]const cuComplex, incy: i64, result: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasZdotu_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]const cuDoubleComplex, incy: c_int, result: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasZdotu_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]const cuDoubleComplex, incy: i64, result: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasZdotc_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]const cuDoubleComplex, incy: c_int, result: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasZdotc_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]const cuDoubleComplex, incy: i64, result: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasScalEx(handle: cublasHandle_t, n: c_int, alpha: ?*const anyopaque, alphaType: cudaDataType, x: ?*anyopaque, xType: cudaDataType, incx: c_int, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasScalEx_64(handle: cublasHandle_t, n: i64, alpha: ?*const anyopaque, alphaType: cudaDataType, x: ?*anyopaque, xType: cudaDataType, incx: i64, executionType: cudaDataType) cublasStatus_t;
pub extern fn cublasSscal_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const f32, x: [*c]f32, incx: c_int) cublasStatus_t;
pub extern fn cublasSscal_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const f32, x: [*c]f32, incx: i64) cublasStatus_t;
pub extern fn cublasDscal_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const f64, x: [*c]f64, incx: c_int) cublasStatus_t;
pub extern fn cublasDscal_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const f64, x: [*c]f64, incx: i64) cublasStatus_t;
pub extern fn cublasCscal_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const cuComplex, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCscal_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const cuComplex, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasCsscal_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const f32, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCsscal_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const f32, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZscal_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZscal_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZdscal_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const f64, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZdscal_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const f64, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasAxpyEx(handle: cublasHandle_t, n: c_int, alpha: ?*const anyopaque, alphaType: cudaDataType, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, y: ?*anyopaque, yType: cudaDataType, incy: c_int, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasAxpyEx_64(handle: cublasHandle_t, n: i64, alpha: ?*const anyopaque, alphaType: cudaDataType, x: ?*const anyopaque, xType: cudaDataType, incx: i64, y: ?*anyopaque, yType: cudaDataType, incy: i64, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasSaxpy_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const f32, x: [*c]const f32, incx: c_int, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasSaxpy_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const f32, x: [*c]const f32, incx: i64, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDaxpy_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const f64, x: [*c]const f64, incx: c_int, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDaxpy_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const f64, x: [*c]const f64, incx: i64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasCaxpy_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasCaxpy_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZaxpy_v2(handle: cublasHandle_t, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZaxpy_v2_64(handle: cublasHandle_t, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasCopyEx(handle: cublasHandle_t, n: c_int, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, y: ?*anyopaque, yType: cudaDataType, incy: c_int) cublasStatus_t;
pub extern fn cublasCopyEx_64(handle: cublasHandle_t, n: i64, x: ?*const anyopaque, xType: cudaDataType, incx: i64, y: ?*anyopaque, yType: cudaDataType, incy: i64) cublasStatus_t;
pub extern fn cublasScopy_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f32, incx: c_int, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasScopy_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f32, incx: i64, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDcopy_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f64, incx: c_int, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDcopy_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f64, incx: i64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasCcopy_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuComplex, incx: c_int, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasCcopy_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuComplex, incx: i64, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZcopy_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZcopy_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasSswap_v2(handle: cublasHandle_t, n: c_int, x: [*c]f32, incx: c_int, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasSswap_v2_64(handle: cublasHandle_t, n: i64, x: [*c]f32, incx: i64, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDswap_v2(handle: cublasHandle_t, n: c_int, x: [*c]f64, incx: c_int, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDswap_v2_64(handle: cublasHandle_t, n: i64, x: [*c]f64, incx: i64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasCswap_v2(handle: cublasHandle_t, n: c_int, x: [*c]cuComplex, incx: c_int, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasCswap_v2_64(handle: cublasHandle_t, n: i64, x: [*c]cuComplex, incx: i64, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZswap_v2(handle: cublasHandle_t, n: c_int, x: [*c]cuDoubleComplex, incx: c_int, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZswap_v2_64(handle: cublasHandle_t, n: i64, x: [*c]cuDoubleComplex, incx: i64, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasSwapEx(handle: cublasHandle_t, n: c_int, x: ?*anyopaque, xType: cudaDataType, incx: c_int, y: ?*anyopaque, yType: cudaDataType, incy: c_int) cublasStatus_t;
pub extern fn cublasSwapEx_64(handle: cublasHandle_t, n: i64, x: ?*anyopaque, xType: cudaDataType, incx: i64, y: ?*anyopaque, yType: cudaDataType, incy: i64) cublasStatus_t;
pub extern fn cublasIsamax_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f32, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIsamax_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f32, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIdamax_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f64, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIdamax_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f64, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIcamax_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuComplex, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIcamax_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuComplex, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIzamax_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuDoubleComplex, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIzamax_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuDoubleComplex, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIamaxEx(handle: cublasHandle_t, n: c_int, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIamaxEx_64(handle: cublasHandle_t, n: i64, x: ?*const anyopaque, xType: cudaDataType, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIsamin_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f32, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIsamin_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f32, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIdamin_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f64, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIdamin_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f64, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIcamin_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuComplex, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIcamin_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuComplex, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIzamin_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuDoubleComplex, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIzamin_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuDoubleComplex, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasIaminEx(handle: cublasHandle_t, n: c_int, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, result: [*c]c_int) cublasStatus_t;
pub extern fn cublasIaminEx_64(handle: cublasHandle_t, n: i64, x: ?*const anyopaque, xType: cudaDataType, incx: i64, result: [*c]i64) cublasStatus_t;
pub extern fn cublasAsumEx(handle: cublasHandle_t, n: c_int, x: ?*const anyopaque, xType: cudaDataType, incx: c_int, result: ?*anyopaque, resultType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasAsumEx_64(handle: cublasHandle_t, n: i64, x: ?*const anyopaque, xType: cudaDataType, incx: i64, result: ?*anyopaque, resultType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasSasum_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f32, incx: c_int, result: [*c]f32) cublasStatus_t;
pub extern fn cublasSasum_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f32, incx: i64, result: [*c]f32) cublasStatus_t;
pub extern fn cublasDasum_v2(handle: cublasHandle_t, n: c_int, x: [*c]const f64, incx: c_int, result: [*c]f64) cublasStatus_t;
pub extern fn cublasDasum_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const f64, incx: i64, result: [*c]f64) cublasStatus_t;
pub extern fn cublasScasum_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuComplex, incx: c_int, result: [*c]f32) cublasStatus_t;
pub extern fn cublasScasum_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuComplex, incx: i64, result: [*c]f32) cublasStatus_t;
pub extern fn cublasDzasum_v2(handle: cublasHandle_t, n: c_int, x: [*c]const cuDoubleComplex, incx: c_int, result: [*c]f64) cublasStatus_t;
pub extern fn cublasDzasum_v2_64(handle: cublasHandle_t, n: i64, x: [*c]const cuDoubleComplex, incx: i64, result: [*c]f64) cublasStatus_t;
pub extern fn cublasSrot_v2(handle: cublasHandle_t, n: c_int, x: [*c]f32, incx: c_int, y: [*c]f32, incy: c_int, c: [*c]const f32, s: [*c]const f32) cublasStatus_t;
pub extern fn cublasSrot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]f32, incx: i64, y: [*c]f32, incy: i64, c: [*c]const f32, s: [*c]const f32) cublasStatus_t;
pub extern fn cublasDrot_v2(handle: cublasHandle_t, n: c_int, x: [*c]f64, incx: c_int, y: [*c]f64, incy: c_int, c: [*c]const f64, s: [*c]const f64) cublasStatus_t;
pub extern fn cublasDrot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]f64, incx: i64, y: [*c]f64, incy: i64, c: [*c]const f64, s: [*c]const f64) cublasStatus_t;
pub extern fn cublasCrot_v2(handle: cublasHandle_t, n: c_int, x: [*c]cuComplex, incx: c_int, y: [*c]cuComplex, incy: c_int, c: [*c]const f32, s: [*c]const cuComplex) cublasStatus_t;
pub extern fn cublasCrot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]cuComplex, incx: i64, y: [*c]cuComplex, incy: i64, c: [*c]const f32, s: [*c]const cuComplex) cublasStatus_t;
pub extern fn cublasCsrot_v2(handle: cublasHandle_t, n: c_int, x: [*c]cuComplex, incx: c_int, y: [*c]cuComplex, incy: c_int, c: [*c]const f32, s: [*c]const f32) cublasStatus_t;
pub extern fn cublasCsrot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]cuComplex, incx: i64, y: [*c]cuComplex, incy: i64, c: [*c]const f32, s: [*c]const f32) cublasStatus_t;
pub extern fn cublasZrot_v2(handle: cublasHandle_t, n: c_int, x: [*c]cuDoubleComplex, incx: c_int, y: [*c]cuDoubleComplex, incy: c_int, c: [*c]const f64, s: [*c]const cuDoubleComplex) cublasStatus_t;
pub extern fn cublasZrot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]cuDoubleComplex, incx: i64, y: [*c]cuDoubleComplex, incy: i64, c: [*c]const f64, s: [*c]const cuDoubleComplex) cublasStatus_t;
pub extern fn cublasZdrot_v2(handle: cublasHandle_t, n: c_int, x: [*c]cuDoubleComplex, incx: c_int, y: [*c]cuDoubleComplex, incy: c_int, c: [*c]const f64, s: [*c]const f64) cublasStatus_t;
pub extern fn cublasZdrot_v2_64(handle: cublasHandle_t, n: i64, x: [*c]cuDoubleComplex, incx: i64, y: [*c]cuDoubleComplex, incy: i64, c: [*c]const f64, s: [*c]const f64) cublasStatus_t;
pub extern fn cublasRotEx(handle: cublasHandle_t, n: c_int, x: ?*anyopaque, xType: cudaDataType, incx: c_int, y: ?*anyopaque, yType: cudaDataType, incy: c_int, c: ?*const anyopaque, s: ?*const anyopaque, csType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasRotEx_64(handle: cublasHandle_t, n: i64, x: ?*anyopaque, xType: cudaDataType, incx: i64, y: ?*anyopaque, yType: cudaDataType, incy: i64, c: ?*const anyopaque, s: ?*const anyopaque, csType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasSrotg_v2(handle: cublasHandle_t, a: [*c]f32, b: [*c]f32, c: [*c]f32, s: [*c]f32) cublasStatus_t;
pub extern fn cublasDrotg_v2(handle: cublasHandle_t, a: [*c]f64, b: [*c]f64, c: [*c]f64, s: [*c]f64) cublasStatus_t;
pub extern fn cublasCrotg_v2(handle: cublasHandle_t, a: [*c]cuComplex, b: [*c]cuComplex, c: [*c]f32, s: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasZrotg_v2(handle: cublasHandle_t, a: [*c]cuDoubleComplex, b: [*c]cuDoubleComplex, c: [*c]f64, s: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasRotgEx(handle: cublasHandle_t, a: ?*anyopaque, b: ?*anyopaque, abType: cudaDataType, c: ?*anyopaque, s: ?*anyopaque, csType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasSrotm_v2(handle: cublasHandle_t, n: c_int, x: [*c]f32, incx: c_int, y: [*c]f32, incy: c_int, param: [*c]const f32) cublasStatus_t;
pub extern fn cublasSrotm_v2_64(handle: cublasHandle_t, n: i64, x: [*c]f32, incx: i64, y: [*c]f32, incy: i64, param: [*c]const f32) cublasStatus_t;
pub extern fn cublasDrotm_v2(handle: cublasHandle_t, n: c_int, x: [*c]f64, incx: c_int, y: [*c]f64, incy: c_int, param: [*c]const f64) cublasStatus_t;
pub extern fn cublasDrotm_v2_64(handle: cublasHandle_t, n: i64, x: [*c]f64, incx: i64, y: [*c]f64, incy: i64, param: [*c]const f64) cublasStatus_t;
pub extern fn cublasRotmEx(handle: cublasHandle_t, n: c_int, x: ?*anyopaque, xType: cudaDataType, incx: c_int, y: ?*anyopaque, yType: cudaDataType, incy: c_int, param: ?*const anyopaque, paramType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasRotmEx_64(handle: cublasHandle_t, n: i64, x: ?*anyopaque, xType: cudaDataType, incx: i64, y: ?*anyopaque, yType: cudaDataType, incy: i64, param: ?*const anyopaque, paramType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasSrotmg_v2(handle: cublasHandle_t, d1: [*c]f32, d2: [*c]f32, x1: [*c]f32, y1: [*c]const f32, param: [*c]f32) cublasStatus_t;
pub extern fn cublasDrotmg_v2(handle: cublasHandle_t, d1: [*c]f64, d2: [*c]f64, x1: [*c]f64, y1: [*c]const f64, param: [*c]f64) cublasStatus_t;
pub extern fn cublasRotmgEx(handle: cublasHandle_t, d1: ?*anyopaque, d1Type: cudaDataType, d2: ?*anyopaque, d2Type: cudaDataType, x1: ?*anyopaque, x1Type: cudaDataType, y1: ?*const anyopaque, y1Type: cudaDataType, param: ?*anyopaque, paramType: cudaDataType, executiontype: cudaDataType) cublasStatus_t;
pub extern fn cublasSgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, x: [*c]const f32, incx: c_int, beta: [*c]const f32, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasSgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, x: [*c]const f32, incx: i64, beta: [*c]const f32, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, x: [*c]const f64, incx: c_int, beta: [*c]const f64, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, x: [*c]const f64, incx: i64, beta: [*c]const f64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasCgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, x: [*c]const cuComplex, incx: c_int, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasCgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, x: [*c]const cuComplex, incx: i64, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]const cuDoubleComplex, incx: c_int, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]const cuDoubleComplex, incx: i64, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasSgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, kl: c_int, ku: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, x: [*c]const f32, incx: c_int, beta: [*c]const f32, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasSgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, kl: i64, ku: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, x: [*c]const f32, incx: i64, beta: [*c]const f32, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, kl: c_int, ku: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, x: [*c]const f64, incx: c_int, beta: [*c]const f64, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, kl: i64, ku: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, x: [*c]const f64, incx: i64, beta: [*c]const f64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasCgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, kl: c_int, ku: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, x: [*c]const cuComplex, incx: c_int, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasCgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, kl: i64, ku: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, x: [*c]const cuComplex, incx: i64, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, kl: c_int, ku: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]const cuDoubleComplex, incx: c_int, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, kl: i64, ku: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]const cuDoubleComplex, incx: i64, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasStrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const f32, lda: c_int, x: [*c]f32, incx: c_int) cublasStatus_t;
pub extern fn cublasStrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const f32, lda: i64, x: [*c]f32, incx: i64) cublasStatus_t;
pub extern fn cublasDtrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const f64, lda: c_int, x: [*c]f64, incx: c_int) cublasStatus_t;
pub extern fn cublasDtrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const f64, lda: i64, x: [*c]f64, incx: i64) cublasStatus_t;
pub extern fn cublasCtrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const cuComplex, lda: c_int, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCtrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const cuComplex, lda: i64, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZtrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZtrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasStbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const f32, lda: c_int, x: [*c]f32, incx: c_int) cublasStatus_t;
pub extern fn cublasStbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const f32, lda: i64, x: [*c]f32, incx: i64) cublasStatus_t;
pub extern fn cublasDtbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const f64, lda: c_int, x: [*c]f64, incx: c_int) cublasStatus_t;
pub extern fn cublasDtbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const f64, lda: i64, x: [*c]f64, incx: i64) cublasStatus_t;
pub extern fn cublasCtbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const cuComplex, lda: c_int, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCtbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const cuComplex, lda: i64, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZtbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZtbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasStpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const f32, x: [*c]f32, incx: c_int) cublasStatus_t;
pub extern fn cublasStpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const f32, x: [*c]f32, incx: i64) cublasStatus_t;
pub extern fn cublasDtpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const f64, x: [*c]f64, incx: c_int) cublasStatus_t;
pub extern fn cublasDtpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const f64, x: [*c]f64, incx: i64) cublasStatus_t;
pub extern fn cublasCtpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const cuComplex, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCtpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const cuComplex, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZtpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZtpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasStrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const f32, lda: c_int, x: [*c]f32, incx: c_int) cublasStatus_t;
pub extern fn cublasStrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const f32, lda: i64, x: [*c]f32, incx: i64) cublasStatus_t;
pub extern fn cublasDtrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const f64, lda: c_int, x: [*c]f64, incx: c_int) cublasStatus_t;
pub extern fn cublasDtrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const f64, lda: i64, x: [*c]f64, incx: i64) cublasStatus_t;
pub extern fn cublasCtrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const cuComplex, lda: c_int, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCtrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const cuComplex, lda: i64, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZtrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZtrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasStpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const f32, x: [*c]f32, incx: c_int) cublasStatus_t;
pub extern fn cublasStpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const f32, x: [*c]f32, incx: i64) cublasStatus_t;
pub extern fn cublasDtpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const f64, x: [*c]f64, incx: c_int) cublasStatus_t;
pub extern fn cublasDtpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const f64, x: [*c]f64, incx: i64) cublasStatus_t;
pub extern fn cublasCtpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const cuComplex, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCtpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const cuComplex, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZtpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, AP: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZtpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, AP: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasStbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const f32, lda: c_int, x: [*c]f32, incx: c_int) cublasStatus_t;
pub extern fn cublasStbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const f32, lda: i64, x: [*c]f32, incx: i64) cublasStatus_t;
pub extern fn cublasDtbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const f64, lda: c_int, x: [*c]f64, incx: c_int) cublasStatus_t;
pub extern fn cublasDtbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const f64, lda: i64, x: [*c]f64, incx: i64) cublasStatus_t;
pub extern fn cublasCtbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const cuComplex, lda: c_int, x: [*c]cuComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasCtbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const cuComplex, lda: i64, x: [*c]cuComplex, incx: i64) cublasStatus_t;
pub extern fn cublasZtbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: c_int, k: c_int, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]cuDoubleComplex, incx: c_int) cublasStatus_t;
pub extern fn cublasZtbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: i64, k: i64, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]cuDoubleComplex, incx: i64) cublasStatus_t;
pub extern fn cublasSsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, x: [*c]const f32, incx: c_int, beta: [*c]const f32, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasSsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, x: [*c]const f32, incx: i64, beta: [*c]const f32, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, x: [*c]const f64, incx: c_int, beta: [*c]const f64, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, x: [*c]const f64, incx: i64, beta: [*c]const f64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasCsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, x: [*c]const cuComplex, incx: c_int, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasCsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, x: [*c]const cuComplex, incx: i64, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]const cuDoubleComplex, incx: c_int, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]const cuDoubleComplex, incx: i64, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasChemv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, x: [*c]const cuComplex, incx: c_int, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasChemv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, x: [*c]const cuComplex, incx: i64, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZhemv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]const cuDoubleComplex, incx: c_int, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZhemv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]const cuDoubleComplex, incx: i64, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasSsbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, k: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, x: [*c]const f32, incx: c_int, beta: [*c]const f32, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasSsbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, k: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, x: [*c]const f32, incx: i64, beta: [*c]const f32, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDsbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, k: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, x: [*c]const f64, incx: c_int, beta: [*c]const f64, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDsbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, k: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, x: [*c]const f64, incx: i64, beta: [*c]const f64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasChbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, x: [*c]const cuComplex, incx: c_int, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasChbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, x: [*c]const cuComplex, incx: i64, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZhbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]const cuDoubleComplex, incx: c_int, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZhbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]const cuDoubleComplex, incx: i64, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasSspmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, AP: [*c]const f32, x: [*c]const f32, incx: c_int, beta: [*c]const f32, y: [*c]f32, incy: c_int) cublasStatus_t;
pub extern fn cublasSspmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, AP: [*c]const f32, x: [*c]const f32, incx: i64, beta: [*c]const f32, y: [*c]f32, incy: i64) cublasStatus_t;
pub extern fn cublasDspmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, AP: [*c]const f64, x: [*c]const f64, incx: c_int, beta: [*c]const f64, y: [*c]f64, incy: c_int) cublasStatus_t;
pub extern fn cublasDspmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, AP: [*c]const f64, x: [*c]const f64, incx: i64, beta: [*c]const f64, y: [*c]f64, incy: i64) cublasStatus_t;
pub extern fn cublasChpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuComplex, AP: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasChpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuComplex, AP: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: i64) cublasStatus_t;
pub extern fn cublasZhpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuDoubleComplex, AP: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: c_int) cublasStatus_t;
pub extern fn cublasZhpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuDoubleComplex, AP: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: i64) cublasStatus_t;
pub extern fn cublasSger_v2(handle: cublasHandle_t, m: c_int, n: c_int, alpha: [*c]const f32, x: [*c]const f32, incx: c_int, y: [*c]const f32, incy: c_int, A: [*c]f32, lda: c_int) cublasStatus_t;
pub extern fn cublasSger_v2_64(handle: cublasHandle_t, m: i64, n: i64, alpha: [*c]const f32, x: [*c]const f32, incx: i64, y: [*c]const f32, incy: i64, A: [*c]f32, lda: i64) cublasStatus_t;
pub extern fn cublasDger_v2(handle: cublasHandle_t, m: c_int, n: c_int, alpha: [*c]const f64, x: [*c]const f64, incx: c_int, y: [*c]const f64, incy: c_int, A: [*c]f64, lda: c_int) cublasStatus_t;
pub extern fn cublasDger_v2_64(handle: cublasHandle_t, m: i64, n: i64, alpha: [*c]const f64, x: [*c]const f64, incx: i64, y: [*c]const f64, incy: i64, A: [*c]f64, lda: i64) cublasStatus_t;
pub extern fn cublasCgeru_v2(handle: cublasHandle_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, y: [*c]const cuComplex, incy: c_int, A: [*c]cuComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasCgeru_v2_64(handle: cublasHandle_t, m: i64, n: i64, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, y: [*c]const cuComplex, incy: i64, A: [*c]cuComplex, lda: i64) cublasStatus_t;
pub extern fn cublasCgerc_v2(handle: cublasHandle_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, y: [*c]const cuComplex, incy: c_int, A: [*c]cuComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasCgerc_v2_64(handle: cublasHandle_t, m: i64, n: i64, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, y: [*c]const cuComplex, incy: i64, A: [*c]cuComplex, lda: i64) cublasStatus_t;
pub extern fn cublasZgeru_v2(handle: cublasHandle_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]const cuDoubleComplex, incy: c_int, A: [*c]cuDoubleComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasZgeru_v2_64(handle: cublasHandle_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]const cuDoubleComplex, incy: i64, A: [*c]cuDoubleComplex, lda: i64) cublasStatus_t;
pub extern fn cublasZgerc_v2(handle: cublasHandle_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]const cuDoubleComplex, incy: c_int, A: [*c]cuDoubleComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasZgerc_v2_64(handle: cublasHandle_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]const cuDoubleComplex, incy: i64, A: [*c]cuDoubleComplex, lda: i64) cublasStatus_t;
pub extern fn cublasSsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, x: [*c]const f32, incx: c_int, A: [*c]f32, lda: c_int) cublasStatus_t;
pub extern fn cublasSsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, x: [*c]const f32, incx: i64, A: [*c]f32, lda: i64) cublasStatus_t;
pub extern fn cublasDsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, x: [*c]const f64, incx: c_int, A: [*c]f64, lda: c_int) cublasStatus_t;
pub extern fn cublasDsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, x: [*c]const f64, incx: i64, A: [*c]f64, lda: i64) cublasStatus_t;
pub extern fn cublasCsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, A: [*c]cuComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasCsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, A: [*c]cuComplex, lda: i64) cublasStatus_t;
pub extern fn cublasZsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, A: [*c]cuDoubleComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasZsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, A: [*c]cuDoubleComplex, lda: i64) cublasStatus_t;
pub extern fn cublasCher_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, x: [*c]const cuComplex, incx: c_int, A: [*c]cuComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasCher_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, x: [*c]const cuComplex, incx: i64, A: [*c]cuComplex, lda: i64) cublasStatus_t;
pub extern fn cublasZher_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, x: [*c]const cuDoubleComplex, incx: c_int, A: [*c]cuDoubleComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasZher_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, x: [*c]const cuDoubleComplex, incx: i64, A: [*c]cuDoubleComplex, lda: i64) cublasStatus_t;
pub extern fn cublasSspr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, x: [*c]const f32, incx: c_int, AP: [*c]f32) cublasStatus_t;
pub extern fn cublasSspr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, x: [*c]const f32, incx: i64, AP: [*c]f32) cublasStatus_t;
pub extern fn cublasDspr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, x: [*c]const f64, incx: c_int, AP: [*c]f64) cublasStatus_t;
pub extern fn cublasDspr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, x: [*c]const f64, incx: i64, AP: [*c]f64) cublasStatus_t;
pub extern fn cublasChpr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, x: [*c]const cuComplex, incx: c_int, AP: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasChpr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, x: [*c]const cuComplex, incx: i64, AP: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasZhpr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, x: [*c]const cuDoubleComplex, incx: c_int, AP: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasZhpr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, x: [*c]const cuDoubleComplex, incx: i64, AP: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasSsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, x: [*c]const f32, incx: c_int, y: [*c]const f32, incy: c_int, A: [*c]f32, lda: c_int) cublasStatus_t;
pub extern fn cublasSsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, x: [*c]const f32, incx: i64, y: [*c]const f32, incy: i64, A: [*c]f32, lda: i64) cublasStatus_t;
pub extern fn cublasDsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, x: [*c]const f64, incx: c_int, y: [*c]const f64, incy: c_int, A: [*c]f64, lda: c_int) cublasStatus_t;
pub extern fn cublasDsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, x: [*c]const f64, incx: i64, y: [*c]const f64, incy: i64, A: [*c]f64, lda: i64) cublasStatus_t;
pub extern fn cublasCsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, y: [*c]const cuComplex, incy: c_int, A: [*c]cuComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasCsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, y: [*c]const cuComplex, incy: i64, A: [*c]cuComplex, lda: i64) cublasStatus_t;
pub extern fn cublasZsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]const cuDoubleComplex, incy: c_int, A: [*c]cuDoubleComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasZsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]const cuDoubleComplex, incy: i64, A: [*c]cuDoubleComplex, lda: i64) cublasStatus_t;
pub extern fn cublasCher2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, y: [*c]const cuComplex, incy: c_int, A: [*c]cuComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasCher2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, y: [*c]const cuComplex, incy: i64, A: [*c]cuComplex, lda: i64) cublasStatus_t;
pub extern fn cublasZher2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]const cuDoubleComplex, incy: c_int, A: [*c]cuDoubleComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasZher2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]const cuDoubleComplex, incy: i64, A: [*c]cuDoubleComplex, lda: i64) cublasStatus_t;
pub extern fn cublasSspr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f32, x: [*c]const f32, incx: c_int, y: [*c]const f32, incy: c_int, AP: [*c]f32) cublasStatus_t;
pub extern fn cublasSspr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f32, x: [*c]const f32, incx: i64, y: [*c]const f32, incy: i64, AP: [*c]f32) cublasStatus_t;
pub extern fn cublasDspr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const f64, x: [*c]const f64, incx: c_int, y: [*c]const f64, incy: c_int, AP: [*c]f64) cublasStatus_t;
pub extern fn cublasDspr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const f64, x: [*c]const f64, incx: i64, y: [*c]const f64, incy: i64, AP: [*c]f64) cublasStatus_t;
pub extern fn cublasChpr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: c_int, y: [*c]const cuComplex, incy: c_int, AP: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasChpr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuComplex, x: [*c]const cuComplex, incx: i64, y: [*c]const cuComplex, incy: i64, AP: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasZhpr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: c_int, y: [*c]const cuDoubleComplex, incy: c_int, AP: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasZhpr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: i64, alpha: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, incx: i64, y: [*c]const cuDoubleComplex, incy: i64, AP: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasSgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f32, Aarray: [*c]const [*c]const f32, lda: c_int, xarray: [*c]const [*c]const f32, incx: c_int, beta: [*c]const f32, yarray: [*c]const [*c]f32, incy: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasSgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f32, Aarray: [*c]const [*c]const f32, lda: i64, xarray: [*c]const [*c]const f32, incx: i64, beta: [*c]const f32, yarray: [*c]const [*c]f32, incy: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasDgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f64, Aarray: [*c]const [*c]const f64, lda: c_int, xarray: [*c]const [*c]const f64, incx: c_int, beta: [*c]const f64, yarray: [*c]const [*c]f64, incy: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasDgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f64, Aarray: [*c]const [*c]const f64, lda: i64, xarray: [*c]const [*c]const f64, incx: i64, beta: [*c]const f64, yarray: [*c]const [*c]f64, incy: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasCgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, Aarray: [*c]const [*c]const cuComplex, lda: c_int, xarray: [*c]const [*c]const cuComplex, incx: c_int, beta: [*c]const cuComplex, yarray: [*c]const [*c]cuComplex, incy: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasCgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuComplex, Aarray: [*c]const [*c]const cuComplex, lda: i64, xarray: [*c]const [*c]const cuComplex, incx: i64, beta: [*c]const cuComplex, yarray: [*c]const [*c]cuComplex, incy: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasZgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, Aarray: [*c]const [*c]const cuDoubleComplex, lda: c_int, xarray: [*c]const [*c]const cuDoubleComplex, incx: c_int, beta: [*c]const cuDoubleComplex, yarray: [*c]const [*c]cuDoubleComplex, incy: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasZgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, Aarray: [*c]const [*c]const cuDoubleComplex, lda: i64, xarray: [*c]const [*c]const cuDoubleComplex, incx: i64, beta: [*c]const cuDoubleComplex, yarray: [*c]const [*c]cuDoubleComplex, incy: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasSgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, strideA: c_longlong, x: [*c]const f32, incx: c_int, stridex: c_longlong, beta: [*c]const f32, y: [*c]f32, incy: c_int, stridey: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasSgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, strideA: c_longlong, x: [*c]const f32, incx: i64, stridex: c_longlong, beta: [*c]const f32, y: [*c]f32, incy: i64, stridey: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasDgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, strideA: c_longlong, x: [*c]const f64, incx: c_int, stridex: c_longlong, beta: [*c]const f64, y: [*c]f64, incy: c_int, stridey: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasDgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, strideA: c_longlong, x: [*c]const f64, incx: i64, stridex: c_longlong, beta: [*c]const f64, y: [*c]f64, incy: i64, stridey: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasCgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, strideA: c_longlong, x: [*c]const cuComplex, incx: c_int, stridex: c_longlong, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: c_int, stridey: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasCgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, strideA: c_longlong, x: [*c]const cuComplex, incx: i64, stridex: c_longlong, beta: [*c]const cuComplex, y: [*c]cuComplex, incy: i64, stridey: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasZgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, strideA: c_longlong, x: [*c]const cuDoubleComplex, incx: c_int, stridex: c_longlong, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: c_int, stridey: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasZgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, strideA: c_longlong, x: [*c]const cuDoubleComplex, incx: i64, stridex: c_longlong, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, incy: i64, stridey: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasSgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, beta: [*c]const f32, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasSgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, B: [*c]const f32, ldb: i64, beta: [*c]const f32, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, beta: [*c]const f64, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, B: [*c]const f64, ldb: i64, beta: [*c]const f64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasCgemm3m(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCgemm3m_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasCgemm3mEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, B: ?*const anyopaque, Btype: cudaDataType, ldb: c_int, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int) cublasStatus_t;
pub extern fn cublasCgemm3mEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, B: ?*const anyopaque, Btype: cudaDataType, ldb: i64, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64) cublasStatus_t;
pub extern fn cublasZgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZgemm3m(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZgemm3m_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasSgemmEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const f32, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, B: ?*const anyopaque, Btype: cudaDataType, ldb: c_int, beta: [*c]const f32, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int) cublasStatus_t;
pub extern fn cublasSgemmEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const f32, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, B: ?*const anyopaque, Btype: cudaDataType, ldb: i64, beta: [*c]const f32, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64) cublasStatus_t;
pub extern fn cublasGemmEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: ?*const anyopaque, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, B: ?*const anyopaque, Btype: cudaDataType, ldb: c_int, beta: ?*const anyopaque, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t) cublasStatus_t;
pub extern fn cublasGemmEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: ?*const anyopaque, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, B: ?*const anyopaque, Btype: cudaDataType, ldb: i64, beta: ?*const anyopaque, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t) cublasStatus_t;
pub extern fn cublasCgemmEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, B: ?*const anyopaque, Btype: cudaDataType, ldb: c_int, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int) cublasStatus_t;
pub extern fn cublasCgemmEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, B: ?*const anyopaque, Btype: cudaDataType, ldb: i64, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64) cublasStatus_t;
pub extern fn cublasSsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, beta: [*c]const f32, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasSsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, beta: [*c]const f32, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, beta: [*c]const f64, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, beta: [*c]const f64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasCsyrkEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int) cublasStatus_t;
pub extern fn cublasCsyrkEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64) cublasStatus_t;
pub extern fn cublasCsyrk3mEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int) cublasStatus_t;
pub extern fn cublasCsyrk3mEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, beta: [*c]const cuComplex, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64) cublasStatus_t;
pub extern fn cublasCherk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f32, A: [*c]const cuComplex, lda: c_int, beta: [*c]const f32, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCherk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f32, A: [*c]const cuComplex, lda: i64, beta: [*c]const f32, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZherk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f64, A: [*c]const cuDoubleComplex, lda: c_int, beta: [*c]const f64, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZherk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f64, A: [*c]const cuDoubleComplex, lda: i64, beta: [*c]const f64, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasCherkEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f32, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, beta: [*c]const f32, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int) cublasStatus_t;
pub extern fn cublasCherkEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f32, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, beta: [*c]const f32, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64) cublasStatus_t;
pub extern fn cublasCherk3mEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f32, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, beta: [*c]const f32, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int) cublasStatus_t;
pub extern fn cublasCherk3mEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f32, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, beta: [*c]const f32, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64) cublasStatus_t;
pub extern fn cublasSsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, beta: [*c]const f32, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasSsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, B: [*c]const f32, ldb: i64, beta: [*c]const f32, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, beta: [*c]const f64, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, B: [*c]const f64, ldb: i64, beta: [*c]const f64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasCher2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const f32, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCher2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const f32, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZher2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const f64, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZher2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const f64, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasSsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, beta: [*c]const f32, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasSsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, B: [*c]const f32, ldb: i64, beta: [*c]const f32, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, beta: [*c]const f64, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, B: [*c]const f64, ldb: i64, beta: [*c]const f64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasCherkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const f32, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCherkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const f32, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZherkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const f64, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZherkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const f64, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasSsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, beta: [*c]const f32, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasSsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: i64, n: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, B: [*c]const f32, ldb: i64, beta: [*c]const f32, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, beta: [*c]const f64, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: i64, n: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, B: [*c]const f64, ldb: i64, beta: [*c]const f64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasChemm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasChemm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZhemm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZhemm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasStrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, B: [*c]f32, ldb: c_int) cublasStatus_t;
pub extern fn cublasStrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, B: [*c]f32, ldb: i64) cublasStatus_t;
pub extern fn cublasDtrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, B: [*c]f64, ldb: c_int) cublasStatus_t;
pub extern fn cublasDtrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, B: [*c]f64, ldb: i64) cublasStatus_t;
pub extern fn cublasCtrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]cuComplex, ldb: c_int) cublasStatus_t;
pub extern fn cublasCtrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]cuComplex, ldb: i64) cublasStatus_t;
pub extern fn cublasZtrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]cuDoubleComplex, ldb: c_int) cublasStatus_t;
pub extern fn cublasZtrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]cuDoubleComplex, ldb: i64) cublasStatus_t;
pub extern fn cublasStrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasStrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, B: [*c]const f32, ldb: i64, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDtrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDtrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, B: [*c]const f64, ldb: i64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCtrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCtrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, B: [*c]const cuComplex, ldb: i64, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZtrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZtrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, B: [*c]const cuDoubleComplex, ldb: i64, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasSgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const f32, Aarray: [*c]const [*c]const f32, lda: c_int, Barray: [*c]const [*c]const f32, ldb: c_int, beta: [*c]const f32, Carray: [*c]const [*c]f32, ldc: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasSgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const f32, Aarray: [*c]const [*c]const f32, lda: i64, Barray: [*c]const [*c]const f32, ldb: i64, beta: [*c]const f32, Carray: [*c]const [*c]f32, ldc: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasDgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const f64, Aarray: [*c]const [*c]const f64, lda: c_int, Barray: [*c]const [*c]const f64, ldb: c_int, beta: [*c]const f64, Carray: [*c]const [*c]f64, ldc: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasDgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const f64, Aarray: [*c]const [*c]const f64, lda: i64, Barray: [*c]const [*c]const f64, ldb: i64, beta: [*c]const f64, Carray: [*c]const [*c]f64, ldc: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasCgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, Aarray: [*c]const [*c]const cuComplex, lda: c_int, Barray: [*c]const [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, Carray: [*c]const [*c]cuComplex, ldc: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasCgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, Aarray: [*c]const [*c]const cuComplex, lda: i64, Barray: [*c]const [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, Carray: [*c]const [*c]cuComplex, ldc: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasCgemm3mBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, Aarray: [*c]const [*c]const cuComplex, lda: c_int, Barray: [*c]const [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, Carray: [*c]const [*c]cuComplex, ldc: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasCgemm3mBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, Aarray: [*c]const [*c]const cuComplex, lda: i64, Barray: [*c]const [*c]const cuComplex, ldb: i64, beta: [*c]const cuComplex, Carray: [*c]const [*c]cuComplex, ldc: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasZgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, Aarray: [*c]const [*c]const cuDoubleComplex, lda: c_int, Barray: [*c]const [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, Carray: [*c]const [*c]cuDoubleComplex, ldc: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasZgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, Aarray: [*c]const [*c]const cuDoubleComplex, lda: i64, Barray: [*c]const [*c]const cuDoubleComplex, ldb: i64, beta: [*c]const cuDoubleComplex, Carray: [*c]const [*c]cuDoubleComplex, ldc: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasSgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, strideA: c_longlong, B: [*c]const f32, ldb: c_int, strideB: c_longlong, beta: [*c]const f32, C: [*c]f32, ldc: c_int, strideC: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasSgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, strideA: c_longlong, B: [*c]const f32, ldb: i64, strideB: c_longlong, beta: [*c]const f32, C: [*c]f32, ldc: i64, strideC: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasDgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, strideA: c_longlong, B: [*c]const f64, ldb: c_int, strideB: c_longlong, beta: [*c]const f64, C: [*c]f64, ldc: c_int, strideC: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasDgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, strideA: c_longlong, B: [*c]const f64, ldb: i64, strideB: c_longlong, beta: [*c]const f64, C: [*c]f64, ldc: i64, strideC: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasCgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, strideA: c_longlong, B: [*c]const cuComplex, ldb: c_int, strideB: c_longlong, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int, strideC: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasCgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, strideA: c_longlong, B: [*c]const cuComplex, ldb: i64, strideB: c_longlong, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64, strideC: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasCgemm3mStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, strideA: c_longlong, B: [*c]const cuComplex, ldb: c_int, strideB: c_longlong, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int, strideC: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasCgemm3mStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, strideA: c_longlong, B: [*c]const cuComplex, ldb: i64, strideB: c_longlong, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: i64, strideC: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasZgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, strideA: c_longlong, B: [*c]const cuDoubleComplex, ldb: c_int, strideB: c_longlong, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int, strideC: c_longlong, batchCount: c_int) cublasStatus_t;
pub extern fn cublasZgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, strideA: c_longlong, B: [*c]const cuDoubleComplex, ldb: i64, strideB: c_longlong, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: i64, strideC: c_longlong, batchCount: i64) cublasStatus_t;
pub extern fn cublasGemmBatchedEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: ?*const anyopaque, Aarray: [*c]const ?*const anyopaque, Atype: cudaDataType, lda: c_int, Barray: [*c]const ?*const anyopaque, Btype: cudaDataType, ldb: c_int, beta: ?*const anyopaque, Carray: [*c]const ?*anyopaque, Ctype: cudaDataType, ldc: c_int, batchCount: c_int, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t) cublasStatus_t;
pub extern fn cublasGemmBatchedEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: ?*const anyopaque, Aarray: [*c]const ?*const anyopaque, Atype: cudaDataType, lda: i64, Barray: [*c]const ?*const anyopaque, Btype: cudaDataType, ldb: i64, beta: ?*const anyopaque, Carray: [*c]const ?*anyopaque, Ctype: cudaDataType, ldc: i64, batchCount: i64, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t) cublasStatus_t;
pub extern fn cublasGemmStridedBatchedEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, k: c_int, alpha: ?*const anyopaque, A: ?*const anyopaque, Atype: cudaDataType, lda: c_int, strideA: c_longlong, B: ?*const anyopaque, Btype: cudaDataType, ldb: c_int, strideB: c_longlong, beta: ?*const anyopaque, C: ?*anyopaque, Ctype: cudaDataType, ldc: c_int, strideC: c_longlong, batchCount: c_int, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t) cublasStatus_t;
pub extern fn cublasGemmStridedBatchedEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, k: i64, alpha: ?*const anyopaque, A: ?*const anyopaque, Atype: cudaDataType, lda: i64, strideA: c_longlong, B: ?*const anyopaque, Btype: cudaDataType, ldb: i64, strideB: c_longlong, beta: ?*const anyopaque, C: ?*anyopaque, Ctype: cudaDataType, ldc: i64, strideC: c_longlong, batchCount: i64, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t) cublasStatus_t;
pub extern fn cublasSgemmGroupedBatched(handle: cublasHandle_t, transa_array: [*c]const cublasOperation_t, transb_array: [*c]const cublasOperation_t, m_array: [*c]const c_int, n_array: [*c]const c_int, k_array: [*c]const c_int, alpha_array: [*c]const f32, Aarray: [*c]const [*c]const f32, lda_array: [*c]const c_int, Barray: [*c]const [*c]const f32, ldb_array: [*c]const c_int, beta_array: [*c]const f32, Carray: [*c]const [*c]f32, ldc_array: [*c]const c_int, group_count: c_int, group_size: [*c]const c_int) cublasStatus_t;
pub extern fn cublasSgemmGroupedBatched_64(handle: cublasHandle_t, transa_array: [*c]const cublasOperation_t, transb_array: [*c]const cublasOperation_t, m_array: [*c]const i64, n_array: [*c]const i64, k_array: [*c]const i64, alpha_array: [*c]const f32, Aarray: [*c]const [*c]const f32, lda_array: [*c]const i64, Barray: [*c]const [*c]const f32, ldb_array: [*c]const i64, beta_array: [*c]const f32, Carray: [*c]const [*c]f32, ldc_array: [*c]const i64, group_count: i64, group_size: [*c]const i64) cublasStatus_t;
pub extern fn cublasDgemmGroupedBatched(handle: cublasHandle_t, transa_array: [*c]const cublasOperation_t, transb_array: [*c]const cublasOperation_t, m_array: [*c]const c_int, n_array: [*c]const c_int, k_array: [*c]const c_int, alpha_array: [*c]const f64, Aarray: [*c]const [*c]const f64, lda_array: [*c]const c_int, Barray: [*c]const [*c]const f64, ldb_array: [*c]const c_int, beta_array: [*c]const f64, Carray: [*c]const [*c]f64, ldc_array: [*c]const c_int, group_count: c_int, group_size: [*c]const c_int) cublasStatus_t;
pub extern fn cublasDgemmGroupedBatched_64(handle: cublasHandle_t, transa_array: [*c]const cublasOperation_t, transb_array: [*c]const cublasOperation_t, m_array: [*c]const i64, n_array: [*c]const i64, k_array: [*c]const i64, alpha_array: [*c]const f64, Aarray: [*c]const [*c]const f64, lda_array: [*c]const i64, Barray: [*c]const [*c]const f64, ldb_array: [*c]const i64, beta_array: [*c]const f64, Carray: [*c]const [*c]f64, ldc_array: [*c]const i64, group_count: i64, group_size: [*c]const i64) cublasStatus_t;
pub extern fn cublasGemmGroupedBatchedEx(handle: cublasHandle_t, transa_array: [*c]const cublasOperation_t, transb_array: [*c]const cublasOperation_t, m_array: [*c]const c_int, n_array: [*c]const c_int, k_array: [*c]const c_int, alpha_array: ?*const anyopaque, Aarray: [*c]const ?*const anyopaque, Atype: cudaDataType_t, lda_array: [*c]const c_int, Barray: [*c]const ?*const anyopaque, Btype: cudaDataType_t, ldb_array: [*c]const c_int, beta_array: ?*const anyopaque, Carray: [*c]const ?*anyopaque, Ctype: cudaDataType_t, ldc_array: [*c]const c_int, group_count: c_int, group_size: [*c]const c_int, computeType: cublasComputeType_t) cublasStatus_t;
pub extern fn cublasGemmGroupedBatchedEx_64(handle: cublasHandle_t, transa_array: [*c]const cublasOperation_t, transb_array: [*c]const cublasOperation_t, m_array: [*c]const i64, n_array: [*c]const i64, k_array: [*c]const i64, alpha_array: ?*const anyopaque, Aarray: [*c]const ?*const anyopaque, Atype: cudaDataType_t, lda_array: [*c]const i64, Barray: [*c]const ?*const anyopaque, Btype: cudaDataType_t, ldb_array: [*c]const i64, beta_array: ?*const anyopaque, Carray: [*c]const ?*anyopaque, Ctype: cudaDataType_t, ldc_array: [*c]const i64, group_count: i64, group_size: [*c]const i64, computeType: cublasComputeType_t) cublasStatus_t;
pub extern fn cublasSgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, beta: [*c]const f32, B: [*c]const f32, ldb: c_int, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasSgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f32, A: [*c]const f32, lda: i64, beta: [*c]const f32, B: [*c]const f32, ldb: i64, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, beta: [*c]const f64, B: [*c]const f64, ldb: c_int, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, alpha: [*c]const f64, A: [*c]const f64, lda: i64, beta: [*c]const f64, B: [*c]const f64, ldb: i64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, beta: [*c]const cuComplex, B: [*c]const cuComplex, ldb: c_int, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: i64, beta: [*c]const cuComplex, B: [*c]const cuComplex, ldb: i64, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, beta: [*c]const cuDoubleComplex, B: [*c]const cuDoubleComplex, ldb: c_int, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: i64, beta: [*c]const cuDoubleComplex, B: [*c]const cuDoubleComplex, ldb: i64, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasStrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const [*c]const f32, lda: c_int, B: [*c]const [*c]f32, ldb: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasStrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const f32, A: [*c]const [*c]const f32, lda: i64, B: [*c]const [*c]f32, ldb: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasDtrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const [*c]const f64, lda: c_int, B: [*c]const [*c]f64, ldb: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasDtrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const f64, A: [*c]const [*c]const f64, lda: i64, B: [*c]const [*c]f64, ldb: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasCtrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const [*c]const cuComplex, lda: c_int, B: [*c]const [*c]cuComplex, ldb: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasCtrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const cuComplex, A: [*c]const [*c]const cuComplex, lda: i64, B: [*c]const [*c]cuComplex, ldb: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasZtrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const [*c]const cuDoubleComplex, lda: c_int, B: [*c]const [*c]cuDoubleComplex, ldb: c_int, batchCount: c_int) cublasStatus_t;
pub extern fn cublasZtrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: i64, n: i64, alpha: [*c]const cuDoubleComplex, A: [*c]const [*c]const cuDoubleComplex, lda: i64, B: [*c]const [*c]cuDoubleComplex, ldb: i64, batchCount: i64) cublasStatus_t;
pub extern fn cublasSdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, x: [*c]const f32, incx: c_int, C: [*c]f32, ldc: c_int) cublasStatus_t;
pub extern fn cublasSdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: i64, n: i64, A: [*c]const f32, lda: i64, x: [*c]const f32, incx: i64, C: [*c]f32, ldc: i64) cublasStatus_t;
pub extern fn cublasDdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, x: [*c]const f64, incx: c_int, C: [*c]f64, ldc: c_int) cublasStatus_t;
pub extern fn cublasDdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: i64, n: i64, A: [*c]const f64, lda: i64, x: [*c]const f64, incx: i64, C: [*c]f64, ldc: i64) cublasStatus_t;
pub extern fn cublasCdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: c_int, n: c_int, A: [*c]const cuComplex, lda: c_int, x: [*c]const cuComplex, incx: c_int, C: [*c]cuComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasCdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: i64, n: i64, A: [*c]const cuComplex, lda: i64, x: [*c]const cuComplex, incx: i64, C: [*c]cuComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasZdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: c_int, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, x: [*c]const cuDoubleComplex, incx: c_int, C: [*c]cuDoubleComplex, ldc: c_int) cublasStatus_t;
pub extern fn cublasZdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: i64, n: i64, A: [*c]const cuDoubleComplex, lda: i64, x: [*c]const cuDoubleComplex, incx: i64, C: [*c]cuDoubleComplex, ldc: i64) cublasStatus_t;
pub extern fn cublasSmatinvBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const f32, lda: c_int, Ainv: [*c]const [*c]f32, lda_inv: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasDmatinvBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const f64, lda: c_int, Ainv: [*c]const [*c]f64, lda_inv: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasCmatinvBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const cuComplex, lda: c_int, Ainv: [*c]const [*c]cuComplex, lda_inv: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasZmatinvBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const cuDoubleComplex, lda: c_int, Ainv: [*c]const [*c]cuDoubleComplex, lda_inv: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasSgeqrfBatched(handle: cublasHandle_t, m: c_int, n: c_int, Aarray: [*c]const [*c]f32, lda: c_int, TauArray: [*c]const [*c]f32, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasDgeqrfBatched(handle: cublasHandle_t, m: c_int, n: c_int, Aarray: [*c]const [*c]f64, lda: c_int, TauArray: [*c]const [*c]f64, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasCgeqrfBatched(handle: cublasHandle_t, m: c_int, n: c_int, Aarray: [*c]const [*c]cuComplex, lda: c_int, TauArray: [*c]const [*c]cuComplex, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasZgeqrfBatched(handle: cublasHandle_t, m: c_int, n: c_int, Aarray: [*c]const [*c]cuDoubleComplex, lda: c_int, TauArray: [*c]const [*c]cuDoubleComplex, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasSgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]f32, lda: c_int, Carray: [*c]const [*c]f32, ldc: c_int, info: [*c]c_int, devInfoArray: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasDgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]f64, lda: c_int, Carray: [*c]const [*c]f64, ldc: c_int, info: [*c]c_int, devInfoArray: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasCgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]cuComplex, lda: c_int, Carray: [*c]const [*c]cuComplex, ldc: c_int, info: [*c]c_int, devInfoArray: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasZgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: c_int, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]cuDoubleComplex, lda: c_int, Carray: [*c]const [*c]cuDoubleComplex, ldc: c_int, info: [*c]c_int, devInfoArray: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasStpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, AP: [*c]const f32, A: [*c]f32, lda: c_int) cublasStatus_t;
pub extern fn cublasDtpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, AP: [*c]const f64, A: [*c]f64, lda: c_int) cublasStatus_t;
pub extern fn cublasCtpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, AP: [*c]const cuComplex, A: [*c]cuComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasZtpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, AP: [*c]const cuDoubleComplex, A: [*c]cuDoubleComplex, lda: c_int) cublasStatus_t;
pub extern fn cublasStrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, AP: [*c]f32) cublasStatus_t;
pub extern fn cublasDtrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, AP: [*c]f64) cublasStatus_t;
pub extern fn cublasCtrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, AP: [*c]cuComplex) cublasStatus_t;
pub extern fn cublasZtrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, AP: [*c]cuDoubleComplex) cublasStatus_t;
pub extern fn cublasSgetrfBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]f32, lda: c_int, P: [*c]c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasDgetrfBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]f64, lda: c_int, P: [*c]c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasCgetrfBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]cuComplex, lda: c_int, P: [*c]c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasZgetrfBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]cuDoubleComplex, lda: c_int, P: [*c]c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasSgetriBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const f32, lda: c_int, P: [*c]const c_int, C: [*c]const [*c]f32, ldc: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasDgetriBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const f64, lda: c_int, P: [*c]const c_int, C: [*c]const [*c]f64, ldc: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasCgetriBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const cuComplex, lda: c_int, P: [*c]const c_int, C: [*c]const [*c]cuComplex, ldc: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasZgetriBatched(handle: cublasHandle_t, n: c_int, A: [*c]const [*c]const cuDoubleComplex, lda: c_int, P: [*c]const c_int, C: [*c]const [*c]cuDoubleComplex, ldc: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasSgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]const f32, lda: c_int, devIpiv: [*c]const c_int, Barray: [*c]const [*c]f32, ldb: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasDgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]const f64, lda: c_int, devIpiv: [*c]const c_int, Barray: [*c]const [*c]f64, ldb: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasCgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]const cuComplex, lda: c_int, devIpiv: [*c]const c_int, Barray: [*c]const [*c]cuComplex, ldb: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasZgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, Aarray: [*c]const [*c]const cuDoubleComplex, lda: c_int, devIpiv: [*c]const c_int, Barray: [*c]const [*c]cuDoubleComplex, ldb: c_int, info: [*c]c_int, batchSize: c_int) cublasStatus_t;
pub extern fn cublasUint8gemmBias(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, transc: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const u8, A_bias: c_int, lda: c_int, B: [*c]const u8, B_bias: c_int, ldb: c_int, C: [*c]u8, C_bias: c_int, ldc: c_int, C_mult: c_int, C_shift: c_int) cublasStatus_t;
pub const struct_cudnnContext = opaque {};
pub const cudnnHandle_t = ?*struct_cudnnContext;
pub extern fn cudnnGetVersion() usize;
pub extern fn cudnnGetMaxDeviceVersion() usize;
pub extern fn cudnnGetCudartVersion() usize;
pub const CUDNN_STATUS_SUCCESS: c_int = 0;
pub const CUDNN_STATUS_NOT_INITIALIZED: c_int = 1001;
pub const CUDNN_STATUS_SUBLIBRARY_VERSION_MISMATCH: c_int = 1002;
pub const CUDNN_STATUS_SERIALIZATION_VERSION_MISMATCH: c_int = 1003;
pub const CUDNN_STATUS_DEPRECATED: c_int = 1004;
pub const CUDNN_STATUS_LICENSE_ERROR: c_int = 1005;
pub const CUDNN_STATUS_RUNTIME_IN_PROGRESS: c_int = 1006;
pub const CUDNN_STATUS_RUNTIME_FP_OVERFLOW: c_int = 1007;
pub const CUDNN_STATUS_SUBLIBRARY_LOADING_FAILED: c_int = 1008;
pub const CUDNN_STATUS_BAD_PARAM: c_int = 2000;
pub const CUDNN_STATUS_BAD_PARAM_NULL_POINTER: c_int = 2002;
pub const CUDNN_STATUS_BAD_PARAM_MISALIGNED_POINTER: c_int = 2003;
pub const CUDNN_STATUS_BAD_PARAM_NOT_FINALIZED: c_int = 2004;
pub const CUDNN_STATUS_BAD_PARAM_OUT_OF_BOUND: c_int = 2005;
pub const CUDNN_STATUS_BAD_PARAM_SIZE_INSUFFICIENT: c_int = 2006;
pub const CUDNN_STATUS_BAD_PARAM_STREAM_MISMATCH: c_int = 2007;
pub const CUDNN_STATUS_BAD_PARAM_SHAPE_MISMATCH: c_int = 2008;
pub const CUDNN_STATUS_BAD_PARAM_DUPLICATED_ENTRIES: c_int = 2009;
pub const CUDNN_STATUS_BAD_PARAM_ATTRIBUTE_TYPE: c_int = 2010;
pub const CUDNN_STATUS_BAD_PARAM_CUDA_GRAPH_MISMATCH: c_int = 2011;
pub const CUDNN_STATUS_BAD_PARAM_DESCRIPTOR_TYPE: c_int = 2012;
pub const CUDNN_STATUS_NOT_SUPPORTED: c_int = 3000;
pub const CUDNN_STATUS_NOT_SUPPORTED_GRAPH_PATTERN: c_int = 3001;
pub const CUDNN_STATUS_NOT_SUPPORTED_SHAPE: c_int = 3002;
pub const CUDNN_STATUS_NOT_SUPPORTED_DATA_TYPE: c_int = 3003;
pub const CUDNN_STATUS_NOT_SUPPORTED_LAYOUT: c_int = 3004;
pub const CUDNN_STATUS_NOT_SUPPORTED_INCOMPATIBLE_CUDA_DRIVER: c_int = 3005;
pub const CUDNN_STATUS_NOT_SUPPORTED_INCOMPATIBLE_CUDART: c_int = 3006;
pub const CUDNN_STATUS_NOT_SUPPORTED_ARCH_MISMATCH: c_int = 3007;
pub const CUDNN_STATUS_NOT_SUPPORTED_RUNTIME_PREREQUISITE_MISSING: c_int = 3008;
pub const CUDNN_STATUS_NOT_SUPPORTED_SUBLIBRARY_UNAVAILABLE: c_int = 3009;
pub const CUDNN_STATUS_NOT_SUPPORTED_SHARED_MEMORY_INSUFFICIENT: c_int = 3010;
pub const CUDNN_STATUS_NOT_SUPPORTED_PADDING: c_int = 3011;
pub const CUDNN_STATUS_NOT_SUPPORTED_BAD_LAUNCH_PARAM: c_int = 3012;
pub const CUDNN_STATUS_NOT_SUPPORTED_CUDA_GRAPH_NATIVE_API: c_int = 3013;
pub const CUDNN_STATUS_INTERNAL_ERROR: c_int = 4000;
pub const CUDNN_STATUS_INTERNAL_ERROR_COMPILATION_FAILED: c_int = 4001;
pub const CUDNN_STATUS_INTERNAL_ERROR_UNEXPECTED_VALUE: c_int = 4002;
pub const CUDNN_STATUS_INTERNAL_ERROR_HOST_ALLOCATION_FAILED: c_int = 4003;
pub const CUDNN_STATUS_INTERNAL_ERROR_DEVICE_ALLOCATION_FAILED: c_int = 4004;
pub const CUDNN_STATUS_INTERNAL_ERROR_BAD_LAUNCH_PARAM: c_int = 4005;
pub const CUDNN_STATUS_INTERNAL_ERROR_TEXTURE_CREATION_FAILED: c_int = 4006;
pub const CUDNN_STATUS_EXECUTION_FAILED: c_int = 5000;
pub const CUDNN_STATUS_EXECUTION_FAILED_CUDA_DRIVER: c_int = 5001;
pub const CUDNN_STATUS_EXECUTION_FAILED_CUBLAS: c_int = 5002;
pub const CUDNN_STATUS_EXECUTION_FAILED_CUDART: c_int = 5003;
pub const CUDNN_STATUS_EXECUTION_FAILED_CURAND: c_int = 5004;
pub const CUDNN_STATUS_ALLOC_FAILED: c_int = 4003;
pub const CUDNN_STATUS_INVALID_VALUE: c_int = 2001;
pub const CUDNN_STATUS_ARCH_MISMATCH: c_int = 3007;
pub const CUDNN_STATUS_MAPPING_ERROR: c_int = 4006;
pub const CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING: c_int = 3008;
pub const CUDNN_STATUS_VERSION_MISMATCH: c_int = 1002;
pub const cudnnStatus_t = c_uint;
pub extern fn cudnnGetErrorString(status: cudnnStatus_t) [*c]const u8;
pub extern fn cudnnGetLastErrorString(message: [*c]u8, max_size: usize) void;
pub const struct_cudnnRuntimeTag_t = opaque {};
pub const cudnnRuntimeTag_t = struct_cudnnRuntimeTag_t;
pub const CUDNN_ERRQUERY_RAWCODE: c_int = 0;
pub const CUDNN_ERRQUERY_NONBLOCKING: c_int = 1;
pub const CUDNN_ERRQUERY_BLOCKING: c_int = 2;
pub const cudnnErrQueryMode_t = c_uint;
pub extern fn cudnnQueryRuntimeError(handle: cudnnHandle_t, rstatus: [*c]cudnnStatus_t, mode: cudnnErrQueryMode_t, tag: ?*cudnnRuntimeTag_t) cudnnStatus_t;
pub extern fn cudnnGetProperty(@"type": libraryPropertyType, value: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnCreate(handle: [*c]cudnnHandle_t) cudnnStatus_t;
pub extern fn cudnnDestroy(handle: cudnnHandle_t) cudnnStatus_t;
pub extern fn cudnnSetStream(handle: cudnnHandle_t, streamId: cudaStream_t) cudnnStatus_t;
pub extern fn cudnnGetStream(handle: cudnnHandle_t, streamId: [*c]cudaStream_t) cudnnStatus_t;
pub const CUDNN_DATA_FLOAT: c_int = 0;
pub const CUDNN_DATA_DOUBLE: c_int = 1;
pub const CUDNN_DATA_HALF: c_int = 2;
pub const CUDNN_DATA_INT8: c_int = 3;
pub const CUDNN_DATA_INT32: c_int = 4;
pub const CUDNN_DATA_INT8x4: c_int = 5;
pub const CUDNN_DATA_UINT8: c_int = 6;
pub const CUDNN_DATA_UINT8x4: c_int = 7;
pub const CUDNN_DATA_INT8x32: c_int = 8;
pub const CUDNN_DATA_BFLOAT16: c_int = 9;
pub const CUDNN_DATA_INT64: c_int = 10;
pub const CUDNN_DATA_BOOLEAN: c_int = 11;
pub const CUDNN_DATA_FP8_E4M3: c_int = 12;
pub const CUDNN_DATA_FP8_E5M2: c_int = 13;
pub const CUDNN_DATA_FAST_FLOAT_FOR_FP8: c_int = 14;
pub const CUDNN_DATA_FP8_E8M0: c_int = 15;
pub const CUDNN_DATA_FP4_E2M1: c_int = 16;
pub const cudnnDataType_t = c_uint;
pub const CUDNN_DEFAULT_MATH: c_int = 0;
pub const CUDNN_TENSOR_OP_MATH: c_int = 1;
pub const CUDNN_TENSOR_OP_MATH_ALLOW_CONVERSION: c_int = 2;
pub const CUDNN_FMA_MATH: c_int = 3;
pub const cudnnMathType_t = c_uint;
pub const CUDNN_NOT_PROPAGATE_NAN: c_int = 0;
pub const CUDNN_PROPAGATE_NAN: c_int = 1;
pub const cudnnNanPropagation_t = c_uint;
pub const CUDNN_CTC_ZERO_OOB_GRADIENTS: c_int = 0;
pub const CUDNN_CTC_SKIP_OOB_GRADIENTS: c_int = 1;
pub const cudnnCTCGradMode_t = c_uint;
pub const CUDNN_TENSOR_NCHW: c_int = 0;
pub const CUDNN_TENSOR_NHWC: c_int = 1;
pub const CUDNN_TENSOR_NCHW_VECT_C: c_int = 2;
pub const cudnnTensorFormat_t = c_uint;
pub const CUDNN_REDUCE_TENSOR_ADD: c_int = 0;
pub const CUDNN_REDUCE_TENSOR_MUL: c_int = 1;
pub const CUDNN_REDUCE_TENSOR_MIN: c_int = 2;
pub const CUDNN_REDUCE_TENSOR_MAX: c_int = 3;
pub const CUDNN_REDUCE_TENSOR_AMAX: c_int = 4;
pub const CUDNN_REDUCE_TENSOR_AVG: c_int = 5;
pub const CUDNN_REDUCE_TENSOR_NORM1: c_int = 6;
pub const CUDNN_REDUCE_TENSOR_NORM2: c_int = 7;
pub const CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS: c_int = 8;
pub const cudnnReduceTensorOp_t = c_uint;
pub const CUDNN_ACTIVATION_SIGMOID: c_int = 0;
pub const CUDNN_ACTIVATION_RELU: c_int = 1;
pub const CUDNN_ACTIVATION_TANH: c_int = 2;
pub const CUDNN_ACTIVATION_CLIPPED_RELU: c_int = 3;
pub const CUDNN_ACTIVATION_ELU: c_int = 4;
pub const CUDNN_ACTIVATION_IDENTITY: c_int = 5;
pub const CUDNN_ACTIVATION_SWISH: c_int = 6;
pub const cudnnActivationMode_t = c_uint;
pub const CUDNN_SEV_FATAL: c_int = 0;
pub const CUDNN_SEV_ERROR: c_int = 1;
pub const CUDNN_SEV_WARNING: c_int = 2;
pub const CUDNN_SEV_INFO: c_int = 3;
pub const cudnnSeverity_t = c_uint;
pub const struct_cudnnDebugStruct = extern struct {
    cudnn_version: c_uint = @import("std").mem.zeroes(c_uint),
    cudnnStatus: cudnnStatus_t = @import("std").mem.zeroes(cudnnStatus_t),
    time_sec: c_uint = @import("std").mem.zeroes(c_uint),
    time_usec: c_uint = @import("std").mem.zeroes(c_uint),
    time_delta: c_uint = @import("std").mem.zeroes(c_uint),
    handle: cudnnHandle_t = @import("std").mem.zeroes(cudnnHandle_t),
    stream: cudaStream_t = @import("std").mem.zeroes(cudaStream_t),
    pid: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    tid: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    cudaDeviceId: c_int = @import("std").mem.zeroes(c_int),
    reserved: [15]c_int = @import("std").mem.zeroes([15]c_int),
};
pub const cudnnDebug_t = struct_cudnnDebugStruct;
pub const cudnnCallback_t = ?*const fn (cudnnSeverity_t, ?*anyopaque, [*c]const cudnnDebug_t, [*c]const u8) callconv(.c) void;
pub extern fn cudnnSetCallback(mask: c_uint, udata: ?*anyopaque, fptr: cudnnCallback_t) cudnnStatus_t;
pub extern fn cudnnGetCallback(mask: [*c]c_uint, udata: [*c]?*anyopaque, fptr: [*c]cudnnCallback_t) cudnnStatus_t;
pub extern fn cudnnGraphVersionCheck() cudnnStatus_t;
pub const CUDNN_CONVOLUTION: c_int = 0;
pub const CUDNN_CROSS_CORRELATION: c_int = 1;
pub const cudnnConvolutionMode_t = c_uint;
pub const CUDNN_DEFAULT_REORDER: c_int = 0;
pub const CUDNN_NO_REORDER: c_int = 1;
pub const cudnnReorderType_t = c_uint;
pub const cudnnBackendDescriptor_t = ?*anyopaque;
pub const struct_cudnnFractionStruct = extern struct {
    numerator: i64 = @import("std").mem.zeroes(i64),
    denominator: i64 = @import("std").mem.zeroes(i64),
};
pub const cudnnFraction_t = struct_cudnnFractionStruct;
pub const CUDNN_POINTWISE_ADD: c_int = 0;
pub const CUDNN_POINTWISE_ADD_SQUARE: c_int = 5;
pub const CUDNN_POINTWISE_DIV: c_int = 6;
pub const CUDNN_POINTWISE_MAX: c_int = 3;
pub const CUDNN_POINTWISE_MIN: c_int = 2;
pub const CUDNN_POINTWISE_MOD: c_int = 7;
pub const CUDNN_POINTWISE_MUL: c_int = 1;
pub const CUDNN_POINTWISE_POW: c_int = 8;
pub const CUDNN_POINTWISE_SUB: c_int = 9;
pub const CUDNN_POINTWISE_ABS: c_int = 10;
pub const CUDNN_POINTWISE_CEIL: c_int = 11;
pub const CUDNN_POINTWISE_COS: c_int = 12;
pub const CUDNN_POINTWISE_EXP: c_int = 13;
pub const CUDNN_POINTWISE_FLOOR: c_int = 14;
pub const CUDNN_POINTWISE_LOG: c_int = 15;
pub const CUDNN_POINTWISE_NEG: c_int = 16;
pub const CUDNN_POINTWISE_RSQRT: c_int = 17;
pub const CUDNN_POINTWISE_SIN: c_int = 18;
pub const CUDNN_POINTWISE_SQRT: c_int = 4;
pub const CUDNN_POINTWISE_TAN: c_int = 19;
pub const CUDNN_POINTWISE_ERF: c_int = 20;
pub const CUDNN_POINTWISE_IDENTITY: c_int = 21;
pub const CUDNN_POINTWISE_RECIPROCAL: c_int = 22;
pub const CUDNN_POINTWISE_ATAN2: c_int = 23;
pub const CUDNN_POINTWISE_RELU_FWD: c_int = 100;
pub const CUDNN_POINTWISE_TANH_FWD: c_int = 101;
pub const CUDNN_POINTWISE_SIGMOID_FWD: c_int = 102;
pub const CUDNN_POINTWISE_ELU_FWD: c_int = 103;
pub const CUDNN_POINTWISE_GELU_FWD: c_int = 104;
pub const CUDNN_POINTWISE_SOFTPLUS_FWD: c_int = 105;
pub const CUDNN_POINTWISE_SWISH_FWD: c_int = 106;
pub const CUDNN_POINTWISE_GELU_APPROX_TANH_FWD: c_int = 107;
pub const CUDNN_POINTWISE_RELU_BWD: c_int = 200;
pub const CUDNN_POINTWISE_TANH_BWD: c_int = 201;
pub const CUDNN_POINTWISE_SIGMOID_BWD: c_int = 202;
pub const CUDNN_POINTWISE_ELU_BWD: c_int = 203;
pub const CUDNN_POINTWISE_GELU_BWD: c_int = 204;
pub const CUDNN_POINTWISE_SOFTPLUS_BWD: c_int = 205;
pub const CUDNN_POINTWISE_SWISH_BWD: c_int = 206;
pub const CUDNN_POINTWISE_GELU_APPROX_TANH_BWD: c_int = 207;
pub const CUDNN_POINTWISE_CMP_EQ: c_int = 300;
pub const CUDNN_POINTWISE_CMP_NEQ: c_int = 301;
pub const CUDNN_POINTWISE_CMP_GT: c_int = 302;
pub const CUDNN_POINTWISE_CMP_GE: c_int = 303;
pub const CUDNN_POINTWISE_CMP_LT: c_int = 304;
pub const CUDNN_POINTWISE_CMP_LE: c_int = 305;
pub const CUDNN_POINTWISE_LOGICAL_AND: c_int = 400;
pub const CUDNN_POINTWISE_LOGICAL_OR: c_int = 401;
pub const CUDNN_POINTWISE_LOGICAL_NOT: c_int = 402;
pub const CUDNN_POINTWISE_GEN_INDEX: c_int = 501;
pub const CUDNN_POINTWISE_BINARY_SELECT: c_int = 601;
pub const cudnnPointwiseMode_t = c_uint;
pub const CUDNN_RESAMPLE_NEAREST: c_int = 0;
pub const CUDNN_RESAMPLE_BILINEAR: c_int = 1;
pub const CUDNN_RESAMPLE_AVGPOOL: c_int = 2;
pub const CUDNN_RESAMPLE_AVGPOOL_INCLUDE_PADDING: c_int = 2;
pub const CUDNN_RESAMPLE_AVGPOOL_EXCLUDE_PADDING: c_int = 4;
pub const CUDNN_RESAMPLE_MAXPOOL: c_int = 3;
pub const cudnnResampleMode_t = c_uint;
pub const CUDNN_SIGNAL_SET: c_int = 0;
pub const CUDNN_SIGNAL_WAIT: c_int = 1;
pub const cudnnSignalMode_t = c_uint;
pub const CUDNN_GENSTATS_SUM_SQSUM: c_int = 0;
pub const cudnnGenStatsMode_t = c_uint;
pub const CUDNN_BN_FINALIZE_STATISTICS_TRAINING: c_int = 0;
pub const CUDNN_BN_FINALIZE_STATISTICS_INFERENCE: c_int = 1;
pub const cudnnBnFinalizeStatsMode_t = c_uint;
pub const CUDNN_RNG_DISTRIBUTION_BERNOULLI: c_int = 0;
pub const CUDNN_RNG_DISTRIBUTION_UNIFORM: c_int = 1;
pub const CUDNN_RNG_DISTRIBUTION_NORMAL: c_int = 2;
pub const cudnnRngDistribution_t = c_uint;
pub const CUDNN_ATTR_POINTWISE_MODE: c_int = 0;
pub const CUDNN_ATTR_POINTWISE_MATH_PREC: c_int = 1;
pub const CUDNN_ATTR_POINTWISE_NAN_PROPAGATION: c_int = 2;
pub const CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP: c_int = 3;
pub const CUDNN_ATTR_POINTWISE_RELU_UPPER_CLIP: c_int = 4;
pub const CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP_SLOPE: c_int = 5;
pub const CUDNN_ATTR_POINTWISE_ELU_ALPHA: c_int = 6;
pub const CUDNN_ATTR_POINTWISE_SOFTPLUS_BETA: c_int = 7;
pub const CUDNN_ATTR_POINTWISE_SWISH_BETA: c_int = 8;
pub const CUDNN_ATTR_POINTWISE_AXIS: c_int = 9;
pub const CUDNN_ATTR_CONVOLUTION_COMP_TYPE: c_int = 100;
pub const CUDNN_ATTR_CONVOLUTION_CONV_MODE: c_int = 101;
pub const CUDNN_ATTR_CONVOLUTION_DILATIONS: c_int = 102;
pub const CUDNN_ATTR_CONVOLUTION_FILTER_STRIDES: c_int = 103;
pub const CUDNN_ATTR_CONVOLUTION_POST_PADDINGS: c_int = 104;
pub const CUDNN_ATTR_CONVOLUTION_PRE_PADDINGS: c_int = 105;
pub const CUDNN_ATTR_CONVOLUTION_SPATIAL_DIMS: c_int = 106;
pub const CUDNN_ATTR_ENGINEHEUR_MODE: c_int = 200;
pub const CUDNN_ATTR_ENGINEHEUR_OPERATION_GRAPH: c_int = 201;
pub const CUDNN_ATTR_ENGINEHEUR_RESULTS: c_int = 202;
pub const CUDNN_ATTR_ENGINEHEUR_SM_COUNT_TARGET: c_int = 203;
pub const CUDNN_ATTR_ENGINECFG_ENGINE: c_int = 300;
pub const CUDNN_ATTR_ENGINECFG_INTERMEDIATE_INFO: c_int = 301;
pub const CUDNN_ATTR_ENGINECFG_KNOB_CHOICES: c_int = 302;
pub const CUDNN_ATTR_ENGINECFG_WORKSPACE_SIZE: c_int = 303;
pub const CUDNN_ATTR_ENGINECFG_SHARED_MEMORY_USED: c_int = 304;
pub const CUDNN_ATTR_EXECUTION_PLAN_HANDLE: c_int = 400;
pub const CUDNN_ATTR_EXECUTION_PLAN_ENGINE_CONFIG: c_int = 401;
pub const CUDNN_ATTR_EXECUTION_PLAN_WORKSPACE_SIZE: c_int = 402;
pub const CUDNN_ATTR_EXECUTION_PLAN_COMPUTED_INTERMEDIATE_UIDS: c_int = 403;
pub const CUDNN_ATTR_EXECUTION_PLAN_RUN_ONLY_INTERMEDIATE_UIDS: c_int = 404;
pub const CUDNN_ATTR_EXECUTION_PLAN_JSON_REPRESENTATION: c_int = 405;
pub const CUDNN_ATTR_EXECUTION_PLAN_KERNEL_CACHE: c_int = 406;
pub const CUDNN_ATTR_INTERMEDIATE_INFO_UNIQUE_ID: c_int = 500;
pub const CUDNN_ATTR_INTERMEDIATE_INFO_SIZE: c_int = 501;
pub const CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_DATA_UIDS: c_int = 502;
pub const CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_ATTRIBUTES: c_int = 503;
pub const CUDNN_ATTR_KNOB_CHOICE_KNOB_TYPE: c_int = 600;
pub const CUDNN_ATTR_KNOB_CHOICE_KNOB_VALUE: c_int = 601;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_ALPHA: c_int = 700;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_BETA: c_int = 701;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_CONV_DESC: c_int = 702;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_W: c_int = 703;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_X: c_int = 704;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_Y: c_int = 705;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_ALPHA: c_int = 706;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_BETA: c_int = 707;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_CONV_DESC: c_int = 708;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_W: c_int = 709;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DX: c_int = 710;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DY: c_int = 711;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_ALPHA: c_int = 712;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_BETA: c_int = 713;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_CONV_DESC: c_int = 714;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DW: c_int = 715;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_X: c_int = 716;
pub const CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DY: c_int = 717;
pub const CUDNN_ATTR_OPERATION_POINTWISE_PW_DESCRIPTOR: c_int = 750;
pub const CUDNN_ATTR_OPERATION_POINTWISE_XDESC: c_int = 751;
pub const CUDNN_ATTR_OPERATION_POINTWISE_BDESC: c_int = 752;
pub const CUDNN_ATTR_OPERATION_POINTWISE_YDESC: c_int = 753;
pub const CUDNN_ATTR_OPERATION_POINTWISE_ALPHA1: c_int = 754;
pub const CUDNN_ATTR_OPERATION_POINTWISE_ALPHA2: c_int = 755;
pub const CUDNN_ATTR_OPERATION_POINTWISE_DXDESC: c_int = 756;
pub const CUDNN_ATTR_OPERATION_POINTWISE_DYDESC: c_int = 757;
pub const CUDNN_ATTR_OPERATION_POINTWISE_TDESC: c_int = 758;
pub const CUDNN_ATTR_OPERATION_GENSTATS_MODE: c_int = 770;
pub const CUDNN_ATTR_OPERATION_GENSTATS_MATH_PREC: c_int = 771;
pub const CUDNN_ATTR_OPERATION_GENSTATS_XDESC: c_int = 772;
pub const CUDNN_ATTR_OPERATION_GENSTATS_SUMDESC: c_int = 773;
pub const CUDNN_ATTR_OPERATION_GENSTATS_SQSUMDESC: c_int = 774;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_STATS_MODE: c_int = 780;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_MATH_PREC: c_int = 781;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SUM_DESC: c_int = 782;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SQ_SUM_DESC: c_int = 783;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SCALE_DESC: c_int = 784;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_BIAS_DESC: c_int = 785;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_MEAN_DESC: c_int = 786;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_VAR_DESC: c_int = 787;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_MEAN_DESC: c_int = 788;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_VAR_DESC: c_int = 789;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_MEAN_DESC: c_int = 790;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_INV_STD_DESC: c_int = 791;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_SCALE_DESC: c_int = 792;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_BIAS_DESC: c_int = 793;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_ACCUM_COUNT_DESC: c_int = 794;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EPSILON_DESC: c_int = 795;
pub const CUDNN_ATTR_OPERATION_BN_FINALIZE_EXP_AVERATE_FACTOR_DESC: c_int = 796;
pub const CUDNN_ATTR_OPERATIONGRAPH_HANDLE: c_int = 800;
pub const CUDNN_ATTR_OPERATIONGRAPH_OPS: c_int = 801;
pub const CUDNN_ATTR_OPERATIONGRAPH_ENGINE_GLOBAL_COUNT: c_int = 802;
pub const CUDNN_ATTR_OPERATIONGRAPH_IS_DYNAMIC_SHAPE_ENABLED: c_int = 803;
pub const CUDNN_ATTR_OPERATIONGRAPH_IS_SAME_TOPOLOGY: c_int = 804;
pub const CUDNN_ATTR_TENSOR_BYTE_ALIGNMENT: c_int = 900;
pub const CUDNN_ATTR_TENSOR_DATA_TYPE: c_int = 901;
pub const CUDNN_ATTR_TENSOR_DIMENSIONS: c_int = 902;
pub const CUDNN_ATTR_TENSOR_STRIDES: c_int = 903;
pub const CUDNN_ATTR_TENSOR_VECTOR_COUNT: c_int = 904;
pub const CUDNN_ATTR_TENSOR_VECTORIZED_DIMENSION: c_int = 905;
pub const CUDNN_ATTR_TENSOR_UNIQUE_ID: c_int = 906;
pub const CUDNN_ATTR_TENSOR_IS_VIRTUAL: c_int = 907;
pub const CUDNN_ATTR_TENSOR_IS_BY_VALUE: c_int = 908;
pub const CUDNN_ATTR_TENSOR_REORDERING_MODE: c_int = 909;
pub const CUDNN_ATTR_TENSOR_RAGGED_OFFSET_DESC: c_int = 913;
pub const CUDNN_ATTR_VARIANT_PACK_UNIQUE_IDS: c_int = 1000;
pub const CUDNN_ATTR_VARIANT_PACK_DATA_POINTERS: c_int = 1001;
pub const CUDNN_ATTR_VARIANT_PACK_INTERMEDIATES: c_int = 1002;
pub const CUDNN_ATTR_VARIANT_PACK_WORKSPACE: c_int = 1003;
pub const CUDNN_ATTR_LAYOUT_INFO_TENSOR_UID: c_int = 1100;
pub const CUDNN_ATTR_LAYOUT_INFO_TYPES: c_int = 1101;
pub const CUDNN_ATTR_KNOB_INFO_TYPE: c_int = 1200;
pub const CUDNN_ATTR_KNOB_INFO_MAXIMUM_VALUE: c_int = 1201;
pub const CUDNN_ATTR_KNOB_INFO_MINIMUM_VALUE: c_int = 1202;
pub const CUDNN_ATTR_KNOB_INFO_STRIDE: c_int = 1203;
pub const CUDNN_ATTR_ENGINE_OPERATION_GRAPH: c_int = 1300;
pub const CUDNN_ATTR_ENGINE_GLOBAL_INDEX: c_int = 1301;
pub const CUDNN_ATTR_ENGINE_KNOB_INFO: c_int = 1302;
pub const CUDNN_ATTR_ENGINE_NUMERICAL_NOTE: c_int = 1303;
pub const CUDNN_ATTR_ENGINE_LAYOUT_INFO: c_int = 1304;
pub const CUDNN_ATTR_ENGINE_BEHAVIOR_NOTE: c_int = 1305;
pub const CUDNN_ATTR_ENGINE_SM_COUNT_TARGET: c_int = 1306;
pub const CUDNN_ATTR_MATMUL_COMP_TYPE: c_int = 1500;
pub const CUDNN_ATTR_MATMUL_PADDING_VALUE: c_int = 1503;
pub const CUDNN_ATTR_OPERATION_MATMUL_ADESC: c_int = 1520;
pub const CUDNN_ATTR_OPERATION_MATMUL_BDESC: c_int = 1521;
pub const CUDNN_ATTR_OPERATION_MATMUL_CDESC: c_int = 1522;
pub const CUDNN_ATTR_OPERATION_MATMUL_DESC: c_int = 1523;
pub const CUDNN_ATTR_OPERATION_MATMUL_IRREGULARLY_STRIDED_BATCH_COUNT: c_int = 1524;
pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_M_OVERRIDE_DESC: c_int = 1525;
pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_N_OVERRIDE_DESC: c_int = 1526;
pub const CUDNN_ATTR_OPERATION_MATMUL_GEMM_K_OVERRIDE_DESC: c_int = 1527;
pub const CUDNN_ATTR_REDUCTION_OPERATOR: c_int = 1600;
pub const CUDNN_ATTR_REDUCTION_COMP_TYPE: c_int = 1601;
pub const CUDNN_ATTR_OPERATION_REDUCTION_XDESC: c_int = 1610;
pub const CUDNN_ATTR_OPERATION_REDUCTION_YDESC: c_int = 1611;
pub const CUDNN_ATTR_OPERATION_REDUCTION_DESC: c_int = 1612;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MATH_PREC: c_int = 1620;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MEAN_DESC: c_int = 1621;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_INVSTD_DESC: c_int = 1622;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_BN_SCALE_DESC: c_int = 1623;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_X_DESC: c_int = 1624;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DY_DESC: c_int = 1625;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_SCALE_DESC: c_int = 1626;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_BIAS_DESC: c_int = 1627;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_DY_SCALE_DESC: c_int = 1628;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_X_SCALE_DESC: c_int = 1629;
pub const CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_BIAS: c_int = 1630;
pub const CUDNN_ATTR_RESAMPLE_MODE: c_int = 1700;
pub const CUDNN_ATTR_RESAMPLE_COMP_TYPE: c_int = 1701;
pub const CUDNN_ATTR_RESAMPLE_SPATIAL_DIMS: c_int = 1702;
pub const CUDNN_ATTR_RESAMPLE_POST_PADDINGS: c_int = 1703;
pub const CUDNN_ATTR_RESAMPLE_PRE_PADDINGS: c_int = 1704;
pub const CUDNN_ATTR_RESAMPLE_STRIDES: c_int = 1705;
pub const CUDNN_ATTR_RESAMPLE_WINDOW_DIMS: c_int = 1706;
pub const CUDNN_ATTR_RESAMPLE_NAN_PROPAGATION: c_int = 1707;
pub const CUDNN_ATTR_RESAMPLE_PADDING_MODE: c_int = 1708;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_XDESC: c_int = 1710;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_YDESC: c_int = 1711;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_IDXDESC: c_int = 1712;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_ALPHA: c_int = 1713;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_BETA: c_int = 1714;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_FWD_DESC: c_int = 1716;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DXDESC: c_int = 1720;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DYDESC: c_int = 1721;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_IDXDESC: c_int = 1722;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_ALPHA: c_int = 1723;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_BETA: c_int = 1724;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DESC: c_int = 1725;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_XDESC: c_int = 1726;
pub const CUDNN_ATTR_OPERATION_RESAMPLE_BWD_YDESC: c_int = 1727;
pub const CUDNN_ATTR_OPERATION_CONCAT_AXIS: c_int = 1800;
pub const CUDNN_ATTR_OPERATION_CONCAT_INPUT_DESCS: c_int = 1801;
pub const CUDNN_ATTR_OPERATION_CONCAT_INPLACE_INDEX: c_int = 1802;
pub const CUDNN_ATTR_OPERATION_CONCAT_OUTPUT_DESC: c_int = 1803;
pub const CUDNN_ATTR_OPERATION_SIGNAL_MODE: c_int = 1900;
pub const CUDNN_ATTR_OPERATION_SIGNAL_FLAGDESC: c_int = 1901;
pub const CUDNN_ATTR_OPERATION_SIGNAL_VALUE: c_int = 1902;
pub const CUDNN_ATTR_OPERATION_SIGNAL_XDESC: c_int = 1903;
pub const CUDNN_ATTR_OPERATION_SIGNAL_YDESC: c_int = 1904;
pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_CONTAINER_DESC: c_int = 1950;
pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_YDESC: c_int = 1951;
pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_SEQUENCE_DESC: c_int = 1952;
pub const CUDNN_ATTR_OPERATION_PAGED_CACHE_LOAD_PAGE_TABLE_DESC: c_int = 1953;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_MODE: c_int = 2000;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_PHASE: c_int = 2001;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_XDESC: c_int = 2002;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_MEAN_DESC: c_int = 2003;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_INV_VARIANCE_DESC: c_int = 2004;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_SCALE_DESC: c_int = 2005;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_BIAS_DESC: c_int = 2006;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_EPSILON_DESC: c_int = 2007;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_EXP_AVG_FACTOR_DESC: c_int = 2008;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_MEAN_DESC: c_int = 2009;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_VAR_DESC: c_int = 2010;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_MEAN_DESC: c_int = 2011;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_VAR_DESC: c_int = 2012;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_YDESC: c_int = 2013;
pub const CUDNN_ATTR_OPERATION_NORM_FWD_PEER_STAT_DESCS: c_int = 2014;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_MODE: c_int = 2100;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_XDESC: c_int = 2101;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_MEAN_DESC: c_int = 2102;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_INV_VARIANCE_DESC: c_int = 2103;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_DYDESC: c_int = 2104;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_SCALE_DESC: c_int = 2105;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_EPSILON_DESC: c_int = 2106;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_DSCALE_DESC: c_int = 2107;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_DBIAS_DESC: c_int = 2108;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_DXDESC: c_int = 2109;
pub const CUDNN_ATTR_OPERATION_NORM_BWD_PEER_STAT_DESCS: c_int = 2110;
pub const CUDNN_ATTR_OPERATION_RESHAPE_XDESC: c_int = 2200;
pub const CUDNN_ATTR_OPERATION_RESHAPE_YDESC: c_int = 2201;
pub const CUDNN_ATTR_RNG_DISTRIBUTION: c_int = 2300;
pub const CUDNN_ATTR_RNG_NORMAL_DIST_MEAN: c_int = 2301;
pub const CUDNN_ATTR_RNG_NORMAL_DIST_STANDARD_DEVIATION: c_int = 2302;
pub const CUDNN_ATTR_RNG_UNIFORM_DIST_MAXIMUM: c_int = 2303;
pub const CUDNN_ATTR_RNG_UNIFORM_DIST_MINIMUM: c_int = 2304;
pub const CUDNN_ATTR_RNG_BERNOULLI_DIST_PROBABILITY: c_int = 2305;
pub const CUDNN_ATTR_OPERATION_RNG_YDESC: c_int = 2310;
pub const CUDNN_ATTR_OPERATION_RNG_SEED: c_int = 2311;
pub const CUDNN_ATTR_OPERATION_RNG_DESC: c_int = 2312;
pub const CUDNN_ATTR_OPERATION_RNG_OFFSET_DESC: c_int = 2313;
pub const CUDNN_ATTR_KERNEL_CACHE_OPERATION_GRAPH: c_int = 2400;
pub const CUDNN_ATTR_KERNEL_CACHE_IS_ENGINECFG_KERNEL_CACHED: c_int = 2401;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_XDESC: c_int = 2500;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_YDESC: c_int = 2501;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_SCALE_DESC: c_int = 2502;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_MATH_PREC: c_int = 2503;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_BLOCK_SIZE: c_int = 2504;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_QUANTIZE_DENOM_FACTOR_MODE: c_int = 2505;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_XDESC: c_int = 2600;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_SCALE_DESC: c_int = 2601;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_YDESC: c_int = 2602;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_MATH_PREC: c_int = 2603;
pub const CUDNN_ATTR_OPERATION_BLOCK_SCALE_DEQUANTIZE_BLOCK_SIZE: c_int = 2604;
pub const cudnnBackendAttributeName_t = c_uint;
pub const CUDNN_TYPE_HANDLE: c_int = 0;
pub const CUDNN_TYPE_DATA_TYPE: c_int = 1;
pub const CUDNN_TYPE_BOOLEAN: c_int = 2;
pub const CUDNN_TYPE_INT64: c_int = 3;
pub const CUDNN_TYPE_FLOAT: c_int = 4;
pub const CUDNN_TYPE_DOUBLE: c_int = 5;
pub const CUDNN_TYPE_VOID_PTR: c_int = 6;
pub const CUDNN_TYPE_CONVOLUTION_MODE: c_int = 7;
pub const CUDNN_TYPE_HEUR_MODE: c_int = 8;
pub const CUDNN_TYPE_KNOB_TYPE: c_int = 9;
pub const CUDNN_TYPE_NAN_PROPOGATION: c_int = 10;
pub const CUDNN_TYPE_NUMERICAL_NOTE: c_int = 11;
pub const CUDNN_TYPE_LAYOUT_TYPE: c_int = 12;
pub const CUDNN_TYPE_ATTRIB_NAME: c_int = 13;
pub const CUDNN_TYPE_POINTWISE_MODE: c_int = 14;
pub const CUDNN_TYPE_BACKEND_DESCRIPTOR: c_int = 15;
pub const CUDNN_TYPE_GENSTATS_MODE: c_int = 16;
pub const CUDNN_TYPE_BN_FINALIZE_STATS_MODE: c_int = 17;
pub const CUDNN_TYPE_REDUCTION_OPERATOR_TYPE: c_int = 18;
pub const CUDNN_TYPE_BEHAVIOR_NOTE: c_int = 19;
pub const CUDNN_TYPE_TENSOR_REORDERING_MODE: c_int = 20;
pub const CUDNN_TYPE_RESAMPLE_MODE: c_int = 21;
pub const CUDNN_TYPE_PADDING_MODE: c_int = 22;
pub const CUDNN_TYPE_INT32: c_int = 23;
pub const CUDNN_TYPE_CHAR: c_int = 24;
pub const CUDNN_TYPE_SIGNAL_MODE: c_int = 25;
pub const CUDNN_TYPE_FRACTION: c_int = 26;
pub const CUDNN_TYPE_NORM_MODE: c_int = 27;
pub const CUDNN_TYPE_NORM_FWD_PHASE: c_int = 28;
pub const CUDNN_TYPE_RNG_DISTRIBUTION: c_int = 29;
pub const cudnnBackendAttributeType_t = c_uint;
pub const CUDNN_BACKEND_POINTWISE_DESCRIPTOR: c_int = 0;
pub const CUDNN_BACKEND_CONVOLUTION_DESCRIPTOR: c_int = 1;
pub const CUDNN_BACKEND_ENGINE_DESCRIPTOR: c_int = 2;
pub const CUDNN_BACKEND_ENGINECFG_DESCRIPTOR: c_int = 3;
pub const CUDNN_BACKEND_ENGINEHEUR_DESCRIPTOR: c_int = 4;
pub const CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR: c_int = 5;
pub const CUDNN_BACKEND_INTERMEDIATE_INFO_DESCRIPTOR: c_int = 6;
pub const CUDNN_BACKEND_KNOB_CHOICE_DESCRIPTOR: c_int = 7;
pub const CUDNN_BACKEND_KNOB_INFO_DESCRIPTOR: c_int = 8;
pub const CUDNN_BACKEND_LAYOUT_INFO_DESCRIPTOR: c_int = 9;
pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_FORWARD_DESCRIPTOR: c_int = 10;
pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_FILTER_DESCRIPTOR: c_int = 11;
pub const CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_DATA_DESCRIPTOR: c_int = 12;
pub const CUDNN_BACKEND_OPERATION_POINTWISE_DESCRIPTOR: c_int = 13;
pub const CUDNN_BACKEND_OPERATION_GEN_STATS_DESCRIPTOR: c_int = 14;
pub const CUDNN_BACKEND_OPERATIONGRAPH_DESCRIPTOR: c_int = 15;
pub const CUDNN_BACKEND_VARIANT_PACK_DESCRIPTOR: c_int = 16;
pub const CUDNN_BACKEND_TENSOR_DESCRIPTOR: c_int = 17;
pub const CUDNN_BACKEND_MATMUL_DESCRIPTOR: c_int = 18;
pub const CUDNN_BACKEND_OPERATION_MATMUL_DESCRIPTOR: c_int = 19;
pub const CUDNN_BACKEND_OPERATION_BN_FINALIZE_STATISTICS_DESCRIPTOR: c_int = 20;
pub const CUDNN_BACKEND_REDUCTION_DESCRIPTOR: c_int = 21;
pub const CUDNN_BACKEND_OPERATION_REDUCTION_DESCRIPTOR: c_int = 22;
pub const CUDNN_BACKEND_OPERATION_BN_BWD_WEIGHTS_DESCRIPTOR: c_int = 23;
pub const CUDNN_BACKEND_RESAMPLE_DESCRIPTOR: c_int = 24;
pub const CUDNN_BACKEND_OPERATION_RESAMPLE_FWD_DESCRIPTOR: c_int = 25;
pub const CUDNN_BACKEND_OPERATION_RESAMPLE_BWD_DESCRIPTOR: c_int = 26;
pub const CUDNN_BACKEND_OPERATION_CONCAT_DESCRIPTOR: c_int = 27;
pub const CUDNN_BACKEND_OPERATION_SIGNAL_DESCRIPTOR: c_int = 28;
pub const CUDNN_BACKEND_OPERATION_NORM_FORWARD_DESCRIPTOR: c_int = 29;
pub const CUDNN_BACKEND_OPERATION_NORM_BACKWARD_DESCRIPTOR: c_int = 30;
pub const CUDNN_BACKEND_OPERATION_RESHAPE_DESCRIPTOR: c_int = 31;
pub const CUDNN_BACKEND_RNG_DESCRIPTOR: c_int = 32;
pub const CUDNN_BACKEND_OPERATION_RNG_DESCRIPTOR: c_int = 33;
pub const CUDNN_BACKEND_KERNEL_CACHE_DESCRIPTOR: c_int = 34;
pub const CUDNN_BACKEND_OPERATION_PAGED_CACHE_LOAD_DESCRIPTOR: c_int = 35;
pub const CUDNN_BACKEND_OPERATION_BLOCK_SCALE_QUANTIZE_DESCRIPTOR: c_int = 36;
pub const CUDNN_BACKEND_OPERATION_BLOCK_SCALE_DEQUANTIZE_DESCRIPTOR: c_int = 37;
pub const cudnnBackendDescriptorType_t = c_uint;
pub const CUDNN_NUMERICAL_NOTE_TENSOR_CORE: c_int = 0;
pub const CUDNN_NUMERICAL_NOTE_DOWN_CONVERT_INPUTS: c_int = 1;
pub const CUDNN_NUMERICAL_NOTE_REDUCED_PRECISION_REDUCTION: c_int = 2;
pub const CUDNN_NUMERICAL_NOTE_FFT: c_int = 3;
pub const CUDNN_NUMERICAL_NOTE_NONDETERMINISTIC: c_int = 4;
pub const CUDNN_NUMERICAL_NOTE_WINOGRAD: c_int = 5;
pub const CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_4x4: c_int = 6;
pub const CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_6x6: c_int = 7;
pub const CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_13x13: c_int = 8;
pub const CUDNN_NUMERICAL_NOTE_STRICT_NAN_PROP: c_int = 9;
pub const CUDNN_NUMERICAL_NOTE_TYPE_COUNT: c_int = 10;
pub const cudnnBackendNumericalNote_t = c_uint;
pub const CUDNN_BEHAVIOR_NOTE_RUNTIME_COMPILATION: c_int = 0;
pub const CUDNN_BEHAVIOR_NOTE_REQUIRES_FILTER_INT8x32_REORDER: c_int = 1;
pub const CUDNN_BEHAVIOR_NOTE_REQUIRES_BIAS_INT8x32_REORDER: c_int = 2;
pub const CUDNN_BEHAVIOR_NOTE_SUPPORTS_CUDA_GRAPH_NATIVE_API: c_int = 3;
pub const CUDNN_BEHAVIOR_NOTE_TYPE_COUNT: c_int = 4;
pub const cudnnBackendBehaviorNote_t = c_uint;
pub const CUDNN_KNOB_TYPE_SPLIT_K: c_int = 0;
pub const CUDNN_KNOB_TYPE_SWIZZLE: c_int = 1;
pub const CUDNN_KNOB_TYPE_TILE_SIZE: c_int = 2;
pub const CUDNN_KNOB_TYPE_USE_TEX: c_int = 3;
pub const CUDNN_KNOB_TYPE_EDGE: c_int = 4;
pub const CUDNN_KNOB_TYPE_KBLOCK: c_int = 5;
pub const CUDNN_KNOB_TYPE_LDGA: c_int = 6;
pub const CUDNN_KNOB_TYPE_LDGB: c_int = 7;
pub const CUDNN_KNOB_TYPE_CHUNK_K: c_int = 8;
pub const CUDNN_KNOB_TYPE_SPLIT_H: c_int = 9;
pub const CUDNN_KNOB_TYPE_WINO_TILE: c_int = 10;
pub const CUDNN_KNOB_TYPE_MULTIPLY: c_int = 11;
pub const CUDNN_KNOB_TYPE_SPLIT_K_BUF: c_int = 12;
pub const CUDNN_KNOB_TYPE_TILEK: c_int = 13;
pub const CUDNN_KNOB_TYPE_STAGES: c_int = 14;
pub const CUDNN_KNOB_TYPE_REDUCTION_MODE: c_int = 15;
pub const CUDNN_KNOB_TYPE_CTA_SPLIT_K_MODE: c_int = 16;
pub const CUDNN_KNOB_TYPE_SPLIT_K_SLC: c_int = 17;
pub const CUDNN_KNOB_TYPE_IDX_MODE: c_int = 18;
pub const CUDNN_KNOB_TYPE_SLICED: c_int = 19;
pub const CUDNN_KNOB_TYPE_SPLIT_RS: c_int = 20;
pub const CUDNN_KNOB_TYPE_SINGLEBUFFER: c_int = 21;
pub const CUDNN_KNOB_TYPE_LDGC: c_int = 22;
pub const CUDNN_KNOB_TYPE_SPECFILT: c_int = 23;
pub const CUDNN_KNOB_TYPE_KERNEL_CFG: c_int = 24;
pub const CUDNN_KNOB_TYPE_WORKSPACE: c_int = 25;
pub const CUDNN_KNOB_TYPE_TILE_CGA: c_int = 26;
pub const CUDNN_KNOB_TYPE_TILE_CGA_M: c_int = 27;
pub const CUDNN_KNOB_TYPE_TILE_CGA_N: c_int = 28;
pub const CUDNN_KNOB_TYPE_BLOCK_SIZE: c_int = 29;
pub const CUDNN_KNOB_TYPE_OCCUPANCY: c_int = 30;
pub const CUDNN_KNOB_TYPE_ARRAY_SIZE_PER_THREAD: c_int = 31;
pub const CUDNN_KNOB_TYPE_NUM_C_PER_BLOCK: c_int = 32;
pub const CUDNN_KNOB_TYPE_SPLIT_COLS: c_int = 33;
pub const CUDNN_KNOB_TYPE_TILE_ROWS: c_int = 34;
pub const CUDNN_KNOB_TYPE_TILE_COLS: c_int = 35;
pub const CUDNN_KNOB_TYPE_LOAD_SIZE: c_int = 36;
pub const CUDNN_KNOB_TYPE_CTA_COUNT: c_int = 37;
pub const CUDNN_KNOB_TYPE_STREAM_K: c_int = 38;
pub const CUDNN_KNOB_TYPE_SPLIT_P_SLC: c_int = 39;
pub const CUDNN_KNOB_TYPE_TILE_M: c_int = 40;
pub const CUDNN_KNOB_TYPE_TILE_N: c_int = 41;
pub const CUDNN_KNOB_TYPE_WARP_SPEC_CFG: c_int = 42;
pub const CUDNN_KNOB_TYPE_COUNTS: c_int = 43;
pub const cudnnBackendKnobType_t = c_uint;
pub const CUDNN_LAYOUT_TYPE_PREFERRED_NCHW: c_int = 0;
pub const CUDNN_LAYOUT_TYPE_PREFERRED_NHWC: c_int = 1;
pub const CUDNN_LAYOUT_TYPE_PREFERRED_PAD4CK: c_int = 2;
pub const CUDNN_LAYOUT_TYPE_PREFERRED_PAD8CK: c_int = 3;
pub const CUDNN_LAYOUT_TYPE_COUNT: c_int = 4;
pub const cudnnBackendLayoutType_t = c_uint;
pub const CUDNN_HEUR_MODE_INSTANT: c_int = 0;
pub const CUDNN_HEUR_MODE_B: c_int = 1;
pub const CUDNN_HEUR_MODE_FALLBACK: c_int = 2;
pub const CUDNN_HEUR_MODE_A: c_int = 3;
pub const CUDNN_HEUR_MODES_COUNT: c_int = 4;
pub const cudnnBackendHeurMode_t = c_uint;
pub const CUDNN_TENSOR_REORDERING_NONE: c_int = 0;
pub const CUDNN_TENSOR_REORDERING_INT8x32: c_int = 1;
pub const CUDNN_TENSOR_REORDERING_F16x16: c_int = 2;
pub const CUDNN_TENSOR_REORDERING_F8_128x4: c_int = 3;
pub const cudnnBackendTensorReordering_t = c_uint;
pub const CUDNN_ZERO_PAD: c_int = 0;
pub const CUDNN_NEG_INF_PAD: c_int = 1;
pub const CUDNN_EDGE_VAL_PAD: c_int = 2;
pub const cudnnPaddingMode_t = c_uint;
pub const CUDNN_LAYER_NORM: c_int = 0;
pub const CUDNN_INSTANCE_NORM: c_int = 1;
pub const CUDNN_BATCH_NORM: c_int = 2;
pub const CUDNN_GROUP_NORM: c_int = 3;
pub const CUDNN_RMS_NORM: c_int = 4;
pub const CUDNN_ADA_LAYER_NORM: c_int = 5;
pub const cudnnBackendNormMode_t = c_uint;
pub const CUDNN_NORM_FWD_INFERENCE: c_int = 0;
pub const CUDNN_NORM_FWD_TRAINING: c_int = 1;
pub const cudnnBackendNormFwdPhase_t = c_uint;
pub extern fn cudnnBackendCreateDescriptor(descriptorType: cudnnBackendDescriptorType_t, descriptor: [*c]cudnnBackendDescriptor_t) cudnnStatus_t;
pub extern fn cudnnBackendDestroyDescriptor(descriptor: cudnnBackendDescriptor_t) cudnnStatus_t;
pub extern fn cudnnBackendInitialize(descriptor: cudnnBackendDescriptor_t) cudnnStatus_t;
pub extern fn cudnnBackendFinalize(descriptor: cudnnBackendDescriptor_t) cudnnStatus_t;
pub extern fn cudnnBackendSetAttribute(descriptor: cudnnBackendDescriptor_t, attributeName: cudnnBackendAttributeName_t, attributeType: cudnnBackendAttributeType_t, elementCount: i64, arrayOfElements: ?*const anyopaque) cudnnStatus_t;
pub extern fn cudnnBackendGetAttribute(descriptor: cudnnBackendDescriptor_t, attributeName: cudnnBackendAttributeName_t, attributeType: cudnnBackendAttributeType_t, requestedElementCount: i64, elementCount: [*c]i64, arrayOfElements: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnBackendExecute(handle: cudnnHandle_t, executionPlan: cudnnBackendDescriptor_t, variantPack: cudnnBackendDescriptor_t) cudnnStatus_t;
pub extern fn cudnnBackendPopulateCudaGraph(handle: cudnnHandle_t, executionPlan: cudnnBackendDescriptor_t, variantPack: cudnnBackendDescriptor_t, graph: cudaGraph_t) cudnnStatus_t;
pub extern fn cudnnBackendUpdateCudaGraph(handle: cudnnHandle_t, executionPlan: cudnnBackendDescriptor_t, variantPack: cudnnBackendDescriptor_t, graph: cudaGraph_t) cudnnStatus_t;
pub const struct_cudnnTensorStruct = opaque {};
pub const cudnnTensorDescriptor_t = ?*struct_cudnnTensorStruct;
pub const struct_cudnnPoolingStruct = opaque {};
pub const cudnnPoolingDescriptor_t = ?*struct_cudnnPoolingStruct;
pub const struct_cudnnFilterStruct = opaque {};
pub const cudnnFilterDescriptor_t = ?*struct_cudnnFilterStruct;
pub const struct_cudnnLRNStruct = opaque {};
pub const cudnnLRNDescriptor_t = ?*struct_cudnnLRNStruct;
pub const struct_cudnnActivationStruct = opaque {};
pub const cudnnActivationDescriptor_t = ?*struct_cudnnActivationStruct;
pub const struct_cudnnSpatialTransformerStruct = opaque {};
pub const cudnnSpatialTransformerDescriptor_t = ?*struct_cudnnSpatialTransformerStruct;
pub const struct_cudnnOpTensorStruct = opaque {};
pub const cudnnOpTensorDescriptor_t = ?*struct_cudnnOpTensorStruct;
pub const struct_cudnnReduceTensorStruct = opaque {};
pub const cudnnReduceTensorDescriptor_t = ?*struct_cudnnReduceTensorStruct;
pub const struct_cudnnCTCLossStruct = opaque {};
pub const cudnnCTCLossDescriptor_t = ?*struct_cudnnCTCLossStruct;
pub const struct_cudnnTensorTransformStruct = opaque {};
pub const cudnnTensorTransformDescriptor_t = ?*struct_cudnnTensorTransformStruct;
pub const CUDNN_NON_DETERMINISTIC: c_int = 0;
pub const CUDNN_DETERMINISTIC: c_int = 1;
pub const cudnnDeterminism_t = c_uint;
pub extern fn cudnnCreateTensorDescriptor(tensorDesc: [*c]cudnnTensorDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetTensor4dDescriptor(tensorDesc: cudnnTensorDescriptor_t, format: cudnnTensorFormat_t, dataType: cudnnDataType_t, n: c_int, c: c_int, h: c_int, w: c_int) cudnnStatus_t;
pub extern fn cudnnSetTensor4dDescriptorEx(tensorDesc: cudnnTensorDescriptor_t, dataType: cudnnDataType_t, n: c_int, c: c_int, h: c_int, w: c_int, nStride: c_int, cStride: c_int, hStride: c_int, wStride: c_int) cudnnStatus_t;
pub extern fn cudnnGetTensor4dDescriptor(tensorDesc: cudnnTensorDescriptor_t, dataType: [*c]cudnnDataType_t, n: [*c]c_int, c: [*c]c_int, h: [*c]c_int, w: [*c]c_int, nStride: [*c]c_int, cStride: [*c]c_int, hStride: [*c]c_int, wStride: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnSetTensorNdDescriptor(tensorDesc: cudnnTensorDescriptor_t, dataType: cudnnDataType_t, nbDims: c_int, dimA: [*c]const c_int, strideA: [*c]const c_int) cudnnStatus_t;
pub extern fn cudnnSetTensorNdDescriptorEx(tensorDesc: cudnnTensorDescriptor_t, format: cudnnTensorFormat_t, dataType: cudnnDataType_t, nbDims: c_int, dimA: [*c]const c_int) cudnnStatus_t;
pub extern fn cudnnGetTensorNdDescriptor(tensorDesc: cudnnTensorDescriptor_t, nbDimsRequested: c_int, dataType: [*c]cudnnDataType_t, nbDims: [*c]c_int, dimA: [*c]c_int, strideA: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetTensorSizeInBytes(tensorDesc: cudnnTensorDescriptor_t, size: [*c]usize) cudnnStatus_t;
pub extern fn cudnnDestroyTensorDescriptor(tensorDesc: cudnnTensorDescriptor_t) cudnnStatus_t;
pub const CUDNN_TRANSFORM_FOLD: c_int = 0;
pub const CUDNN_TRANSFORM_UNFOLD: c_int = 1;
pub const cudnnFoldingDirection_t = c_uint;
pub extern fn cudnnInitTransformDest(transformDesc: cudnnTensorTransformDescriptor_t, srcDesc: cudnnTensorDescriptor_t, destDesc: cudnnTensorDescriptor_t, destSizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnCreateTensorTransformDescriptor(transformDesc: [*c]cudnnTensorTransformDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetTensorTransformDescriptor(transformDesc: cudnnTensorTransformDescriptor_t, nbDims: u32, destFormat: cudnnTensorFormat_t, padBeforeA: [*c]const i32, padAfterA: [*c]const i32, foldA: [*c]const u32, direction: cudnnFoldingDirection_t) cudnnStatus_t;
pub extern fn cudnnGetTensorTransformDescriptor(transformDesc: cudnnTensorTransformDescriptor_t, nbDimsRequested: u32, destFormat: [*c]cudnnTensorFormat_t, padBeforeA: [*c]i32, padAfterA: [*c]i32, foldA: [*c]u32, direction: [*c]cudnnFoldingDirection_t) cudnnStatus_t;
pub extern fn cudnnDestroyTensorTransformDescriptor(transformDesc: cudnnTensorTransformDescriptor_t) cudnnStatus_t;
pub extern fn cudnnTransformTensor(handle: cudnnHandle_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnTransformTensorEx(handle: cudnnHandle_t, transDesc: cudnnTensorTransformDescriptor_t, alpha: ?*const anyopaque, srcDesc: cudnnTensorDescriptor_t, srcData: ?*const anyopaque, beta: ?*const anyopaque, destDesc: cudnnTensorDescriptor_t, destData: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnAddTensor(handle: cudnnHandle_t, alpha: ?*const anyopaque, aDesc: cudnnTensorDescriptor_t, A: ?*const anyopaque, beta: ?*const anyopaque, cDesc: cudnnTensorDescriptor_t, C: ?*anyopaque) cudnnStatus_t;
pub const CUDNN_OP_TENSOR_ADD: c_int = 0;
pub const CUDNN_OP_TENSOR_MUL: c_int = 1;
pub const CUDNN_OP_TENSOR_MIN: c_int = 2;
pub const CUDNN_OP_TENSOR_MAX: c_int = 3;
pub const CUDNN_OP_TENSOR_SQRT: c_int = 4;
pub const CUDNN_OP_TENSOR_NOT: c_int = 5;
pub const cudnnOpTensorOp_t = c_uint;
pub extern fn cudnnCreateOpTensorDescriptor(opTensorDesc: [*c]cudnnOpTensorDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetOpTensorDescriptor(opTensorDesc: cudnnOpTensorDescriptor_t, opTensorOp: cudnnOpTensorOp_t, opTensorCompType: cudnnDataType_t, opTensorNanOpt: cudnnNanPropagation_t) cudnnStatus_t;
pub extern fn cudnnGetOpTensorDescriptor(opTensorDesc: cudnnOpTensorDescriptor_t, opTensorOp: [*c]cudnnOpTensorOp_t, opTensorCompType: [*c]cudnnDataType_t, opTensorNanOpt: [*c]cudnnNanPropagation_t) cudnnStatus_t;
pub extern fn cudnnDestroyOpTensorDescriptor(opTensorDesc: cudnnOpTensorDescriptor_t) cudnnStatus_t;
pub extern fn cudnnOpTensor(handle: cudnnHandle_t, opTensorDesc: cudnnOpTensorDescriptor_t, alpha1: ?*const anyopaque, aDesc: cudnnTensorDescriptor_t, A: ?*const anyopaque, alpha2: ?*const anyopaque, bDesc: cudnnTensorDescriptor_t, B: ?*const anyopaque, beta: ?*const anyopaque, cDesc: cudnnTensorDescriptor_t, C: ?*anyopaque) cudnnStatus_t;
pub const CUDNN_REDUCE_TENSOR_NO_INDICES: c_int = 0;
pub const CUDNN_REDUCE_TENSOR_FLATTENED_INDICES: c_int = 1;
pub const cudnnReduceTensorIndices_t = c_uint;
pub const CUDNN_32BIT_INDICES: c_int = 0;
pub const CUDNN_64BIT_INDICES: c_int = 1;
pub const CUDNN_16BIT_INDICES: c_int = 2;
pub const CUDNN_8BIT_INDICES: c_int = 3;
pub const cudnnIndicesType_t = c_uint;
pub extern fn cudnnCreateReduceTensorDescriptor(reduceTensorDesc: [*c]cudnnReduceTensorDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetReduceTensorDescriptor(reduceTensorDesc: cudnnReduceTensorDescriptor_t, reduceTensorOp: cudnnReduceTensorOp_t, reduceTensorCompType: cudnnDataType_t, reduceTensorNanOpt: cudnnNanPropagation_t, reduceTensorIndices: cudnnReduceTensorIndices_t, reduceTensorIndicesType: cudnnIndicesType_t) cudnnStatus_t;
pub extern fn cudnnGetReduceTensorDescriptor(reduceTensorDesc: cudnnReduceTensorDescriptor_t, reduceTensorOp: [*c]cudnnReduceTensorOp_t, reduceTensorCompType: [*c]cudnnDataType_t, reduceTensorNanOpt: [*c]cudnnNanPropagation_t, reduceTensorIndices: [*c]cudnnReduceTensorIndices_t, reduceTensorIndicesType: [*c]cudnnIndicesType_t) cudnnStatus_t;
pub extern fn cudnnDestroyReduceTensorDescriptor(reduceTensorDesc: cudnnReduceTensorDescriptor_t) cudnnStatus_t;
pub extern fn cudnnGetReductionIndicesSize(handle: cudnnHandle_t, reduceTensorDesc: cudnnReduceTensorDescriptor_t, aDesc: cudnnTensorDescriptor_t, cDesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnGetReductionWorkspaceSize(handle: cudnnHandle_t, reduceTensorDesc: cudnnReduceTensorDescriptor_t, aDesc: cudnnTensorDescriptor_t, cDesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnReduceTensor(handle: cudnnHandle_t, reduceTensorDesc: cudnnReduceTensorDescriptor_t, indices: ?*anyopaque, indicesSizeInBytes: usize, workspace: ?*anyopaque, workspaceSizeInBytes: usize, alpha: ?*const anyopaque, aDesc: cudnnTensorDescriptor_t, A: ?*const anyopaque, beta: ?*const anyopaque, cDesc: cudnnTensorDescriptor_t, C: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnSetTensor(handle: cudnnHandle_t, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque, valuePtr: ?*const anyopaque) cudnnStatus_t;
pub extern fn cudnnScaleTensor(handle: cudnnHandle_t, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque, alpha: ?*const anyopaque) cudnnStatus_t;
pub extern fn cudnnCreateFilterDescriptor(filterDesc: [*c]cudnnFilterDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetFilter4dDescriptor(filterDesc: cudnnFilterDescriptor_t, dataType: cudnnDataType_t, format: cudnnTensorFormat_t, k: c_int, c: c_int, h: c_int, w: c_int) cudnnStatus_t;
pub extern fn cudnnGetFilter4dDescriptor(filterDesc: cudnnFilterDescriptor_t, dataType: [*c]cudnnDataType_t, format: [*c]cudnnTensorFormat_t, k: [*c]c_int, c: [*c]c_int, h: [*c]c_int, w: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnSetFilterNdDescriptor(filterDesc: cudnnFilterDescriptor_t, dataType: cudnnDataType_t, format: cudnnTensorFormat_t, nbDims: c_int, filterDimA: [*c]const c_int) cudnnStatus_t;
pub extern fn cudnnGetFilterNdDescriptor(filterDesc: cudnnFilterDescriptor_t, nbDimsRequested: c_int, dataType: [*c]cudnnDataType_t, format: [*c]cudnnTensorFormat_t, nbDims: [*c]c_int, filterDimA: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetFilterSizeInBytes(filterDesc: cudnnFilterDescriptor_t, size: [*c]usize) cudnnStatus_t;
pub extern fn cudnnTransformFilter(handle: cudnnHandle_t, transDesc: cudnnTensorTransformDescriptor_t, alpha: ?*const anyopaque, srcDesc: cudnnFilterDescriptor_t, srcData: ?*const anyopaque, beta: ?*const anyopaque, destDesc: cudnnFilterDescriptor_t, destData: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnDestroyFilterDescriptor(filterDesc: cudnnFilterDescriptor_t) cudnnStatus_t;
pub const CUDNN_SOFTMAX_FAST: c_int = 0;
pub const CUDNN_SOFTMAX_ACCURATE: c_int = 1;
pub const CUDNN_SOFTMAX_LOG: c_int = 2;
pub const cudnnSoftmaxAlgorithm_t = c_uint;
pub const CUDNN_SOFTMAX_MODE_INSTANCE: c_int = 0;
pub const CUDNN_SOFTMAX_MODE_CHANNEL: c_int = 1;
pub const cudnnSoftmaxMode_t = c_uint;
pub extern fn cudnnSoftmaxForward(handle: cudnnHandle_t, algo: cudnnSoftmaxAlgorithm_t, mode: cudnnSoftmaxMode_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub const CUDNN_POOLING_MAX: c_int = 0;
pub const CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING: c_int = 1;
pub const CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING: c_int = 2;
pub const CUDNN_POOLING_MAX_DETERMINISTIC: c_int = 3;
pub const cudnnPoolingMode_t = c_uint;
pub extern fn cudnnCreatePoolingDescriptor(poolingDesc: [*c]cudnnPoolingDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetPooling2dDescriptor(poolingDesc: cudnnPoolingDescriptor_t, mode: cudnnPoolingMode_t, maxpoolingNanOpt: cudnnNanPropagation_t, windowHeight: c_int, windowWidth: c_int, verticalPadding: c_int, horizontalPadding: c_int, verticalStride: c_int, horizontalStride: c_int) cudnnStatus_t;
pub extern fn cudnnGetPooling2dDescriptor(poolingDesc: cudnnPoolingDescriptor_t, mode: [*c]cudnnPoolingMode_t, maxpoolingNanOpt: [*c]cudnnNanPropagation_t, windowHeight: [*c]c_int, windowWidth: [*c]c_int, verticalPadding: [*c]c_int, horizontalPadding: [*c]c_int, verticalStride: [*c]c_int, horizontalStride: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnSetPoolingNdDescriptor(poolingDesc: cudnnPoolingDescriptor_t, mode: cudnnPoolingMode_t, maxpoolingNanOpt: cudnnNanPropagation_t, nbDims: c_int, windowDimA: [*c]const c_int, paddingA: [*c]const c_int, strideA: [*c]const c_int) cudnnStatus_t;
pub extern fn cudnnGetPoolingNdDescriptor(poolingDesc: cudnnPoolingDescriptor_t, nbDimsRequested: c_int, mode: [*c]cudnnPoolingMode_t, maxpoolingNanOpt: [*c]cudnnNanPropagation_t, nbDims: [*c]c_int, windowDimA: [*c]c_int, paddingA: [*c]c_int, strideA: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetPoolingNdForwardOutputDim(poolingDesc: cudnnPoolingDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, nbDims: c_int, outputTensorDimA: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetPooling2dForwardOutputDim(poolingDesc: cudnnPoolingDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, n: [*c]c_int, c: [*c]c_int, h: [*c]c_int, w: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnDestroyPoolingDescriptor(poolingDesc: cudnnPoolingDescriptor_t) cudnnStatus_t;
pub extern fn cudnnPoolingForward(handle: cudnnHandle_t, poolingDesc: cudnnPoolingDescriptor_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnCreateActivationDescriptor(activationDesc: [*c]cudnnActivationDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetActivationDescriptor(activationDesc: cudnnActivationDescriptor_t, mode: cudnnActivationMode_t, reluNanOpt: cudnnNanPropagation_t, coef: f64) cudnnStatus_t;
pub extern fn cudnnGetActivationDescriptor(activationDesc: cudnnActivationDescriptor_t, mode: [*c]cudnnActivationMode_t, reluNanOpt: [*c]cudnnNanPropagation_t, coef: [*c]f64) cudnnStatus_t;
pub extern fn cudnnSetActivationDescriptorSwishBeta(activationDesc: cudnnActivationDescriptor_t, swish_beta: f64) cudnnStatus_t;
pub extern fn cudnnGetActivationDescriptorSwishBeta(activationDesc: cudnnActivationDescriptor_t, swish_beta: [*c]f64) cudnnStatus_t;
pub extern fn cudnnDestroyActivationDescriptor(activationDesc: cudnnActivationDescriptor_t) cudnnStatus_t;
pub extern fn cudnnActivationForward(handle: cudnnHandle_t, activationDesc: cudnnActivationDescriptor_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnCreateLRNDescriptor(normDesc: [*c]cudnnLRNDescriptor_t) cudnnStatus_t;
pub const CUDNN_LRN_CROSS_CHANNEL_DIM1: c_int = 0;
pub const cudnnLRNMode_t = c_uint;
pub extern fn cudnnSetLRNDescriptor(normDesc: cudnnLRNDescriptor_t, lrnN: c_uint, lrnAlpha: f64, lrnBeta: f64, lrnK: f64) cudnnStatus_t;
pub extern fn cudnnGetLRNDescriptor(normDesc: cudnnLRNDescriptor_t, lrnN: [*c]c_uint, lrnAlpha: [*c]f64, lrnBeta: [*c]f64, lrnK: [*c]f64) cudnnStatus_t;
pub extern fn cudnnDestroyLRNDescriptor(lrnDesc: cudnnLRNDescriptor_t) cudnnStatus_t;
pub extern fn cudnnLRNCrossChannelForward(handle: cudnnHandle_t, normDesc: cudnnLRNDescriptor_t, lrnMode: cudnnLRNMode_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub const CUDNN_DIVNORM_PRECOMPUTED_MEANS: c_int = 0;
pub const cudnnDivNormMode_t = c_uint;
pub extern fn cudnnDivisiveNormalizationForward(handle: cudnnHandle_t, normDesc: cudnnLRNDescriptor_t, mode: cudnnDivNormMode_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, means: ?*const anyopaque, temp: ?*anyopaque, temp2: ?*anyopaque, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub const CUDNN_BATCHNORM_PER_ACTIVATION: c_int = 0;
pub const CUDNN_BATCHNORM_SPATIAL: c_int = 1;
pub const CUDNN_BATCHNORM_SPATIAL_PERSISTENT: c_int = 2;
pub const cudnnBatchNormMode_t = c_uint;
pub extern fn cudnnDeriveBNTensorDescriptor(derivedBnDesc: cudnnTensorDescriptor_t, xDesc: cudnnTensorDescriptor_t, mode: cudnnBatchNormMode_t) cudnnStatus_t;
pub const CUDNN_BATCHNORM_OPS_BN: c_int = 0;
pub const CUDNN_BATCHNORM_OPS_BN_ACTIVATION: c_int = 1;
pub const CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION: c_int = 2;
pub const cudnnBatchNormOps_t = c_uint;
pub extern fn cudnnBatchNormalizationForwardInference(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, alpha: ?*const anyopaque, beta: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque, bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t, bnScale: ?*const anyopaque, bnBias: ?*const anyopaque, estimatedMean: ?*const anyopaque, estimatedVariance: ?*const anyopaque, epsilon: f64) cudnnStatus_t;
pub const CUDNN_NORM_PER_ACTIVATION: c_int = 0;
pub const CUDNN_NORM_PER_CHANNEL: c_int = 1;
pub const cudnnNormMode_t = c_uint;
pub const CUDNN_NORM_ALGO_STANDARD: c_int = 0;
pub const CUDNN_NORM_ALGO_PERSIST: c_int = 1;
pub const cudnnNormAlgo_t = c_uint;
pub extern fn cudnnDeriveNormTensorDescriptor(derivedNormScaleBiasDesc: cudnnTensorDescriptor_t, derivedNormMeanVarDesc: cudnnTensorDescriptor_t, xDesc: cudnnTensorDescriptor_t, mode: cudnnNormMode_t, groupCnt: c_int) cudnnStatus_t;
pub const CUDNN_NORM_OPS_NORM: c_int = 0;
pub const CUDNN_NORM_OPS_NORM_ACTIVATION: c_int = 1;
pub const CUDNN_NORM_OPS_NORM_ADD_ACTIVATION: c_int = 2;
pub const cudnnNormOps_t = c_uint;
pub extern fn cudnnNormalizationForwardInference(handle: cudnnHandle_t, mode: cudnnNormMode_t, normOps: cudnnNormOps_t, algo: cudnnNormAlgo_t, alpha: ?*const anyopaque, beta: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, normScaleBiasDesc: cudnnTensorDescriptor_t, normScale: ?*const anyopaque, normBias: ?*const anyopaque, normMeanVarDesc: cudnnTensorDescriptor_t, estimatedMean: ?*const anyopaque, estimatedVariance: ?*const anyopaque, zDesc: cudnnTensorDescriptor_t, z: ?*const anyopaque, activationDesc: cudnnActivationDescriptor_t, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque, epsilon: f64, groupCnt: c_int) cudnnStatus_t;
pub const CUDNN_SAMPLER_BILINEAR: c_int = 0;
pub const cudnnSamplerType_t = c_uint;
pub extern fn cudnnCreateSpatialTransformerDescriptor(stDesc: [*c]cudnnSpatialTransformerDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetSpatialTransformerNdDescriptor(stDesc: cudnnSpatialTransformerDescriptor_t, samplerType: cudnnSamplerType_t, dataType: cudnnDataType_t, nbDims: c_int, dimA: [*c]const c_int) cudnnStatus_t;
pub extern fn cudnnDestroySpatialTransformerDescriptor(stDesc: cudnnSpatialTransformerDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSpatialTfGridGeneratorForward(handle: cudnnHandle_t, stDesc: cudnnSpatialTransformerDescriptor_t, theta: ?*const anyopaque, grid: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnSpatialTfSamplerForward(handle: cudnnHandle_t, stDesc: cudnnSpatialTransformerDescriptor_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, grid: ?*const anyopaque, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub const struct_cudnnDropoutStruct = opaque {};
pub const cudnnDropoutDescriptor_t = ?*struct_cudnnDropoutStruct;
pub extern fn cudnnCreateDropoutDescriptor(dropoutDesc: [*c]cudnnDropoutDescriptor_t) cudnnStatus_t;
pub extern fn cudnnDestroyDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t) cudnnStatus_t;
pub extern fn cudnnDropoutGetStatesSize(handle: cudnnHandle_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnDropoutGetReserveSpaceSize(xdesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnSetDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t, handle: cudnnHandle_t, dropout: f32, states: ?*anyopaque, stateSizeInBytes: usize, seed: c_ulonglong) cudnnStatus_t;
pub extern fn cudnnRestoreDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t, handle: cudnnHandle_t, dropout: f32, states: ?*anyopaque, stateSizeInBytes: usize, seed: c_ulonglong) cudnnStatus_t;
pub extern fn cudnnGetDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t, handle: cudnnHandle_t, dropout: [*c]f32, states: [*c]?*anyopaque, seed: [*c]c_ulonglong) cudnnStatus_t;
pub extern fn cudnnDropoutForward(handle: cudnnHandle_t, dropoutDesc: cudnnDropoutDescriptor_t, xdesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, ydesc: cudnnTensorDescriptor_t, y: ?*anyopaque, reserveSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize) cudnnStatus_t;
pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM: c_int = 0;
pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM: c_int = 1;
pub const CUDNN_CONVOLUTION_FWD_ALGO_GEMM: c_int = 2;
pub const CUDNN_CONVOLUTION_FWD_ALGO_DIRECT: c_int = 3;
pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT: c_int = 4;
pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING: c_int = 5;
pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD: c_int = 6;
pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED: c_int = 7;
pub const CUDNN_CONVOLUTION_FWD_ALGO_COUNT: c_int = 8;
pub const cudnnConvolutionFwdAlgo_t = c_uint;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0: c_int = 0;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1: c_int = 1;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT: c_int = 2;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3: c_int = 3;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD: c_int = 4;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED: c_int = 5;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING: c_int = 6;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT: c_int = 7;
pub const cudnnConvolutionBwdFilterAlgo_t = c_uint;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_0: c_int = 0;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_1: c_int = 1;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT: c_int = 2;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING: c_int = 3;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD: c_int = 4;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED: c_int = 5;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT: c_int = 6;
pub const cudnnConvolutionBwdDataAlgo_t = c_uint;
pub const CUDNN_CTC_LOSS_ALGO_DETERMINISTIC: c_int = 0;
pub const CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC: c_int = 1;
pub const cudnnCTCLossAlgo_t = c_uint;
pub extern fn cudnnOpsVersionCheck() cudnnStatus_t;
pub extern fn cudnnSoftmaxBackward(handle: cudnnHandle_t, algo: cudnnSoftmaxAlgorithm_t, mode: cudnnSoftmaxMode_t, alpha: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, beta: ?*const anyopaque, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnPoolingBackward(handle: cudnnHandle_t, poolingDesc: cudnnPoolingDescriptor_t, alpha: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnActivationBackward(handle: cudnnHandle_t, activationDesc: cudnnActivationDescriptor_t, alpha: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnLRNCrossChannelBackward(handle: cudnnHandle_t, normDesc: cudnnLRNDescriptor_t, lrnMode: cudnnLRNMode_t, alpha: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnDivisiveNormalizationBackward(handle: cudnnHandle_t, normDesc: cudnnLRNDescriptor_t, mode: cudnnDivNormMode_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, means: ?*const anyopaque, dy: ?*const anyopaque, temp: ?*anyopaque, temp2: ?*anyopaque, beta: ?*const anyopaque, dXdMeansDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque, dMeans: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, bnOps: cudnnBatchNormOps_t, xDesc: cudnnTensorDescriptor_t, zDesc: cudnnTensorDescriptor_t, yDesc: cudnnTensorDescriptor_t, bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t, activationDesc: cudnnActivationDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnGetBatchNormalizationBackwardExWorkspaceSize(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, bnOps: cudnnBatchNormOps_t, xDesc: cudnnTensorDescriptor_t, yDesc: cudnnTensorDescriptor_t, dyDesc: cudnnTensorDescriptor_t, dzDesc: cudnnTensorDescriptor_t, dxDesc: cudnnTensorDescriptor_t, dBnScaleBiasDesc: cudnnTensorDescriptor_t, activationDesc: cudnnActivationDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnGetBatchNormalizationTrainingExReserveSpaceSize(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, bnOps: cudnnBatchNormOps_t, activationDesc: cudnnActivationDescriptor_t, xDesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnBatchNormalizationForwardTraining(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, alpha: ?*const anyopaque, beta: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque, bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t, bnScale: ?*const anyopaque, bnBias: ?*const anyopaque, exponentialAverageFactor: f64, resultRunningMean: ?*anyopaque, resultRunningVariance: ?*anyopaque, epsilon: f64, resultSaveMean: ?*anyopaque, resultSaveInvVariance: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnBatchNormalizationForwardTrainingEx(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, bnOps: cudnnBatchNormOps_t, alpha: ?*const anyopaque, beta: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, xData: ?*const anyopaque, zDesc: cudnnTensorDescriptor_t, zData: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, yData: ?*anyopaque, bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t, bnScale: ?*const anyopaque, bnBias: ?*const anyopaque, exponentialAverageFactor: f64, resultRunningMean: ?*anyopaque, resultRunningVariance: ?*anyopaque, epsilon: f64, resultSaveMean: ?*anyopaque, resultSaveInvVariance: ?*anyopaque, activationDesc: cudnnActivationDescriptor_t, workspace: ?*anyopaque, workSpaceSizeInBytes: usize, reserveSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize) cudnnStatus_t;
pub extern fn cudnnBatchNormalizationBackward(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, alphaDataDiff: ?*const anyopaque, betaDataDiff: ?*const anyopaque, alphaParamDiff: ?*const anyopaque, betaParamDiff: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque, dBnScaleBiasDesc: cudnnTensorDescriptor_t, bnScale: ?*const anyopaque, dBnScaleResult: ?*anyopaque, dBnBiasResult: ?*anyopaque, epsilon: f64, savedMean: ?*const anyopaque, savedInvVariance: ?*const anyopaque) cudnnStatus_t;
pub extern fn cudnnBatchNormalizationBackwardEx(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, bnOps: cudnnBatchNormOps_t, alphaDataDiff: ?*const anyopaque, betaDataDiff: ?*const anyopaque, alphaParamDiff: ?*const anyopaque, betaParamDiff: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, xData: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, yData: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dyData: ?*const anyopaque, dzDesc: cudnnTensorDescriptor_t, dzData: ?*anyopaque, dxDesc: cudnnTensorDescriptor_t, dxData: ?*anyopaque, dBnScaleBiasDesc: cudnnTensorDescriptor_t, bnScaleData: ?*const anyopaque, bnBiasData: ?*const anyopaque, dBnScaleData: ?*anyopaque, dBnBiasData: ?*anyopaque, epsilon: f64, savedMean: ?*const anyopaque, savedInvVariance: ?*const anyopaque, activationDesc: cudnnActivationDescriptor_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize, reserveSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize) cudnnStatus_t;
pub extern fn cudnnGetNormalizationForwardTrainingWorkspaceSize(handle: cudnnHandle_t, mode: cudnnNormMode_t, normOps: cudnnNormOps_t, algo: cudnnNormAlgo_t, xDesc: cudnnTensorDescriptor_t, zDesc: cudnnTensorDescriptor_t, yDesc: cudnnTensorDescriptor_t, normScaleBiasDesc: cudnnTensorDescriptor_t, activationDesc: cudnnActivationDescriptor_t, normMeanVarDesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize, groupCnt: c_int) cudnnStatus_t;
pub extern fn cudnnGetNormalizationBackwardWorkspaceSize(handle: cudnnHandle_t, mode: cudnnNormMode_t, normOps: cudnnNormOps_t, algo: cudnnNormAlgo_t, xDesc: cudnnTensorDescriptor_t, yDesc: cudnnTensorDescriptor_t, dyDesc: cudnnTensorDescriptor_t, dzDesc: cudnnTensorDescriptor_t, dxDesc: cudnnTensorDescriptor_t, dNormScaleBiasDesc: cudnnTensorDescriptor_t, activationDesc: cudnnActivationDescriptor_t, normMeanVarDesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize, groupCnt: c_int) cudnnStatus_t;
pub extern fn cudnnGetNormalizationTrainingReserveSpaceSize(handle: cudnnHandle_t, mode: cudnnNormMode_t, normOps: cudnnNormOps_t, algo: cudnnNormAlgo_t, activationDesc: cudnnActivationDescriptor_t, xDesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize, groupCnt: c_int) cudnnStatus_t;
pub extern fn cudnnNormalizationForwardTraining(handle: cudnnHandle_t, mode: cudnnNormMode_t, normOps: cudnnNormOps_t, algo: cudnnNormAlgo_t, alpha: ?*const anyopaque, beta: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, xData: ?*const anyopaque, normScaleBiasDesc: cudnnTensorDescriptor_t, normScale: ?*const anyopaque, normBias: ?*const anyopaque, exponentialAverageFactor: f64, normMeanVarDesc: cudnnTensorDescriptor_t, resultRunningMean: ?*anyopaque, resultRunningVariance: ?*anyopaque, epsilon: f64, resultSaveMean: ?*anyopaque, resultSaveInvVariance: ?*anyopaque, activationDesc: cudnnActivationDescriptor_t, zDesc: cudnnTensorDescriptor_t, zData: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, yData: ?*anyopaque, workspace: ?*anyopaque, workSpaceSizeInBytes: usize, reserveSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize, groupCnt: c_int) cudnnStatus_t;
pub extern fn cudnnNormalizationBackward(handle: cudnnHandle_t, mode: cudnnNormMode_t, normOps: cudnnNormOps_t, algo: cudnnNormAlgo_t, alphaDataDiff: ?*const anyopaque, betaDataDiff: ?*const anyopaque, alphaParamDiff: ?*const anyopaque, betaParamDiff: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, xData: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, yData: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dyData: ?*const anyopaque, dzDesc: cudnnTensorDescriptor_t, dzData: ?*anyopaque, dxDesc: cudnnTensorDescriptor_t, dxData: ?*anyopaque, dNormScaleBiasDesc: cudnnTensorDescriptor_t, normScaleData: ?*const anyopaque, normBiasData: ?*const anyopaque, dNormScaleData: ?*anyopaque, dNormBiasData: ?*anyopaque, epsilon: f64, normMeanVarDesc: cudnnTensorDescriptor_t, savedMean: ?*const anyopaque, savedInvVariance: ?*const anyopaque, activationDesc: cudnnActivationDescriptor_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize, reserveSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize, groupCnt: c_int) cudnnStatus_t;
pub extern fn cudnnSpatialTfGridGeneratorBackward(handle: cudnnHandle_t, stDesc: cudnnSpatialTransformerDescriptor_t, dgrid: ?*const anyopaque, dtheta: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnSpatialTfSamplerBackward(handle: cudnnHandle_t, stDesc: cudnnSpatialTransformerDescriptor_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, beta: ?*const anyopaque, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque, alphaDgrid: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, grid: ?*const anyopaque, betaDgrid: ?*const anyopaque, dgrid: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnDropoutBackward(handle: cudnnHandle_t, dropoutDesc: cudnnDropoutDescriptor_t, dydesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, dxdesc: cudnnTensorDescriptor_t, dx: ?*anyopaque, reserveSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize) cudnnStatus_t;
pub const CUDNN_RNN_ALGO_STANDARD: c_int = 0;
pub const CUDNN_RNN_ALGO_PERSIST_STATIC: c_int = 1;
pub const CUDNN_RNN_ALGO_PERSIST_DYNAMIC: c_int = 2;
pub const CUDNN_RNN_ALGO_PERSIST_STATIC_SMALL_H: c_int = 3;
pub const CUDNN_RNN_ALGO_COUNT: c_int = 4;
pub const cudnnRNNAlgo_t = c_uint;
pub const CUDNN_FWD_MODE_INFERENCE: c_int = 0;
pub const CUDNN_FWD_MODE_TRAINING: c_int = 1;
pub const cudnnForwardMode_t = c_uint;
pub const CUDNN_RNN_RELU: c_int = 0;
pub const CUDNN_RNN_TANH: c_int = 1;
pub const CUDNN_LSTM: c_int = 2;
pub const CUDNN_GRU: c_int = 3;
pub const cudnnRNNMode_t = c_uint;
pub const CUDNN_RNN_NO_BIAS: c_int = 0;
pub const CUDNN_RNN_SINGLE_INP_BIAS: c_int = 1;
pub const CUDNN_RNN_DOUBLE_BIAS: c_int = 2;
pub const CUDNN_RNN_SINGLE_REC_BIAS: c_int = 3;
pub const cudnnRNNBiasMode_t = c_uint;
pub const CUDNN_UNIDIRECTIONAL: c_int = 0;
pub const CUDNN_BIDIRECTIONAL: c_int = 1;
pub const cudnnDirectionMode_t = c_uint;
pub const CUDNN_LINEAR_INPUT: c_int = 0;
pub const CUDNN_SKIP_INPUT: c_int = 1;
pub const cudnnRNNInputMode_t = c_uint;
pub const CUDNN_RNN_CLIP_NONE: c_int = 0;
pub const CUDNN_RNN_CLIP_MINMAX: c_int = 1;
pub const cudnnRNNClipMode_t = c_uint;
pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED: c_int = 0;
pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED: c_int = 1;
pub const CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED: c_int = 2;
pub const cudnnRNNDataLayout_t = c_uint;
pub const struct_cudnnRNNStruct = opaque {};
pub const cudnnRNNDescriptor_t = ?*struct_cudnnRNNStruct;
pub const struct_cudnnRNNDataStruct = opaque {};
pub const cudnnRNNDataDescriptor_t = ?*struct_cudnnRNNDataStruct;
pub extern fn cudnnCreateRNNDescriptor(rnnDesc: [*c]cudnnRNNDescriptor_t) cudnnStatus_t;
pub extern fn cudnnDestroyRNNDescriptor(rnnDesc: cudnnRNNDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetRNNDescriptor_v8(rnnDesc: cudnnRNNDescriptor_t, algo: cudnnRNNAlgo_t, cellMode: cudnnRNNMode_t, biasMode: cudnnRNNBiasMode_t, dirMode: cudnnDirectionMode_t, inputMode: cudnnRNNInputMode_t, dataType: cudnnDataType_t, mathPrec: cudnnDataType_t, mathType: cudnnMathType_t, inputSize: i32, hiddenSize: i32, projSize: i32, numLayers: i32, dropoutDesc: cudnnDropoutDescriptor_t, auxFlags: u32) cudnnStatus_t;
pub extern fn cudnnGetRNNDescriptor_v8(rnnDesc: cudnnRNNDescriptor_t, algo: [*c]cudnnRNNAlgo_t, cellMode: [*c]cudnnRNNMode_t, biasMode: [*c]cudnnRNNBiasMode_t, dirMode: [*c]cudnnDirectionMode_t, inputMode: [*c]cudnnRNNInputMode_t, dataType: [*c]cudnnDataType_t, mathPrec: [*c]cudnnDataType_t, mathType: [*c]cudnnMathType_t, inputSize: [*c]i32, hiddenSize: [*c]i32, projSize: [*c]i32, numLayers: [*c]i32, dropoutDesc: [*c]cudnnDropoutDescriptor_t, auxFlags: [*c]u32) cudnnStatus_t;
pub extern fn cudnnRNNSetClip_v8(rnnDesc: cudnnRNNDescriptor_t, clipMode: cudnnRNNClipMode_t, clipNanOpt: cudnnNanPropagation_t, lclip: f64, rclip: f64) cudnnStatus_t;
pub extern fn cudnnRNNSetClip_v9(rnnDesc: cudnnRNNDescriptor_t, clipMode: cudnnRNNClipMode_t, lclip: f64, rclip: f64) cudnnStatus_t;
pub extern fn cudnnRNNGetClip_v8(rnnDesc: cudnnRNNDescriptor_t, clipMode: [*c]cudnnRNNClipMode_t, clipNanOpt: [*c]cudnnNanPropagation_t, lclip: [*c]f64, rclip: [*c]f64) cudnnStatus_t;
pub extern fn cudnnRNNGetClip_v9(rnnDesc: cudnnRNNDescriptor_t, clipMode: [*c]cudnnRNNClipMode_t, lclip: [*c]f64, rclip: [*c]f64) cudnnStatus_t;
pub extern fn cudnnBuildRNNDynamic(handle: cudnnHandle_t, rnnDesc: cudnnRNNDescriptor_t, miniBatch: c_int) cudnnStatus_t;
pub extern fn cudnnGetRNNTempSpaceSizes(handle: cudnnHandle_t, rnnDesc: cudnnRNNDescriptor_t, fwdMode: cudnnForwardMode_t, xDesc: cudnnRNNDataDescriptor_t, workSpaceSize: [*c]usize, reserveSpaceSize: [*c]usize) cudnnStatus_t;
pub extern fn cudnnGetRNNWeightSpaceSize(handle: cudnnHandle_t, rnnDesc: cudnnRNNDescriptor_t, weightSpaceSize: [*c]usize) cudnnStatus_t;
pub extern fn cudnnGetRNNWeightParams(handle: cudnnHandle_t, rnnDesc: cudnnRNNDescriptor_t, pseudoLayer: i32, weightSpaceSize: usize, weightSpace: ?*const anyopaque, linLayerID: i32, mDesc: cudnnTensorDescriptor_t, mAddr: [*c]?*anyopaque, bDesc: cudnnTensorDescriptor_t, bAddr: [*c]?*anyopaque) cudnnStatus_t;
pub extern fn cudnnCreateRNNDataDescriptor(rnnDataDesc: [*c]cudnnRNNDataDescriptor_t) cudnnStatus_t;
pub extern fn cudnnDestroyRNNDataDescriptor(rnnDataDesc: cudnnRNNDataDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetRNNDataDescriptor(rnnDataDesc: cudnnRNNDataDescriptor_t, dataType: cudnnDataType_t, layout: cudnnRNNDataLayout_t, maxSeqLength: c_int, batchSize: c_int, vectorSize: c_int, seqLengthArray: [*c]const c_int, paddingFill: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnGetRNNDataDescriptor(rnnDataDesc: cudnnRNNDataDescriptor_t, dataType: [*c]cudnnDataType_t, layout: [*c]cudnnRNNDataLayout_t, maxSeqLength: [*c]c_int, batchSize: [*c]c_int, vectorSize: [*c]c_int, arrayLengthRequested: c_int, seqLengthArray: [*c]c_int, paddingFill: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnRNNForward(handle: cudnnHandle_t, rnnDesc: cudnnRNNDescriptor_t, fwdMode: cudnnForwardMode_t, devSeqLengths: [*c]const i32, xDesc: cudnnRNNDataDescriptor_t, x: ?*const anyopaque, yDesc: cudnnRNNDataDescriptor_t, y: ?*anyopaque, hDesc: cudnnTensorDescriptor_t, hx: ?*const anyopaque, hy: ?*anyopaque, cDesc: cudnnTensorDescriptor_t, cx: ?*const anyopaque, cy: ?*anyopaque, weightSpaceSize: usize, weightSpace: ?*const anyopaque, workSpaceSize: usize, workSpace: ?*anyopaque, reserveSpaceSize: usize, reserveSpace: ?*anyopaque) cudnnStatus_t;
pub const CUDNN_SEQDATA_TIME_DIM: c_int = 0;
pub const CUDNN_SEQDATA_BATCH_DIM: c_int = 1;
pub const CUDNN_SEQDATA_BEAM_DIM: c_int = 2;
pub const CUDNN_SEQDATA_VECT_DIM: c_int = 3;
pub const cudnnSeqDataAxis_t = c_uint;
pub const struct_cudnnSeqDataStruct = opaque {};
pub const cudnnSeqDataDescriptor_t = ?*struct_cudnnSeqDataStruct;
pub extern fn cudnnCreateSeqDataDescriptor(seqDataDesc: [*c]cudnnSeqDataDescriptor_t) cudnnStatus_t;
pub extern fn cudnnDestroySeqDataDescriptor(seqDataDesc: cudnnSeqDataDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetSeqDataDescriptor(seqDataDesc: cudnnSeqDataDescriptor_t, dataType: cudnnDataType_t, nbDims: c_int, dimA: [*c]const c_int, axes: [*c]const cudnnSeqDataAxis_t, seqLengthArraySize: usize, seqLengthArray: [*c]const c_int, paddingFill: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnGetSeqDataDescriptor(seqDataDesc: cudnnSeqDataDescriptor_t, dataType: [*c]cudnnDataType_t, nbDims: [*c]c_int, nbDimsRequested: c_int, dimA: [*c]c_int, axes: [*c]cudnnSeqDataAxis_t, seqLengthArraySize: [*c]usize, seqLengthSizeRequested: usize, seqLengthArray: [*c]c_int, paddingFill: ?*anyopaque) cudnnStatus_t;
pub const struct_cudnnAttnStruct = opaque {};
pub const cudnnAttnDescriptor_t = ?*struct_cudnnAttnStruct;
pub extern fn cudnnCreateAttnDescriptor(attnDesc: [*c]cudnnAttnDescriptor_t) cudnnStatus_t;
pub extern fn cudnnDestroyAttnDescriptor(attnDesc: cudnnAttnDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetAttnDescriptor(attnDesc: cudnnAttnDescriptor_t, attnMode: c_uint, nHeads: c_int, smScaler: f64, dataType: cudnnDataType_t, computePrec: cudnnDataType_t, mathType: cudnnMathType_t, attnDropoutDesc: cudnnDropoutDescriptor_t, postDropoutDesc: cudnnDropoutDescriptor_t, qSize: c_int, kSize: c_int, vSize: c_int, qProjSize: c_int, kProjSize: c_int, vProjSize: c_int, oProjSize: c_int, qoMaxSeqLength: c_int, kvMaxSeqLength: c_int, maxBatchSize: c_int, maxBeamSize: c_int) cudnnStatus_t;
pub extern fn cudnnGetAttnDescriptor(attnDesc: cudnnAttnDescriptor_t, attnMode: [*c]c_uint, nHeads: [*c]c_int, smScaler: [*c]f64, dataType: [*c]cudnnDataType_t, computePrec: [*c]cudnnDataType_t, mathType: [*c]cudnnMathType_t, attnDropoutDesc: [*c]cudnnDropoutDescriptor_t, postDropoutDesc: [*c]cudnnDropoutDescriptor_t, qSize: [*c]c_int, kSize: [*c]c_int, vSize: [*c]c_int, qProjSize: [*c]c_int, kProjSize: [*c]c_int, vProjSize: [*c]c_int, oProjSize: [*c]c_int, qoMaxSeqLength: [*c]c_int, kvMaxSeqLength: [*c]c_int, maxBatchSize: [*c]c_int, maxBeamSize: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetMultiHeadAttnBuffers(handle: cudnnHandle_t, attnDesc: cudnnAttnDescriptor_t, weightSizeInBytes: [*c]usize, workSpaceSizeInBytes: [*c]usize, reserveSpaceSizeInBytes: [*c]usize) cudnnStatus_t;
pub const CUDNN_MH_ATTN_Q_WEIGHTS: c_int = 0;
pub const CUDNN_MH_ATTN_K_WEIGHTS: c_int = 1;
pub const CUDNN_MH_ATTN_V_WEIGHTS: c_int = 2;
pub const CUDNN_MH_ATTN_O_WEIGHTS: c_int = 3;
pub const CUDNN_MH_ATTN_Q_BIASES: c_int = 4;
pub const CUDNN_MH_ATTN_K_BIASES: c_int = 5;
pub const CUDNN_MH_ATTN_V_BIASES: c_int = 6;
pub const CUDNN_MH_ATTN_O_BIASES: c_int = 7;
pub const cudnnMultiHeadAttnWeightKind_t = c_uint;
pub extern fn cudnnGetMultiHeadAttnWeights(handle: cudnnHandle_t, attnDesc: cudnnAttnDescriptor_t, wKind: cudnnMultiHeadAttnWeightKind_t, weightSizeInBytes: usize, weights: ?*const anyopaque, wDesc: cudnnTensorDescriptor_t, wAddr: [*c]?*anyopaque) cudnnStatus_t;
pub extern fn cudnnMultiHeadAttnForward(handle: cudnnHandle_t, attnDesc: cudnnAttnDescriptor_t, currIdx: c_int, loWinIdx: [*c]const c_int, hiWinIdx: [*c]const c_int, devSeqLengthsQO: [*c]const c_int, devSeqLengthsKV: [*c]const c_int, qDesc: cudnnSeqDataDescriptor_t, queries: ?*const anyopaque, residuals: ?*const anyopaque, kDesc: cudnnSeqDataDescriptor_t, keys: ?*const anyopaque, vDesc: cudnnSeqDataDescriptor_t, values: ?*const anyopaque, oDesc: cudnnSeqDataDescriptor_t, out: ?*anyopaque, weightSizeInBytes: usize, weights: ?*const anyopaque, workSpaceSizeInBytes: usize, workSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize, reserveSpace: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnAdvVersionCheck() cudnnStatus_t;
pub const CUDNN_WGRAD_MODE_ADD: c_int = 0;
pub const CUDNN_WGRAD_MODE_SET: c_int = 1;
pub const cudnnWgradMode_t = c_uint;
pub extern fn cudnnRNNBackwardData_v8(handle: cudnnHandle_t, rnnDesc: cudnnRNNDescriptor_t, devSeqLengths: [*c]const i32, yDesc: cudnnRNNDataDescriptor_t, y: ?*const anyopaque, dy: ?*const anyopaque, xDesc: cudnnRNNDataDescriptor_t, dx: ?*anyopaque, hDesc: cudnnTensorDescriptor_t, hx: ?*const anyopaque, dhy: ?*const anyopaque, dhx: ?*anyopaque, cDesc: cudnnTensorDescriptor_t, cx: ?*const anyopaque, dcy: ?*const anyopaque, dcx: ?*anyopaque, weightSpaceSize: usize, weightSpace: ?*const anyopaque, workSpaceSize: usize, workSpace: ?*anyopaque, reserveSpaceSize: usize, reserveSpace: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnRNNBackwardWeights_v8(handle: cudnnHandle_t, rnnDesc: cudnnRNNDescriptor_t, addGrad: cudnnWgradMode_t, devSeqLengths: [*c]const i32, xDesc: cudnnRNNDataDescriptor_t, x: ?*const anyopaque, hDesc: cudnnTensorDescriptor_t, hx: ?*const anyopaque, yDesc: cudnnRNNDataDescriptor_t, y: ?*const anyopaque, weightSpaceSize: usize, dweightSpace: ?*anyopaque, workSpaceSize: usize, workSpace: ?*anyopaque, reserveSpaceSize: usize, reserveSpace: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnMultiHeadAttnBackwardData(handle: cudnnHandle_t, attnDesc: cudnnAttnDescriptor_t, loWinIdx: [*c]const c_int, hiWinIdx: [*c]const c_int, devSeqLengthsDQDO: [*c]const c_int, devSeqLengthsDKDV: [*c]const c_int, doDesc: cudnnSeqDataDescriptor_t, dout: ?*const anyopaque, dqDesc: cudnnSeqDataDescriptor_t, dqueries: ?*anyopaque, queries: ?*const anyopaque, dkDesc: cudnnSeqDataDescriptor_t, dkeys: ?*anyopaque, keys: ?*const anyopaque, dvDesc: cudnnSeqDataDescriptor_t, dvalues: ?*anyopaque, values: ?*const anyopaque, weightSizeInBytes: usize, weights: ?*const anyopaque, workSpaceSizeInBytes: usize, workSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize, reserveSpace: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnMultiHeadAttnBackwardWeights(handle: cudnnHandle_t, attnDesc: cudnnAttnDescriptor_t, addGrad: cudnnWgradMode_t, qDesc: cudnnSeqDataDescriptor_t, queries: ?*const anyopaque, kDesc: cudnnSeqDataDescriptor_t, keys: ?*const anyopaque, vDesc: cudnnSeqDataDescriptor_t, values: ?*const anyopaque, doDesc: cudnnSeqDataDescriptor_t, dout: ?*const anyopaque, weightSizeInBytes: usize, weights: ?*const anyopaque, dweights: ?*anyopaque, workSpaceSizeInBytes: usize, workSpace: ?*anyopaque, reserveSpaceSizeInBytes: usize, reserveSpace: ?*anyopaque) cudnnStatus_t;
pub const CUDNN_LOSS_NORMALIZATION_NONE: c_int = 0;
pub const CUDNN_LOSS_NORMALIZATION_SOFTMAX: c_int = 1;
pub const cudnnLossNormalizationMode_t = c_uint;
pub extern fn cudnnCreateCTCLossDescriptor(ctcLossDesc: [*c]cudnnCTCLossDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetCTCLossDescriptor(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: cudnnDataType_t) cudnnStatus_t;
pub extern fn cudnnSetCTCLossDescriptorEx(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: cudnnDataType_t, normMode: cudnnLossNormalizationMode_t, gradMode: cudnnNanPropagation_t) cudnnStatus_t;
pub extern fn cudnnSetCTCLossDescriptor_v8(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: cudnnDataType_t, normMode: cudnnLossNormalizationMode_t, gradMode: cudnnNanPropagation_t, maxLabelLength: c_int) cudnnStatus_t;
pub extern fn cudnnSetCTCLossDescriptor_v9(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: cudnnDataType_t, normMode: cudnnLossNormalizationMode_t, ctcGradMode: cudnnCTCGradMode_t, maxLabelLength: c_int) cudnnStatus_t;
pub extern fn cudnnGetCTCLossDescriptor(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: [*c]cudnnDataType_t) cudnnStatus_t;
pub extern fn cudnnGetCTCLossDescriptorEx(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: [*c]cudnnDataType_t, normMode: [*c]cudnnLossNormalizationMode_t, gradMode: [*c]cudnnNanPropagation_t) cudnnStatus_t;
pub extern fn cudnnGetCTCLossDescriptor_v8(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: [*c]cudnnDataType_t, normMode: [*c]cudnnLossNormalizationMode_t, gradMode: [*c]cudnnNanPropagation_t, maxLabelLength: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetCTCLossDescriptor_v9(ctcLossDesc: cudnnCTCLossDescriptor_t, compType: [*c]cudnnDataType_t, normMode: [*c]cudnnLossNormalizationMode_t, ctcGradMode: [*c]cudnnCTCGradMode_t, maxLabelLength: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnDestroyCTCLossDescriptor(ctcLossDesc: cudnnCTCLossDescriptor_t) cudnnStatus_t;
pub extern fn cudnnCTCLoss(handle: cudnnHandle_t, probsDesc: cudnnTensorDescriptor_t, probs: ?*const anyopaque, hostLabels: [*c]const c_int, hostLabelLengths: [*c]const c_int, hostInputLengths: [*c]const c_int, costs: ?*anyopaque, gradientsDesc: cudnnTensorDescriptor_t, gradients: ?*anyopaque, algo: cudnnCTCLossAlgo_t, ctcLossDesc: cudnnCTCLossDescriptor_t, workspace: ?*anyopaque, workSpaceSizeInBytes: usize) cudnnStatus_t;
pub extern fn cudnnCTCLoss_v8(handle: cudnnHandle_t, algo: cudnnCTCLossAlgo_t, ctcLossDesc: cudnnCTCLossDescriptor_t, probsDesc: cudnnTensorDescriptor_t, probs: ?*const anyopaque, labels: [*c]const c_int, labelLengths: [*c]const c_int, inputLengths: [*c]const c_int, costs: ?*anyopaque, gradientsDesc: cudnnTensorDescriptor_t, gradients: ?*anyopaque, workSpaceSizeInBytes: usize, workspace: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnGetCTCLossWorkspaceSize(handle: cudnnHandle_t, probsDesc: cudnnTensorDescriptor_t, gradientsDesc: cudnnTensorDescriptor_t, labels: [*c]const c_int, labelLengths: [*c]const c_int, inputLengths: [*c]const c_int, algo: cudnnCTCLossAlgo_t, ctcLossDesc: cudnnCTCLossDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnGetCTCLossWorkspaceSize_v8(handle: cudnnHandle_t, algo: cudnnCTCLossAlgo_t, ctcLossDesc: cudnnCTCLossDescriptor_t, probsDesc: cudnnTensorDescriptor_t, gradientsDesc: cudnnTensorDescriptor_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub const struct_cudnnConvolutionStruct = opaque {};
pub const cudnnConvolutionDescriptor_t = ?*struct_cudnnConvolutionStruct;
pub const struct_cudnnConvolutionFwdAlgoPerfStruct = extern struct {
    algo: cudnnConvolutionFwdAlgo_t = @import("std").mem.zeroes(cudnnConvolutionFwdAlgo_t),
    status: cudnnStatus_t = @import("std").mem.zeroes(cudnnStatus_t),
    time: f32 = @import("std").mem.zeroes(f32),
    memory: usize = @import("std").mem.zeroes(usize),
    determinism: cudnnDeterminism_t = @import("std").mem.zeroes(cudnnDeterminism_t),
    mathType: cudnnMathType_t = @import("std").mem.zeroes(cudnnMathType_t),
    reserved: [3]c_int = @import("std").mem.zeroes([3]c_int),
};
pub const cudnnConvolutionFwdAlgoPerf_t = struct_cudnnConvolutionFwdAlgoPerfStruct;
pub extern fn cudnnCreateConvolutionDescriptor(convDesc: [*c]cudnnConvolutionDescriptor_t) cudnnStatus_t;
pub extern fn cudnnDestroyConvolutionDescriptor(convDesc: cudnnConvolutionDescriptor_t) cudnnStatus_t;
pub extern fn cudnnSetConvolutionMathType(convDesc: cudnnConvolutionDescriptor_t, mathType: cudnnMathType_t) cudnnStatus_t;
pub extern fn cudnnGetConvolutionMathType(convDesc: cudnnConvolutionDescriptor_t, mathType: [*c]cudnnMathType_t) cudnnStatus_t;
pub extern fn cudnnSetConvolutionGroupCount(convDesc: cudnnConvolutionDescriptor_t, groupCount: c_int) cudnnStatus_t;
pub extern fn cudnnGetConvolutionGroupCount(convDesc: cudnnConvolutionDescriptor_t, groupCount: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnSetConvolutionReorderType(convDesc: cudnnConvolutionDescriptor_t, reorderType: cudnnReorderType_t) cudnnStatus_t;
pub extern fn cudnnGetConvolutionReorderType(convDesc: cudnnConvolutionDescriptor_t, reorderType: [*c]cudnnReorderType_t) cudnnStatus_t;
pub extern fn cudnnSetConvolution2dDescriptor(convDesc: cudnnConvolutionDescriptor_t, pad_h: c_int, pad_w: c_int, u: c_int, v: c_int, dilation_h: c_int, dilation_w: c_int, mode: cudnnConvolutionMode_t, computeType: cudnnDataType_t) cudnnStatus_t;
pub extern fn cudnnGetConvolution2dDescriptor(convDesc: cudnnConvolutionDescriptor_t, pad_h: [*c]c_int, pad_w: [*c]c_int, u: [*c]c_int, v: [*c]c_int, dilation_h: [*c]c_int, dilation_w: [*c]c_int, mode: [*c]cudnnConvolutionMode_t, computeType: [*c]cudnnDataType_t) cudnnStatus_t;
pub extern fn cudnnSetConvolutionNdDescriptor(convDesc: cudnnConvolutionDescriptor_t, arrayLength: c_int, padA: [*c]const c_int, filterStrideA: [*c]const c_int, dilationA: [*c]const c_int, mode: cudnnConvolutionMode_t, computeType: cudnnDataType_t) cudnnStatus_t;
pub extern fn cudnnGetConvolutionNdDescriptor(convDesc: cudnnConvolutionDescriptor_t, arrayLengthRequested: c_int, arrayLength: [*c]c_int, padA: [*c]c_int, strideA: [*c]c_int, dilationA: [*c]c_int, mode: [*c]cudnnConvolutionMode_t, computeType: [*c]cudnnDataType_t) cudnnStatus_t;
pub extern fn cudnnGetConvolution2dForwardOutputDim(convDesc: cudnnConvolutionDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, filterDesc: cudnnFilterDescriptor_t, n: [*c]c_int, c: [*c]c_int, h: [*c]c_int, w: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetConvolutionNdForwardOutputDim(convDesc: cudnnConvolutionDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, filterDesc: cudnnFilterDescriptor_t, nbDims: c_int, tensorOuputDimA: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetConvolutionForwardAlgorithmMaxCount(handle: cudnnHandle_t, count: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnGetConvolutionForwardAlgorithm_v7(handle: cudnnHandle_t, srcDesc: cudnnTensorDescriptor_t, filterDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, destDesc: cudnnTensorDescriptor_t, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionFwdAlgoPerf_t) cudnnStatus_t;
pub extern fn cudnnFindConvolutionForwardAlgorithm(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, wDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, yDesc: cudnnTensorDescriptor_t, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionFwdAlgoPerf_t) cudnnStatus_t;
pub extern fn cudnnFindConvolutionForwardAlgorithmEx(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, wDesc: cudnnFilterDescriptor_t, w: ?*const anyopaque, convDesc: cudnnConvolutionDescriptor_t, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionFwdAlgoPerf_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize) cudnnStatus_t;
pub extern fn cudnnIm2Col(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, wDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, colBuffer: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnReorderFilterAndBias(handle: cudnnHandle_t, filterDesc: cudnnFilterDescriptor_t, reorderType: cudnnReorderType_t, filterData: ?*const anyopaque, reorderedFilterData: ?*anyopaque, reorderBias: c_int, biasData: ?*const anyopaque, reorderedBiasData: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnGetConvolutionForwardWorkspaceSize(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, wDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, yDesc: cudnnTensorDescriptor_t, algo: cudnnConvolutionFwdAlgo_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnConvolutionForward(handle: cudnnHandle_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, wDesc: cudnnFilterDescriptor_t, w: ?*const anyopaque, convDesc: cudnnConvolutionDescriptor_t, algo: cudnnConvolutionFwdAlgo_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize, beta: ?*const anyopaque, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnConvolutionBiasActivationForward(handle: cudnnHandle_t, alpha1: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, wDesc: cudnnFilterDescriptor_t, w: ?*const anyopaque, convDesc: cudnnConvolutionDescriptor_t, algo: cudnnConvolutionFwdAlgo_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize, alpha2: ?*const anyopaque, zDesc: cudnnTensorDescriptor_t, z: ?*const anyopaque, biasDesc: cudnnTensorDescriptor_t, bias: ?*const anyopaque, activationDesc: cudnnActivationDescriptor_t, yDesc: cudnnTensorDescriptor_t, y: ?*anyopaque) cudnnStatus_t;
pub const struct_cudnnConvolutionBwdDataAlgoPerfStruct = extern struct {
    algo: cudnnConvolutionBwdDataAlgo_t = @import("std").mem.zeroes(cudnnConvolutionBwdDataAlgo_t),
    status: cudnnStatus_t = @import("std").mem.zeroes(cudnnStatus_t),
    time: f32 = @import("std").mem.zeroes(f32),
    memory: usize = @import("std").mem.zeroes(usize),
    determinism: cudnnDeterminism_t = @import("std").mem.zeroes(cudnnDeterminism_t),
    mathType: cudnnMathType_t = @import("std").mem.zeroes(cudnnMathType_t),
    reserved: [3]c_int = @import("std").mem.zeroes([3]c_int),
};
pub const cudnnConvolutionBwdDataAlgoPerf_t = struct_cudnnConvolutionBwdDataAlgoPerfStruct;
pub extern fn cudnnGetConvolutionBackwardDataAlgorithmMaxCount(handle: cudnnHandle_t, count: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnFindConvolutionBackwardDataAlgorithm(handle: cudnnHandle_t, wDesc: cudnnFilterDescriptor_t, dyDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, dxDesc: cudnnTensorDescriptor_t, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionBwdDataAlgoPerf_t) cudnnStatus_t;
pub extern fn cudnnFindConvolutionBackwardDataAlgorithmEx(handle: cudnnHandle_t, wDesc: cudnnFilterDescriptor_t, w: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, convDesc: cudnnConvolutionDescriptor_t, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionBwdDataAlgoPerf_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize) cudnnStatus_t;
pub extern fn cudnnGetConvolutionBackwardDataAlgorithm_v7(handle: cudnnHandle_t, filterDesc: cudnnFilterDescriptor_t, diffDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, gradDesc: cudnnTensorDescriptor_t, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionBwdDataAlgoPerf_t) cudnnStatus_t;
pub extern fn cudnnGetConvolutionBackwardDataWorkspaceSize(handle: cudnnHandle_t, wDesc: cudnnFilterDescriptor_t, dyDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, dxDesc: cudnnTensorDescriptor_t, algo: cudnnConvolutionBwdDataAlgo_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnConvolutionBackwardData(handle: cudnnHandle_t, alpha: ?*const anyopaque, wDesc: cudnnFilterDescriptor_t, w: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, convDesc: cudnnConvolutionDescriptor_t, algo: cudnnConvolutionBwdDataAlgo_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize, beta: ?*const anyopaque, dxDesc: cudnnTensorDescriptor_t, dx: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnGetFoldedConvBackwardDataDescriptors(handle: cudnnHandle_t, filterDesc: cudnnFilterDescriptor_t, diffDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, gradDesc: cudnnTensorDescriptor_t, transformFormat: cudnnTensorFormat_t, foldedFilterDesc: cudnnFilterDescriptor_t, paddedDiffDesc: cudnnTensorDescriptor_t, foldedConvDesc: cudnnConvolutionDescriptor_t, foldedGradDesc: cudnnTensorDescriptor_t, filterFoldTransDesc: cudnnTensorTransformDescriptor_t, diffPadTransDesc: cudnnTensorTransformDescriptor_t, gradFoldTransDesc: cudnnTensorTransformDescriptor_t, gradUnfoldTransDesc: cudnnTensorTransformDescriptor_t) cudnnStatus_t;
pub const struct_cudnnFusedOpsConstParamStruct = opaque {};
pub const cudnnFusedOpsConstParamPack_t = ?*struct_cudnnFusedOpsConstParamStruct;
pub const struct_cudnnFusedOpsVariantParamStruct = opaque {};
pub const cudnnFusedOpsVariantParamPack_t = ?*struct_cudnnFusedOpsVariantParamStruct;
pub const struct_cudnnFusedOpsPlanStruct = opaque {};
pub const cudnnFusedOpsPlan_t = ?*struct_cudnnFusedOpsPlanStruct;
pub const CUDNN_FUSED_SCALE_BIAS_ACTIVATION_CONV_BNSTATS: c_int = 0;
pub const CUDNN_FUSED_SCALE_BIAS_ACTIVATION_WGRAD: c_int = 1;
pub const CUDNN_FUSED_BN_FINALIZE_STATISTICS_TRAINING: c_int = 2;
pub const CUDNN_FUSED_BN_FINALIZE_STATISTICS_INFERENCE: c_int = 3;
pub const CUDNN_FUSED_CONV_SCALE_BIAS_ADD_ACTIVATION: c_int = 4;
pub const CUDNN_FUSED_SCALE_BIAS_ADD_ACTIVATION_GEN_BITMASK: c_int = 5;
pub const CUDNN_FUSED_DACTIVATION_FORK_DBATCHNORM: c_int = 6;
pub const cudnnFusedOps_t = c_uint;
pub const CUDNN_PARAM_XDESC: c_int = 0;
pub const CUDNN_PARAM_XDATA_PLACEHOLDER: c_int = 1;
pub const CUDNN_PARAM_BN_MODE: c_int = 2;
pub const CUDNN_PARAM_BN_EQSCALEBIAS_DESC: c_int = 3;
pub const CUDNN_PARAM_BN_EQSCALE_PLACEHOLDER: c_int = 4;
pub const CUDNN_PARAM_BN_EQBIAS_PLACEHOLDER: c_int = 5;
pub const CUDNN_PARAM_ACTIVATION_DESC: c_int = 6;
pub const CUDNN_PARAM_CONV_DESC: c_int = 7;
pub const CUDNN_PARAM_WDESC: c_int = 8;
pub const CUDNN_PARAM_WDATA_PLACEHOLDER: c_int = 9;
pub const CUDNN_PARAM_DWDESC: c_int = 10;
pub const CUDNN_PARAM_DWDATA_PLACEHOLDER: c_int = 11;
pub const CUDNN_PARAM_YDESC: c_int = 12;
pub const CUDNN_PARAM_YDATA_PLACEHOLDER: c_int = 13;
pub const CUDNN_PARAM_DYDESC: c_int = 14;
pub const CUDNN_PARAM_DYDATA_PLACEHOLDER: c_int = 15;
pub const CUDNN_PARAM_YSTATS_DESC: c_int = 16;
pub const CUDNN_PARAM_YSUM_PLACEHOLDER: c_int = 17;
pub const CUDNN_PARAM_YSQSUM_PLACEHOLDER: c_int = 18;
pub const CUDNN_PARAM_BN_SCALEBIAS_MEANVAR_DESC: c_int = 19;
pub const CUDNN_PARAM_BN_SCALE_PLACEHOLDER: c_int = 20;
pub const CUDNN_PARAM_BN_BIAS_PLACEHOLDER: c_int = 21;
pub const CUDNN_PARAM_BN_SAVED_MEAN_PLACEHOLDER: c_int = 22;
pub const CUDNN_PARAM_BN_SAVED_INVSTD_PLACEHOLDER: c_int = 23;
pub const CUDNN_PARAM_BN_RUNNING_MEAN_PLACEHOLDER: c_int = 24;
pub const CUDNN_PARAM_BN_RUNNING_VAR_PLACEHOLDER: c_int = 25;
pub const CUDNN_PARAM_ZDESC: c_int = 26;
pub const CUDNN_PARAM_ZDATA_PLACEHOLDER: c_int = 27;
pub const CUDNN_PARAM_BN_Z_EQSCALEBIAS_DESC: c_int = 28;
pub const CUDNN_PARAM_BN_Z_EQSCALE_PLACEHOLDER: c_int = 29;
pub const CUDNN_PARAM_BN_Z_EQBIAS_PLACEHOLDER: c_int = 30;
pub const CUDNN_PARAM_ACTIVATION_BITMASK_DESC: c_int = 31;
pub const CUDNN_PARAM_ACTIVATION_BITMASK_PLACEHOLDER: c_int = 32;
pub const CUDNN_PARAM_DXDESC: c_int = 33;
pub const CUDNN_PARAM_DXDATA_PLACEHOLDER: c_int = 34;
pub const CUDNN_PARAM_DZDESC: c_int = 35;
pub const CUDNN_PARAM_DZDATA_PLACEHOLDER: c_int = 36;
pub const CUDNN_PARAM_BN_DSCALE_PLACEHOLDER: c_int = 37;
pub const CUDNN_PARAM_BN_DBIAS_PLACEHOLDER: c_int = 38;
pub const cudnnFusedOpsConstParamLabel_t = c_uint;
pub const CUDNN_PTR_NULL: c_int = 0;
pub const CUDNN_PTR_ELEM_ALIGNED: c_int = 1;
pub const CUDNN_PTR_16B_ALIGNED: c_int = 2;
pub const cudnnFusedOpsPointerPlaceHolder_t = c_uint;
pub const CUDNN_PTR_XDATA: c_int = 0;
pub const CUDNN_PTR_BN_EQSCALE: c_int = 1;
pub const CUDNN_PTR_BN_EQBIAS: c_int = 2;
pub const CUDNN_PTR_WDATA: c_int = 3;
pub const CUDNN_PTR_DWDATA: c_int = 4;
pub const CUDNN_PTR_YDATA: c_int = 5;
pub const CUDNN_PTR_DYDATA: c_int = 6;
pub const CUDNN_PTR_YSUM: c_int = 7;
pub const CUDNN_PTR_YSQSUM: c_int = 8;
pub const CUDNN_PTR_WORKSPACE: c_int = 9;
pub const CUDNN_PTR_BN_SCALE: c_int = 10;
pub const CUDNN_PTR_BN_BIAS: c_int = 11;
pub const CUDNN_PTR_BN_SAVED_MEAN: c_int = 12;
pub const CUDNN_PTR_BN_SAVED_INVSTD: c_int = 13;
pub const CUDNN_PTR_BN_RUNNING_MEAN: c_int = 14;
pub const CUDNN_PTR_BN_RUNNING_VAR: c_int = 15;
pub const CUDNN_PTR_ZDATA: c_int = 16;
pub const CUDNN_PTR_BN_Z_EQSCALE: c_int = 17;
pub const CUDNN_PTR_BN_Z_EQBIAS: c_int = 18;
pub const CUDNN_PTR_ACTIVATION_BITMASK: c_int = 19;
pub const CUDNN_PTR_DXDATA: c_int = 20;
pub const CUDNN_PTR_DZDATA: c_int = 21;
pub const CUDNN_PTR_BN_DSCALE: c_int = 22;
pub const CUDNN_PTR_BN_DBIAS: c_int = 23;
pub const CUDNN_SCALAR_SIZE_T_WORKSPACE_SIZE_IN_BYTES: c_int = 100;
pub const CUDNN_SCALAR_INT64_T_BN_ACCUMULATION_COUNT: c_int = 101;
pub const CUDNN_SCALAR_DOUBLE_BN_EXP_AVG_FACTOR: c_int = 102;
pub const CUDNN_SCALAR_DOUBLE_BN_EPSILON: c_int = 103;
pub const cudnnFusedOpsVariantParamLabel_t = c_uint;
pub extern fn cudnnCnnVersionCheck() cudnnStatus_t;
pub const struct_cudnnConvolutionBwdFilterAlgoPerfStruct = extern struct {
    algo: cudnnConvolutionBwdFilterAlgo_t = @import("std").mem.zeroes(cudnnConvolutionBwdFilterAlgo_t),
    status: cudnnStatus_t = @import("std").mem.zeroes(cudnnStatus_t),
    time: f32 = @import("std").mem.zeroes(f32),
    memory: usize = @import("std").mem.zeroes(usize),
    determinism: cudnnDeterminism_t = @import("std").mem.zeroes(cudnnDeterminism_t),
    mathType: cudnnMathType_t = @import("std").mem.zeroes(cudnnMathType_t),
    reserved: [3]c_int = @import("std").mem.zeroes([3]c_int),
};
pub const cudnnConvolutionBwdFilterAlgoPerf_t = struct_cudnnConvolutionBwdFilterAlgoPerfStruct;
pub extern fn cudnnGetConvolutionBackwardFilterAlgorithmMaxCount(handle: cudnnHandle_t, count: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnFindConvolutionBackwardFilterAlgorithm(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, dyDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, dwDesc: cudnnFilterDescriptor_t, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionBwdFilterAlgoPerf_t) cudnnStatus_t;
pub extern fn cudnnFindConvolutionBackwardFilterAlgorithmEx(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, y: ?*const anyopaque, convDesc: cudnnConvolutionDescriptor_t, dwDesc: cudnnFilterDescriptor_t, dw: ?*anyopaque, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionBwdFilterAlgoPerf_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize) cudnnStatus_t;
pub extern fn cudnnGetConvolutionBackwardFilterAlgorithm_v7(handle: cudnnHandle_t, srcDesc: cudnnTensorDescriptor_t, diffDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, gradDesc: cudnnFilterDescriptor_t, requestedAlgoCount: c_int, returnedAlgoCount: [*c]c_int, perfResults: [*c]cudnnConvolutionBwdFilterAlgoPerf_t) cudnnStatus_t;
pub extern fn cudnnGetConvolutionBackwardFilterWorkspaceSize(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, dyDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, gradDesc: cudnnFilterDescriptor_t, algo: cudnnConvolutionBwdFilterAlgo_t, sizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnConvolutionBackwardFilter(handle: cudnnHandle_t, alpha: ?*const anyopaque, xDesc: cudnnTensorDescriptor_t, x: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, convDesc: cudnnConvolutionDescriptor_t, algo: cudnnConvolutionBwdFilterAlgo_t, workSpace: ?*anyopaque, workSpaceSizeInBytes: usize, beta: ?*const anyopaque, dwDesc: cudnnFilterDescriptor_t, dw: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnConvolutionBackwardBias(handle: cudnnHandle_t, alpha: ?*const anyopaque, dyDesc: cudnnTensorDescriptor_t, dy: ?*const anyopaque, beta: ?*const anyopaque, dbDesc: cudnnTensorDescriptor_t, db: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnCreateFusedOpsConstParamPack(constPack: [*c]cudnnFusedOpsConstParamPack_t, ops: cudnnFusedOps_t) cudnnStatus_t;
pub extern fn cudnnDestroyFusedOpsConstParamPack(constPack: cudnnFusedOpsConstParamPack_t) cudnnStatus_t;
pub extern fn cudnnSetFusedOpsConstParamPackAttribute(constPack: cudnnFusedOpsConstParamPack_t, paramLabel: cudnnFusedOpsConstParamLabel_t, param: ?*const anyopaque) cudnnStatus_t;
pub extern fn cudnnGetFusedOpsConstParamPackAttribute(constPack: cudnnFusedOpsConstParamPack_t, paramLabel: cudnnFusedOpsConstParamLabel_t, param: ?*anyopaque, isNULL: [*c]c_int) cudnnStatus_t;
pub extern fn cudnnCreateFusedOpsVariantParamPack(varPack: [*c]cudnnFusedOpsVariantParamPack_t, ops: cudnnFusedOps_t) cudnnStatus_t;
pub extern fn cudnnDestroyFusedOpsVariantParamPack(varPack: cudnnFusedOpsVariantParamPack_t) cudnnStatus_t;
pub extern fn cudnnSetFusedOpsVariantParamPackAttribute(varPack: cudnnFusedOpsVariantParamPack_t, paramLabel: cudnnFusedOpsVariantParamLabel_t, ptr: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnGetFusedOpsVariantParamPackAttribute(varPack: cudnnFusedOpsVariantParamPack_t, paramLabel: cudnnFusedOpsVariantParamLabel_t, ptr: ?*anyopaque) cudnnStatus_t;
pub extern fn cudnnCreateFusedOpsPlan(plan: [*c]cudnnFusedOpsPlan_t, ops: cudnnFusedOps_t) cudnnStatus_t;
pub extern fn cudnnDestroyFusedOpsPlan(plan: cudnnFusedOpsPlan_t) cudnnStatus_t;
pub extern fn cudnnMakeFusedOpsPlan(handle: cudnnHandle_t, plan: cudnnFusedOpsPlan_t, constPack: cudnnFusedOpsConstParamPack_t, workspaceSizeInBytes: [*c]usize) cudnnStatus_t;
pub extern fn cudnnFusedOpsExecute(handle: cudnnHandle_t, plan: cudnnFusedOpsPlan_t, varPack: cudnnFusedOpsVariantParamPack_t) cudnnStatus_t;
pub const CURAND_STATUS_SUCCESS: c_int = 0;
pub const CURAND_STATUS_VERSION_MISMATCH: c_int = 100;
pub const CURAND_STATUS_NOT_INITIALIZED: c_int = 101;
pub const CURAND_STATUS_ALLOCATION_FAILED: c_int = 102;
pub const CURAND_STATUS_TYPE_ERROR: c_int = 103;
pub const CURAND_STATUS_OUT_OF_RANGE: c_int = 104;
pub const CURAND_STATUS_LENGTH_NOT_MULTIPLE: c_int = 105;
pub const CURAND_STATUS_DOUBLE_PRECISION_REQUIRED: c_int = 106;
pub const CURAND_STATUS_LAUNCH_FAILURE: c_int = 201;
pub const CURAND_STATUS_PREEXISTING_FAILURE: c_int = 202;
pub const CURAND_STATUS_INITIALIZATION_FAILED: c_int = 203;
pub const CURAND_STATUS_ARCH_MISMATCH: c_int = 204;
pub const CURAND_STATUS_INTERNAL_ERROR: c_int = 999;
pub const enum_curandStatus = c_uint;
pub const curandStatus_t = enum_curandStatus;
pub const CURAND_RNG_TEST: c_int = 0;
pub const CURAND_RNG_PSEUDO_DEFAULT: c_int = 100;
pub const CURAND_RNG_PSEUDO_XORWOW: c_int = 101;
pub const CURAND_RNG_PSEUDO_MRG32K3A: c_int = 121;
pub const CURAND_RNG_PSEUDO_MTGP32: c_int = 141;
pub const CURAND_RNG_PSEUDO_MT19937: c_int = 142;
pub const CURAND_RNG_PSEUDO_PHILOX4_32_10: c_int = 161;
pub const CURAND_RNG_QUASI_DEFAULT: c_int = 200;
pub const CURAND_RNG_QUASI_SOBOL32: c_int = 201;
pub const CURAND_RNG_QUASI_SCRAMBLED_SOBOL32: c_int = 202;
pub const CURAND_RNG_QUASI_SOBOL64: c_int = 203;
pub const CURAND_RNG_QUASI_SCRAMBLED_SOBOL64: c_int = 204;
pub const enum_curandRngType = c_uint;
pub const curandRngType_t = enum_curandRngType;
pub const CURAND_ORDERING_PSEUDO_BEST: c_int = 100;
pub const CURAND_ORDERING_PSEUDO_DEFAULT: c_int = 101;
pub const CURAND_ORDERING_PSEUDO_SEEDED: c_int = 102;
pub const CURAND_ORDERING_PSEUDO_LEGACY: c_int = 103;
pub const CURAND_ORDERING_PSEUDO_DYNAMIC: c_int = 104;
pub const CURAND_ORDERING_QUASI_DEFAULT: c_int = 201;
pub const enum_curandOrdering = c_uint;
pub const curandOrdering_t = enum_curandOrdering;
pub const CURAND_DIRECTION_VECTORS_32_JOEKUO6: c_int = 101;
pub const CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6: c_int = 102;
pub const CURAND_DIRECTION_VECTORS_64_JOEKUO6: c_int = 103;
pub const CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6: c_int = 104;
pub const enum_curandDirectionVectorSet = c_uint;
pub const curandDirectionVectorSet_t = enum_curandDirectionVectorSet;
pub const curandDirectionVectors32_t = [32]c_uint;
pub const curandDirectionVectors64_t = [64]c_ulonglong;
pub const struct_curandGenerator_st = opaque {};
pub const curandGenerator_t = ?*struct_curandGenerator_st;
pub const curandDistribution_st = f64;
pub const curandDistribution_t = [*c]curandDistribution_st;
pub const struct_curandDistributionShift_st = opaque {};
pub const curandDistributionShift_t = ?*struct_curandDistributionShift_st;
pub const struct_curandDistributionM2Shift_st = opaque {};
pub const curandDistributionM2Shift_t = ?*struct_curandDistributionM2Shift_st;
pub const struct_curandHistogramM2_st = opaque {};
pub const curandHistogramM2_t = ?*struct_curandHistogramM2_st;
pub const curandHistogramM2K_st = c_uint;
pub const curandHistogramM2K_t = [*c]curandHistogramM2K_st;
pub const curandHistogramM2V_st = curandDistribution_st;
pub const curandHistogramM2V_t = [*c]curandHistogramM2V_st;
pub const struct_curandDiscreteDistribution_st = opaque {};
pub const curandDiscreteDistribution_t = ?*struct_curandDiscreteDistribution_st;
pub const CURAND_CHOOSE_BEST: c_int = 0;
pub const CURAND_ITR: c_int = 1;
pub const CURAND_KNUTH: c_int = 2;
pub const CURAND_HITR: c_int = 3;
pub const CURAND_M1: c_int = 4;
pub const CURAND_M2: c_int = 5;
pub const CURAND_BINARY_SEARCH: c_int = 6;
pub const CURAND_DISCRETE_GAUSS: c_int = 7;
pub const CURAND_REJECTION: c_int = 8;
pub const CURAND_DEVICE_API: c_int = 9;
pub const CURAND_FAST_REJECTION: c_int = 10;
pub const CURAND_3RD: c_int = 11;
pub const CURAND_DEFINITION: c_int = 12;
pub const CURAND_POISSON: c_int = 13;
pub const enum_curandMethod = c_uint;
pub const curandMethod_t = enum_curandMethod;
pub extern fn curandCreateGenerator(generator: [*c]curandGenerator_t, rng_type: curandRngType_t) curandStatus_t;
pub extern fn curandCreateGeneratorHost(generator: [*c]curandGenerator_t, rng_type: curandRngType_t) curandStatus_t;
pub extern fn curandDestroyGenerator(generator: curandGenerator_t) curandStatus_t;
pub extern fn curandGetVersion(version: [*c]c_int) curandStatus_t;
pub extern fn curandGetProperty(@"type": libraryPropertyType, value: [*c]c_int) curandStatus_t;
pub extern fn curandSetStream(generator: curandGenerator_t, stream: cudaStream_t) curandStatus_t;
pub extern fn curandSetPseudoRandomGeneratorSeed(generator: curandGenerator_t, seed: c_ulonglong) curandStatus_t;
pub extern fn curandSetGeneratorOffset(generator: curandGenerator_t, offset: c_ulonglong) curandStatus_t;
pub extern fn curandSetGeneratorOrdering(generator: curandGenerator_t, order: curandOrdering_t) curandStatus_t;
pub extern fn curandSetQuasiRandomGeneratorDimensions(generator: curandGenerator_t, num_dimensions: c_uint) curandStatus_t;
pub extern fn curandGenerate(generator: curandGenerator_t, outputPtr: [*c]c_uint, num: usize) curandStatus_t;
pub extern fn curandGenerateLongLong(generator: curandGenerator_t, outputPtr: [*c]c_ulonglong, num: usize) curandStatus_t;
pub extern fn curandGenerateUniform(generator: curandGenerator_t, outputPtr: [*c]f32, num: usize) curandStatus_t;
pub extern fn curandGenerateUniformDouble(generator: curandGenerator_t, outputPtr: [*c]f64, num: usize) curandStatus_t;
pub extern fn curandGenerateNormal(generator: curandGenerator_t, outputPtr: [*c]f32, n: usize, mean: f32, stddev: f32) curandStatus_t;
pub extern fn curandGenerateNormalDouble(generator: curandGenerator_t, outputPtr: [*c]f64, n: usize, mean: f64, stddev: f64) curandStatus_t;
pub extern fn curandGenerateLogNormal(generator: curandGenerator_t, outputPtr: [*c]f32, n: usize, mean: f32, stddev: f32) curandStatus_t;
pub extern fn curandGenerateLogNormalDouble(generator: curandGenerator_t, outputPtr: [*c]f64, n: usize, mean: f64, stddev: f64) curandStatus_t;
pub extern fn curandCreatePoissonDistribution(lambda: f64, discrete_distribution: [*c]curandDiscreteDistribution_t) curandStatus_t;
pub extern fn curandDestroyDistribution(discrete_distribution: curandDiscreteDistribution_t) curandStatus_t;
pub extern fn curandGeneratePoisson(generator: curandGenerator_t, outputPtr: [*c]c_uint, n: usize, lambda: f64) curandStatus_t;
pub extern fn curandGeneratePoissonMethod(generator: curandGenerator_t, outputPtr: [*c]c_uint, n: usize, lambda: f64, method: curandMethod_t) curandStatus_t;
pub extern fn curandGenerateBinomial(generator: curandGenerator_t, outputPtr: [*c]c_uint, num: usize, n: c_uint, p: f64) curandStatus_t;
pub extern fn curandGenerateBinomialMethod(generator: curandGenerator_t, outputPtr: [*c]c_uint, num: usize, n: c_uint, p: f64, method: curandMethod_t) curandStatus_t;
pub extern fn curandGenerateSeeds(generator: curandGenerator_t) curandStatus_t;
pub extern fn curandGetDirectionVectors32(vectors: [*c][*c]curandDirectionVectors32_t, set: curandDirectionVectorSet_t) curandStatus_t;
pub extern fn curandGetScrambleConstants32(constants: [*c][*c]c_uint) curandStatus_t;
pub extern fn curandGetDirectionVectors64(vectors: [*c][*c]curandDirectionVectors64_t, set: curandDirectionVectorSet_t) curandStatus_t;
pub extern fn curandGetScrambleConstants64(constants: [*c][*c]c_ulonglong) curandStatus_t;
pub const CUFFT_SUCCESS: c_int = 0;
pub const CUFFT_INVALID_PLAN: c_int = 1;
pub const CUFFT_ALLOC_FAILED: c_int = 2;
pub const CUFFT_INVALID_TYPE: c_int = 3;
pub const CUFFT_INVALID_VALUE: c_int = 4;
pub const CUFFT_INTERNAL_ERROR: c_int = 5;
pub const CUFFT_EXEC_FAILED: c_int = 6;
pub const CUFFT_SETUP_FAILED: c_int = 7;
pub const CUFFT_INVALID_SIZE: c_int = 8;
pub const CUFFT_UNALIGNED_DATA: c_int = 9;
pub const CUFFT_INCOMPLETE_PARAMETER_LIST: c_int = 10;
pub const CUFFT_INVALID_DEVICE: c_int = 11;
pub const CUFFT_PARSE_ERROR: c_int = 12;
pub const CUFFT_NO_WORKSPACE: c_int = 13;
pub const CUFFT_NOT_IMPLEMENTED: c_int = 14;
pub const CUFFT_LICENSE_ERROR: c_int = 15;
pub const CUFFT_NOT_SUPPORTED: c_int = 16;
pub const enum_cufftResult_t = c_uint;
pub const cufftResult = enum_cufftResult_t;
pub const cufftReal = f32;
pub const cufftDoubleReal = f64;
pub const cufftComplex = cuComplex;
pub const cufftDoubleComplex = cuDoubleComplex;
pub const CUFFT_R2C: c_int = 42;
pub const CUFFT_C2R: c_int = 44;
pub const CUFFT_C2C: c_int = 41;
pub const CUFFT_D2Z: c_int = 106;
pub const CUFFT_Z2D: c_int = 108;
pub const CUFFT_Z2Z: c_int = 105;
pub const enum_cufftType_t = c_uint;
pub const cufftType = enum_cufftType_t;
pub const CUFFT_COMPATIBILITY_FFTW_PADDING: c_int = 1;
pub const enum_cufftCompatibility_t = c_uint;
pub const cufftCompatibility = enum_cufftCompatibility_t;
pub const cufftHandle = c_int;
pub extern fn cufftPlan1d(plan: [*c]cufftHandle, nx: c_int, @"type": cufftType, batch: c_int) cufftResult;
pub extern fn cufftPlan2d(plan: [*c]cufftHandle, nx: c_int, ny: c_int, @"type": cufftType) cufftResult;
pub extern fn cufftPlan3d(plan: [*c]cufftHandle, nx: c_int, ny: c_int, nz: c_int, @"type": cufftType) cufftResult;
pub extern fn cufftPlanMany(plan: [*c]cufftHandle, rank: c_int, n: [*c]c_int, inembed: [*c]c_int, istride: c_int, idist: c_int, onembed: [*c]c_int, ostride: c_int, odist: c_int, @"type": cufftType, batch: c_int) cufftResult;
pub extern fn cufftMakePlan1d(plan: cufftHandle, nx: c_int, @"type": cufftType, batch: c_int, workSize: [*c]usize) cufftResult;
pub extern fn cufftMakePlan2d(plan: cufftHandle, nx: c_int, ny: c_int, @"type": cufftType, workSize: [*c]usize) cufftResult;
pub extern fn cufftMakePlan3d(plan: cufftHandle, nx: c_int, ny: c_int, nz: c_int, @"type": cufftType, workSize: [*c]usize) cufftResult;
pub extern fn cufftMakePlanMany(plan: cufftHandle, rank: c_int, n: [*c]c_int, inembed: [*c]c_int, istride: c_int, idist: c_int, onembed: [*c]c_int, ostride: c_int, odist: c_int, @"type": cufftType, batch: c_int, workSize: [*c]usize) cufftResult;
pub extern fn cufftMakePlanMany64(plan: cufftHandle, rank: c_int, n: [*c]c_longlong, inembed: [*c]c_longlong, istride: c_longlong, idist: c_longlong, onembed: [*c]c_longlong, ostride: c_longlong, odist: c_longlong, @"type": cufftType, batch: c_longlong, workSize: [*c]usize) cufftResult;
pub extern fn cufftGetSizeMany64(plan: cufftHandle, rank: c_int, n: [*c]c_longlong, inembed: [*c]c_longlong, istride: c_longlong, idist: c_longlong, onembed: [*c]c_longlong, ostride: c_longlong, odist: c_longlong, @"type": cufftType, batch: c_longlong, workSize: [*c]usize) cufftResult;
pub extern fn cufftEstimate1d(nx: c_int, @"type": cufftType, batch: c_int, workSize: [*c]usize) cufftResult;
pub extern fn cufftEstimate2d(nx: c_int, ny: c_int, @"type": cufftType, workSize: [*c]usize) cufftResult;
pub extern fn cufftEstimate3d(nx: c_int, ny: c_int, nz: c_int, @"type": cufftType, workSize: [*c]usize) cufftResult;
pub extern fn cufftEstimateMany(rank: c_int, n: [*c]c_int, inembed: [*c]c_int, istride: c_int, idist: c_int, onembed: [*c]c_int, ostride: c_int, odist: c_int, @"type": cufftType, batch: c_int, workSize: [*c]usize) cufftResult;
pub extern fn cufftCreate(handle: [*c]cufftHandle) cufftResult;
pub extern fn cufftGetSize1d(handle: cufftHandle, nx: c_int, @"type": cufftType, batch: c_int, workSize: [*c]usize) cufftResult;
pub extern fn cufftGetSize2d(handle: cufftHandle, nx: c_int, ny: c_int, @"type": cufftType, workSize: [*c]usize) cufftResult;
pub extern fn cufftGetSize3d(handle: cufftHandle, nx: c_int, ny: c_int, nz: c_int, @"type": cufftType, workSize: [*c]usize) cufftResult;
pub extern fn cufftGetSizeMany(handle: cufftHandle, rank: c_int, n: [*c]c_int, inembed: [*c]c_int, istride: c_int, idist: c_int, onembed: [*c]c_int, ostride: c_int, odist: c_int, @"type": cufftType, batch: c_int, workArea: [*c]usize) cufftResult;
pub extern fn cufftGetSize(handle: cufftHandle, workSize: [*c]usize) cufftResult;
pub extern fn cufftSetWorkArea(plan: cufftHandle, workArea: ?*anyopaque) cufftResult;
pub extern fn cufftSetAutoAllocation(plan: cufftHandle, autoAllocate: c_int) cufftResult;
pub extern fn cufftExecC2C(plan: cufftHandle, idata: [*c]cufftComplex, odata: [*c]cufftComplex, direction: c_int) cufftResult;
pub extern fn cufftExecR2C(plan: cufftHandle, idata: [*c]cufftReal, odata: [*c]cufftComplex) cufftResult;
pub extern fn cufftExecC2R(plan: cufftHandle, idata: [*c]cufftComplex, odata: [*c]cufftReal) cufftResult;
pub extern fn cufftExecZ2Z(plan: cufftHandle, idata: [*c]cufftDoubleComplex, odata: [*c]cufftDoubleComplex, direction: c_int) cufftResult;
pub extern fn cufftExecD2Z(plan: cufftHandle, idata: [*c]cufftDoubleReal, odata: [*c]cufftDoubleComplex) cufftResult;
pub extern fn cufftExecZ2D(plan: cufftHandle, idata: [*c]cufftDoubleComplex, odata: [*c]cufftDoubleReal) cufftResult;
pub extern fn cufftSetStream(plan: cufftHandle, stream: cudaStream_t) cufftResult;
pub extern fn cufftDestroy(plan: cufftHandle) cufftResult;
pub extern fn cufftGetVersion(version: [*c]c_int) cufftResult;
pub extern fn cufftGetProperty(@"type": libraryPropertyType, value: [*c]c_int) cufftResult;
pub const NVFFT_PLAN_PROPERTY_INT64_PATIENT_JIT: c_int = 1;
pub const NVFFT_PLAN_PROPERTY_INT64_MAX_NUM_HOST_THREADS: c_int = 2;
pub const enum_cufftProperty_t = c_uint;
pub const cufftProperty = enum_cufftProperty_t;
pub extern fn cufftSetPlanPropertyInt64(plan: cufftHandle, property: cufftProperty, inputValueInt: c_longlong) cufftResult;
pub extern fn cufftGetPlanPropertyInt64(plan: cufftHandle, property: cufftProperty, returnPtrValue: [*c]c_longlong) cufftResult;
pub extern fn cufftResetPlanProperty(plan: cufftHandle, property: cufftProperty) cufftResult;
pub const struct__iobuf = extern struct {
    _Placeholder: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const FILE = struct__iobuf;
pub const _off_t = c_long;
pub const off32_t = c_long;
pub const _off64_t = c_longlong;
pub const off64_t = c_longlong;
pub const off_t = off32_t;
pub extern fn __acrt_iob_func(index: c_uint) [*c]FILE;
pub extern fn __iob_func() [*c]FILE;
pub const fpos_t = c_longlong;
pub extern fn __mingw_sscanf(noalias _Src: [*c]const u8, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn __mingw_vsscanf(noalias _Str: [*c]const u8, noalias Format: [*c]const u8, argp: va_list) c_int;
pub extern fn __mingw_scanf(noalias _Format: [*c]const u8, ...) c_int;
pub extern fn __mingw_vscanf(noalias Format: [*c]const u8, argp: va_list) c_int;
pub extern fn __mingw_fscanf(noalias _File: [*c]FILE, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn __mingw_vfscanf(noalias fp: [*c]FILE, noalias Format: [*c]const u8, argp: va_list) c_int;
pub extern fn __mingw_vsnprintf(noalias _DstBuf: [*c]u8, _MaxCount: usize, noalias _Format: [*c]const u8, _ArgList: va_list) c_int;
pub extern fn __mingw_snprintf(noalias s: [*c]u8, n: usize, noalias format: [*c]const u8, ...) c_int;
pub extern fn __mingw_printf(noalias [*c]const u8, ...) c_int;
pub extern fn __mingw_vprintf(noalias [*c]const u8, va_list) c_int;
pub extern fn __mingw_fprintf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn __mingw_vfprintf(noalias [*c]FILE, noalias [*c]const u8, va_list) c_int;
pub extern fn __mingw_sprintf(noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn __mingw_vsprintf(noalias [*c]u8, noalias [*c]const u8, va_list) c_int;
pub extern fn __mingw_asprintf(noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn __mingw_vasprintf(noalias [*c][*c]u8, noalias [*c]const u8, va_list) c_int;
pub extern fn __ms_sscanf(noalias _Src: [*c]const u8, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn __ms_scanf(noalias _Format: [*c]const u8, ...) c_int;
pub extern fn __ms_fscanf(noalias _File: [*c]FILE, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn __ms_printf(noalias [*c]const u8, ...) c_int;
pub extern fn __ms_vprintf(noalias [*c]const u8, va_list) c_int;
pub extern fn __ms_fprintf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn __ms_vfprintf(noalias [*c]FILE, noalias [*c]const u8, va_list) c_int;
pub extern fn __ms_sprintf(noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn __ms_vsprintf(noalias [*c]u8, noalias [*c]const u8, va_list) c_int;
pub extern fn __stdio_common_vsprintf(options: c_ulonglong, str: [*c]u8, len: usize, format: [*c]const u8, locale: _locale_t, valist: va_list) c_int;
pub extern fn __stdio_common_vfprintf(options: c_ulonglong, file: [*c]FILE, format: [*c]const u8, locale: _locale_t, valist: va_list) c_int;
pub extern fn __stdio_common_vsscanf(options: c_ulonglong, input: [*c]const u8, length: usize, format: [*c]const u8, locale: _locale_t, valist: va_list) c_int;
pub extern fn __stdio_common_vfscanf(options: c_ulonglong, file: [*c]FILE, format: [*c]const u8, locale: _locale_t, valist: va_list) c_int;
pub extern fn fprintf(noalias _File: [*c]FILE, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn printf(_Format: [*c]const u8, ...) c_int;
pub extern fn sprintf(noalias _Dest: [*c]u8, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn vfprintf(noalias _File: [*c]FILE, noalias _Format: [*c]const u8, _ArgList: __builtin_va_list) c_int;
pub extern fn vprintf(noalias _Format: [*c]const u8, _ArgList: __builtin_va_list) c_int;
pub extern fn vsprintf(noalias _Dest: [*c]u8, noalias _Format: [*c]const u8, _Args: __builtin_va_list) c_int;
pub extern fn fscanf(noalias _File: [*c]FILE, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn scanf(noalias _Format: [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias _Src: [*c]const u8, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn vfscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, __local_argv: __builtin_va_list) c_int;
pub extern fn vsscanf(noalias __source: [*c]const u8, noalias __format: [*c]const u8, __local_argv: __builtin_va_list) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __local_argv: __builtin_va_list) c_int;
pub extern fn _filbuf(_File: [*c]FILE) c_int;
pub extern fn _flsbuf(_Ch: c_int, _File: [*c]FILE) c_int;
pub extern fn _fsopen(_Filename: [*c]const u8, _Mode: [*c]const u8, _ShFlag: c_int) [*c]FILE;
pub extern fn clearerr(_File: [*c]FILE) void;
pub extern fn fclose(_File: [*c]FILE) c_int;
pub extern fn _fcloseall() c_int;
pub extern fn _fdopen(_FileHandle: c_int, _Mode: [*c]const u8) [*c]FILE;
pub extern fn feof(_File: [*c]FILE) c_int;
pub extern fn ferror(_File: [*c]FILE) c_int;
pub extern fn fflush(_File: [*c]FILE) c_int;
pub extern fn fgetc(_File: [*c]FILE) c_int;
pub extern fn _fgetchar() c_int;
pub extern fn fgetpos(noalias _File: [*c]FILE, noalias _Pos: [*c]fpos_t) c_int;
pub extern fn fgetpos64(noalias _File: [*c]FILE, noalias _Pos: [*c]fpos_t) c_int;
pub extern fn fgets(noalias _Buf: [*c]u8, _MaxCount: c_int, noalias _File: [*c]FILE) [*c]u8;
pub extern fn _fileno(_File: [*c]FILE) c_int;
pub extern fn _tempnam(_DirName: [*c]const u8, _FilePrefix: [*c]const u8) [*c]u8;
pub extern fn _flushall() c_int;
pub extern fn fopen(_Filename: [*c]const u8, _Mode: [*c]const u8) [*c]FILE;
pub extern fn fopen64(noalias filename: [*c]const u8, noalias mode: [*c]const u8) [*c]FILE;
pub extern fn fputc(_Ch: c_int, _File: [*c]FILE) c_int;
pub extern fn _fputchar(_Ch: c_int) c_int;
pub extern fn fputs(noalias _Str: [*c]const u8, noalias _File: [*c]FILE) c_int;
pub extern fn fread(_DstBuf: ?*anyopaque, _ElementSize: c_ulonglong, _Count: c_ulonglong, _File: [*c]FILE) c_ulonglong;
pub extern fn freopen(noalias _Filename: [*c]const u8, noalias _Mode: [*c]const u8, noalias _File: [*c]FILE) [*c]FILE;
pub extern fn fsetpos(_File: [*c]FILE, _Pos: [*c]const fpos_t) c_int;
pub extern fn fsetpos64(_File: [*c]FILE, _Pos: [*c]const fpos_t) c_int;
pub extern fn fseek(_File: [*c]FILE, _Offset: c_long, _Origin: c_int) c_int;
pub extern fn ftell(_File: [*c]FILE) c_long;
pub extern fn _fseeki64(_File: [*c]FILE, _Offset: c_longlong, _Origin: c_int) c_int;
pub extern fn _ftelli64(_File: [*c]FILE) c_longlong;
pub fn fseeko(arg__File: [*c]FILE, arg__Offset: _off_t, arg__Origin: c_int) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Offset = arg__Offset;
    _ = &_Offset;
    var _Origin = arg__Origin;
    _ = &_Origin;
    return fseek(_File, _Offset, _Origin);
}
pub fn fseeko64(arg__File: [*c]FILE, arg__Offset: _off64_t, arg__Origin: c_int) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Offset = arg__Offset;
    _ = &_Offset;
    var _Origin = arg__Origin;
    _ = &_Origin;
    return _fseeki64(_File, _Offset, _Origin);
}
pub fn ftello(arg__File: [*c]FILE) callconv(.c) _off_t {
    var _File = arg__File;
    _ = &_File;
    return ftell(_File);
}
pub fn ftello64(arg__File: [*c]FILE) callconv(.c) _off64_t {
    var _File = arg__File;
    _ = &_File;
    return _ftelli64(_File);
}
pub extern fn fwrite(_Str: ?*const anyopaque, _Size: c_ulonglong, _Count: c_ulonglong, _File: [*c]FILE) c_ulonglong;
pub extern fn getc(_File: [*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn _getmaxstdio() c_int;
pub extern fn gets(_Buffer: [*c]u8) [*c]u8;
pub extern fn _getw(_File: [*c]FILE) c_int;
pub extern fn _pclose(_File: [*c]FILE) c_int;
pub extern fn _popen(_Command: [*c]const u8, _Mode: [*c]const u8) [*c]FILE;
pub extern fn putc(_Ch: c_int, _File: [*c]FILE) c_int;
pub extern fn putchar(_Ch: c_int) c_int;
pub extern fn puts(_Str: [*c]const u8) c_int;
pub extern fn _putw(_Word: c_int, _File: [*c]FILE) c_int;
pub extern fn remove(_Filename: [*c]const u8) c_int;
pub extern fn rename(_OldFilename: [*c]const u8, _NewFilename: [*c]const u8) c_int;
pub extern fn _unlink(_Filename: [*c]const u8) c_int;
pub extern fn unlink(_Filename: [*c]const u8) c_int;
pub extern fn rewind(_File: [*c]FILE) void;
pub extern fn _rmtmp() c_int;
pub extern fn setbuf(noalias _File: [*c]FILE, noalias _Buffer: [*c]u8) void;
pub extern fn _setmaxstdio(_Max: c_int) c_int;
pub extern fn _set_output_format(_Format: c_uint) c_uint;
pub extern fn _get_output_format() c_uint;
pub extern fn setvbuf(noalias _File: [*c]FILE, noalias _Buf: [*c]u8, _Mode: c_int, _Size: usize) c_int;
pub extern fn _scprintf(noalias _Format: [*c]const u8, ...) c_int;
pub extern fn _snscanf(noalias _Src: [*c]const u8, _MaxCount: usize, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn _vscprintf(noalias _Format: [*c]const u8, _ArgList: va_list) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam(_Buffer: [*c]u8) [*c]u8;
pub extern fn ungetc(_Ch: c_int, _File: [*c]FILE) c_int;
pub extern fn _vsnprintf(noalias _Dest: [*c]u8, _Count: usize, noalias _Format: [*c]const u8, _Args: va_list) c_int;
pub extern fn _snprintf(noalias _Dest: [*c]u8, _Count: usize, noalias _Format: [*c]const u8, ...) c_int;
pub extern fn vsnprintf(noalias __stream: [*c]u8, __n: c_ulonglong, noalias __format: [*c]const u8, __local_argv: __builtin_va_list) c_int;
pub extern fn snprintf(noalias __stream: [*c]u8, __n: c_ulonglong, noalias __format: [*c]const u8, ...) c_int;
pub extern fn _set_printf_count_output(_Value: c_int) c_int;
pub extern fn _get_printf_count_output() c_int;
pub extern fn __mingw_swscanf(noalias _Src: [*c]const wchar_t, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __mingw_vswscanf(noalias _Str: [*c]const wchar_t, noalias Format: [*c]const wchar_t, argp: va_list) c_int;
pub extern fn __mingw_wscanf(noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __mingw_vwscanf(noalias Format: [*c]const wchar_t, argp: va_list) c_int;
pub extern fn __mingw_fwscanf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __mingw_vfwscanf(noalias fp: [*c]FILE, noalias Format: [*c]const wchar_t, argp: va_list) c_int;
pub extern fn __mingw_fwprintf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __mingw_wprintf(noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __mingw_vfwprintf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, _ArgList: va_list) c_int;
pub extern fn __mingw_vwprintf(noalias _Format: [*c]const wchar_t, _ArgList: va_list) c_int;
pub extern fn __mingw_snwprintf(noalias s: [*c]wchar_t, n: usize, noalias format: [*c]const wchar_t, ...) c_int;
pub extern fn __mingw_vsnwprintf(noalias [*c]wchar_t, usize, noalias [*c]const wchar_t, va_list) c_int;
pub extern fn __mingw_swprintf(noalias [*c]wchar_t, noalias [*c]const wchar_t, ...) c_int;
pub extern fn __mingw_vswprintf(noalias [*c]wchar_t, noalias [*c]const wchar_t, va_list) c_int;
pub extern fn __ms_swscanf(noalias _Src: [*c]const wchar_t, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __ms_wscanf(noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __ms_fwscanf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __ms_fwprintf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __ms_wprintf(noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn __ms_vfwprintf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, _ArgList: va_list) c_int;
pub extern fn __ms_vwprintf(noalias _Format: [*c]const wchar_t, _ArgList: va_list) c_int;
pub extern fn __ms_swprintf(noalias [*c]wchar_t, noalias [*c]const wchar_t, ...) c_int;
pub extern fn __ms_vswprintf(noalias [*c]wchar_t, noalias [*c]const wchar_t, va_list) c_int;
pub extern fn __stdio_common_vswprintf(options: c_ulonglong, str: [*c]wchar_t, len: usize, format: [*c]const wchar_t, locale: _locale_t, valist: va_list) c_int;
pub extern fn __stdio_common_vfwprintf(options: c_ulonglong, file: [*c]FILE, format: [*c]const wchar_t, locale: _locale_t, valist: va_list) c_int;
pub extern fn __stdio_common_vswscanf(options: c_ulonglong, input: [*c]const wchar_t, length: usize, format: [*c]const wchar_t, locale: _locale_t, valist: va_list) c_int;
pub extern fn __stdio_common_vfwscanf(options: c_ulonglong, file: [*c]FILE, format: [*c]const wchar_t, locale: _locale_t, valist: va_list) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:1032:15: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn fwscanf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:1042:15: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn swscanf(noalias _Src: [*c]const wchar_t, noalias _Format: [*c]const wchar_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:1052:15: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn wscanf(noalias _Format: [*c]const wchar_t, ...) c_int;
pub fn vfwscanf(arg___stream: [*c]FILE, arg___format: [*c]const wchar_t, arg___local_argv: va_list) callconv(.c) c_int {
    var __stream = arg___stream;
    _ = &__stream;
    var __format = arg___format;
    _ = &__format;
    var __local_argv = arg___local_argv;
    _ = &__local_argv;
    return __stdio_common_vfwscanf(@as(c_ulonglong, 2), __stream, __format, null, __local_argv);
}
pub fn vswscanf(noalias arg___source: [*c]const wchar_t, noalias arg___format: [*c]const wchar_t, arg___local_argv: va_list) callconv(.c) c_int {
    var __source = arg___source;
    _ = &__source;
    var __format = arg___format;
    _ = &__format;
    var __local_argv = arg___local_argv;
    _ = &__local_argv;
    return __stdio_common_vswscanf(@as(c_ulonglong, 2), __source, @as(usize, @bitCast(@as(c_longlong, -@as(c_int, 1)))), __format, null, __local_argv);
}
pub fn vwscanf(arg___format: [*c]const wchar_t, arg___local_argv: va_list) callconv(.c) c_int {
    var __format = arg___format;
    _ = &__format;
    var __local_argv = arg___local_argv;
    _ = &__local_argv;
    return __stdio_common_vfwscanf(@as(c_ulonglong, 2), __acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 0)))), __format, null, __local_argv);
}
pub extern fn fwprintf(noalias _File: [*c]FILE, noalias _Format: [*c]const wchar_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:1083:15: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn wprintf(noalias _Format: [*c]const wchar_t, ...) c_int;
pub fn vfwprintf(noalias arg__File: [*c]FILE, noalias arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfwprintf(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _File, _Format, null, _ArgList);
}
pub fn vwprintf(noalias arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfwprintf(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), __acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, null, _ArgList);
}
pub extern fn _wfsopen(_Filename: [*c]const wchar_t, _Mode: [*c]const wchar_t, _ShFlag: c_int) [*c]FILE;
pub extern fn fgetwc(_File: [*c]FILE) wint_t;
pub extern fn _fgetwchar() wint_t;
pub extern fn fputwc(_Ch: wchar_t, _File: [*c]FILE) wint_t;
pub extern fn _fputwchar(_Ch: wchar_t) wint_t;
pub extern fn getwc(_File: [*c]FILE) wint_t;
pub extern fn getwchar() wint_t;
pub extern fn putwc(_Ch: wchar_t, _File: [*c]FILE) wint_t;
pub extern fn putwchar(_Ch: wchar_t) wint_t;
pub extern fn ungetwc(_Ch: wint_t, _File: [*c]FILE) wint_t;
pub extern fn fgetws(noalias _Dst: [*c]wchar_t, _SizeInWords: c_int, noalias _File: [*c]FILE) [*c]wchar_t;
pub extern fn fputws(noalias _Str: [*c]const wchar_t, noalias _File: [*c]FILE) c_int;
pub extern fn _getws(_String: [*c]wchar_t) [*c]wchar_t;
pub extern fn _putws(_Str: [*c]const wchar_t) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:1159:15: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _scwprintf(noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn _snwprintf(noalias _Dest: [*c]wchar_t, _Count: usize, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn _vsnwprintf(noalias _Dest: [*c]wchar_t, _Count: usize, noalias _Format: [*c]const wchar_t, _Args: va_list) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:1173:7: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn snwprintf(noalias s: [*c]wchar_t, n: usize, noalias format: [*c]const wchar_t, ...) c_int;
pub fn vsnwprintf(noalias arg_s: [*c]wchar_t, arg_n: usize, noalias arg_format: [*c]const wchar_t, arg_arg: va_list) callconv(.c) c_int {
    var s = arg_s;
    _ = &s;
    var n = arg_n;
    _ = &n;
    var format = arg_format;
    _ = &format;
    var arg = arg_arg;
    _ = &arg;
    var __ret: c_int = __stdio_common_vswprintf(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), s, n, format, null, arg);
    _ = &__ret;
    return if (__ret < @as(c_int, 0)) -@as(c_int, 1) else __ret;
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:1191:15: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _swprintf(noalias _Dest: [*c]wchar_t, noalias _Format: [*c]const wchar_t, ...) c_int;
pub fn _vswprintf(noalias arg__Dest: [*c]wchar_t, noalias arg__Format: [*c]const wchar_t, arg__Args: va_list) callconv(.c) c_int {
    var _Dest = arg__Dest;
    _ = &_Dest;
    var _Format = arg__Format;
    _ = &_Format;
    var _Args = arg__Args;
    _ = &_Args;
    return __stdio_common_vswprintf(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _Dest, @as(usize, @bitCast(@as(c_longlong, -@as(c_int, 1)))), _Format, null, _Args);
}
pub fn _vscwprintf(noalias arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    var _Result: c_int = __stdio_common_vswprintf((@as(c_ulonglong, 4) | @as(c_ulonglong, 32)) | @as(c_ulonglong, 2), null, @as(usize, @bitCast(@as(c_longlong, @as(c_int, 0)))), _Format, null, _ArgList);
    _ = &_Result;
    return if (_Result < @as(c_int, 0)) -@as(c_int, 1) else _Result;
}
pub fn vswprintf(arg___stream: [*c]wchar_t, arg___count: usize, arg___format: [*c]const wchar_t, arg___local_argv: __builtin_va_list) callconv(.c) c_int {
    var __stream = arg___stream;
    _ = &__stream;
    var __count = arg___count;
    _ = &__count;
    var __format = arg___format;
    _ = &__format;
    var __local_argv = arg___local_argv;
    _ = &__local_argv;
    return vsnwprintf(__stream, __count, __format, __local_argv);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/swprintf.inl:21:5: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn swprintf(__stream: [*c]wchar_t, __count: usize, __format: [*c]const wchar_t, ...) c_int;
pub extern fn _wtempnam(_Directory: [*c]const wchar_t, _FilePrefix: [*c]const wchar_t) [*c]wchar_t;
pub extern fn _snwscanf(noalias _Src: [*c]const wchar_t, _MaxCount: usize, noalias _Format: [*c]const wchar_t, ...) c_int;
pub extern fn _wfdopen(_FileHandle: c_int, _Mode: [*c]const wchar_t) [*c]FILE;
pub extern fn _wfopen(noalias _Filename: [*c]const wchar_t, noalias _Mode: [*c]const wchar_t) [*c]FILE;
pub extern fn _wfreopen(noalias _Filename: [*c]const wchar_t, noalias _Mode: [*c]const wchar_t, noalias _OldFile: [*c]FILE) [*c]FILE;
pub extern fn _wpopen(_Command: [*c]const wchar_t, _Mode: [*c]const wchar_t) [*c]FILE;
pub extern fn _wremove(_Filename: [*c]const wchar_t) c_int;
pub extern fn _wtmpnam(_Buffer: [*c]wchar_t) [*c]wchar_t;
pub extern fn _fgetwc_nolock(_File: [*c]FILE) wint_t;
pub extern fn _fputwc_nolock(_Ch: wchar_t, _File: [*c]FILE) wint_t;
pub extern fn _ungetwc_nolock(_Ch: wint_t, _File: [*c]FILE) wint_t;
pub extern fn _fgetc_nolock(_File: [*c]FILE) c_int;
pub extern fn _fputc_nolock(_Char: c_int, _File: [*c]FILE) c_int;
pub extern fn _getc_nolock(_File: [*c]FILE) c_int;
pub extern fn _putc_nolock(_Char: c_int, _File: [*c]FILE) c_int;
pub extern fn _lock_file(_File: [*c]FILE) void;
pub extern fn _unlock_file(_File: [*c]FILE) void;
pub extern fn _fclose_nolock(_File: [*c]FILE) c_int;
pub extern fn _fflush_nolock(_File: [*c]FILE) c_int;
pub extern fn _fread_nolock(noalias _DstBuf: ?*anyopaque, _ElementSize: usize, _Count: usize, noalias _File: [*c]FILE) usize;
pub extern fn _fseek_nolock(_File: [*c]FILE, _Offset: c_long, _Origin: c_int) c_int;
pub extern fn _ftell_nolock(_File: [*c]FILE) c_long;
pub extern fn _fseeki64_nolock(_File: [*c]FILE, _Offset: c_longlong, _Origin: c_int) c_int;
pub extern fn _ftelli64_nolock(_File: [*c]FILE) c_longlong;
pub extern fn _fwrite_nolock(noalias _DstBuf: ?*const anyopaque, _Size: usize, _Count: usize, noalias _File: [*c]FILE) usize;
pub extern fn _ungetc_nolock(_Ch: c_int, _File: [*c]FILE) c_int;
pub extern fn tempnam(_Directory: [*c]const u8, _FilePrefix: [*c]const u8) [*c]u8;
pub extern fn fcloseall() c_int;
pub extern fn fdopen(_FileHandle: c_int, _Format: [*c]const u8) [*c]FILE;
pub extern fn fgetchar() c_int;
pub extern fn fileno(_File: [*c]FILE) c_int;
pub extern fn flushall() c_int;
pub extern fn fputchar(_Ch: c_int) c_int;
pub extern fn getw(_File: [*c]FILE) c_int;
pub extern fn putw(_Ch: c_int, _File: [*c]FILE) c_int;
pub extern fn rmtmp() c_int;
pub extern fn __mingw_str_wide_utf8(wptr: [*c]const wchar_t, mbptr: [*c][*c]u8, buflen: [*c]usize) c_int;
pub extern fn __mingw_str_utf8_wide(mbptr: [*c]const u8, wptr: [*c][*c]wchar_t, buflen: [*c]usize) c_int;
pub extern fn __mingw_str_free(ptr: ?*anyopaque) void;
pub extern fn _wspawnl(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const wchar_t, ...) isize;
pub extern fn _wspawnle(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const wchar_t, ...) isize;
pub extern fn _wspawnlp(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const wchar_t, ...) isize;
pub extern fn _wspawnlpe(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const wchar_t, ...) isize;
pub extern fn _wspawnv(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const [*c]const wchar_t) isize;
pub extern fn _wspawnve(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const [*c]const wchar_t, _Env: [*c]const [*c]const wchar_t) isize;
pub extern fn _wspawnvp(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const [*c]const wchar_t) isize;
pub extern fn _wspawnvpe(_Mode: c_int, _Filename: [*c]const wchar_t, _ArgList: [*c]const [*c]const wchar_t, _Env: [*c]const [*c]const wchar_t) isize;
pub extern fn _spawnv(_Mode: c_int, _Filename: [*c]const u8, _ArgList: [*c]const [*c]const u8) isize;
pub extern fn _spawnve(_Mode: c_int, _Filename: [*c]const u8, _ArgList: [*c]const [*c]const u8, _Env: [*c]const [*c]const u8) isize;
pub extern fn _spawnvp(_Mode: c_int, _Filename: [*c]const u8, _ArgList: [*c]const [*c]const u8) isize;
pub extern fn _spawnvpe(_Mode: c_int, _Filename: [*c]const u8, _ArgList: [*c]const [*c]const u8, _Env: [*c]const [*c]const u8) isize;
pub extern fn clearerr_s(_File: [*c]FILE) errno_t;
pub extern fn fread_s(_DstBuf: ?*anyopaque, _DstSize: usize, _ElementSize: usize, _Count: usize, _File: [*c]FILE) usize;
pub extern fn __stdio_common_vsprintf_s(_Options: c_ulonglong, _Str: [*c]u8, _Len: usize, _Format: [*c]const u8, _Locale: _locale_t, _ArgList: va_list) c_int;
pub extern fn __stdio_common_vsprintf_p(_Options: c_ulonglong, _Str: [*c]u8, _Len: usize, _Format: [*c]const u8, _Locale: _locale_t, _ArgList: va_list) c_int;
pub extern fn __stdio_common_vsnprintf_s(_Options: c_ulonglong, _Str: [*c]u8, _Len: usize, _MaxCount: usize, _Format: [*c]const u8, _Locale: _locale_t, _ArgList: va_list) c_int;
pub extern fn __stdio_common_vfprintf_s(_Options: c_ulonglong, _File: [*c]FILE, _Format: [*c]const u8, _Locale: _locale_t, _ArgList: va_list) c_int;
pub extern fn __stdio_common_vfprintf_p(_Options: c_ulonglong, _File: [*c]FILE, _Format: [*c]const u8, _Locale: _locale_t, _ArgList: va_list) c_int;
pub fn _vfscanf_s_l(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfscanf(@as(c_ulonglong, 1), _File, _Format, _Locale, _ArgList);
}
pub fn vfscanf_s(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfscanf_s_l(_File, _Format, null, _ArgList);
}
pub fn _vscanf_s_l(arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfscanf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 0)))), _Format, _Locale, _ArgList);
}
pub fn vscanf_s(arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfscanf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 0)))), _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:60:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fscanf_s_l(_File: [*c]FILE, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:70:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn fscanf_s(_File: [*c]FILE, _Format: [*c]const u8, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:80:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _scanf_s_l(_Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:90:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn scanf_s(_Format: [*c]const u8, ...) c_int;
pub fn _vfscanf_l(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfscanf(@as(c_ulonglong, @bitCast(@as(c_longlong, @as(c_int, 0)))), _File, _Format, _Locale, _ArgList);
}
pub fn _vscanf_l(arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfscanf_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 0)))), _Format, _Locale, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:110:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fscanf_l(_File: [*c]FILE, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:119:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _scanf_l(_Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
pub fn _vsscanf_s_l(arg__Src: [*c]const u8, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Src = arg__Src;
    _ = &_Src;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsscanf(@as(c_ulonglong, 1), _Src, @as(usize, @bitCast(@as(c_longlong, -@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
pub fn vsscanf_s(arg__Src: [*c]const u8, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _Src = arg__Src;
    _ = &_Src;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsscanf_s_l(_Src, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:137:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _sscanf_s_l(_Src: [*c]const u8, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:146:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn sscanf_s(_Src: [*c]const u8, _Format: [*c]const u8, ...) c_int;
pub fn _vsscanf_l(arg__Src: [*c]const u8, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Src = arg__Src;
    _ = &_Src;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsscanf(@as(c_ulonglong, @bitCast(@as(c_longlong, @as(c_int, 0)))), _Src, @as(usize, @bitCast(@as(c_longlong, -@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:160:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _sscanf_l(_Src: [*c]const u8, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:171:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snscanf_s_l(_Src: [*c]const u8, _MaxCount: usize, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:180:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snscanf_s(_Src: [*c]const u8, _MaxCount: usize, _Format: [*c]const u8, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:191:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snscanf_l(_Src: [*c]const u8, _MaxCount: usize, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
pub fn _vfprintf_s_l(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfprintf_s(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _File, _Format, _Locale, _ArgList);
}
pub fn vfprintf_s(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfprintf_s_l(_File, _Format, null, _ArgList);
}
pub fn _vprintf_s_l(arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfprintf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
pub fn vprintf_s(arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfprintf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:218:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fprintf_s_l(_File: [*c]FILE, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:227:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _printf_s_l(_Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:236:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn fprintf_s(_File: [*c]FILE, _Format: [*c]const u8, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:245:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn printf_s(_Format: [*c]const u8, ...) c_int;
pub fn _vsnprintf_c_l(arg__DstBuf: [*c]u8, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsprintf(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _DstBuf, _MaxCount, _Format, _Locale, _ArgList);
}
pub fn _vsnprintf_c(arg__DstBuf: [*c]u8, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsnprintf_c_l(_DstBuf, _MaxCount, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:263:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snprintf_c_l(_DstBuf: [*c]u8, _MaxCount: usize, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:272:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snprintf_c(_DstBuf: [*c]u8, _MaxCount: usize, _Format: [*c]const u8, ...) c_int;
pub fn _vsnprintf_s_l(arg__DstBuf: [*c]u8, arg__DstSize: usize, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsnprintf_s(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _DstBuf, _DstSize, _MaxCount, _Format, _Locale, _ArgList);
}
pub fn vsnprintf_s(arg__DstBuf: [*c]u8, arg__DstSize: usize, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsnprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, null, _ArgList);
}
pub fn _vsnprintf_s(arg__DstBuf: [*c]u8, arg__DstSize: usize, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsnprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:294:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snprintf_s_l(_DstBuf: [*c]u8, _DstSize: usize, _MaxCount: usize, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:303:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snprintf_s(_DstBuf: [*c]u8, _DstSize: usize, _MaxCount: usize, _Format: [*c]const u8, ...) c_int;
pub fn _vsprintf_s_l(arg__DstBuf: [*c]u8, arg__DstSize: usize, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsprintf_s(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _DstBuf, _DstSize, _Format, _Locale, _ArgList);
}
pub fn vsprintf_s(arg__DstBuf: [*c]u8, arg__Size: usize, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _Size = arg__Size;
    _ = &_Size;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsprintf_s_l(_DstBuf, _Size, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:321:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _sprintf_s_l(_DstBuf: [*c]u8, _DstSize: usize, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:330:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn sprintf_s(_DstBuf: [*c]u8, _DstSize: usize, _Format: [*c]const u8, ...) c_int;
pub fn _vfprintf_p_l(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfprintf_p(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _File, _Format, _Locale, _ArgList);
}
pub fn _vfprintf_p(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfprintf_p_l(_File, _Format, null, _ArgList);
}
pub fn _vprintf_p_l(arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfprintf_p_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
pub fn _vprintf_p(arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfprintf_p_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:356:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fprintf_p_l(_File: [*c]FILE, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:365:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fprintf_p(_File: [*c]FILE, _Format: [*c]const u8, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:374:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _printf_p_l(_Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:383:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _printf_p(_Format: [*c]const u8, ...) c_int;
pub fn _vsprintf_p_l(arg__DstBuf: [*c]u8, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsprintf_p(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _DstBuf, _MaxCount, _Format, _Locale, _ArgList);
}
pub fn _vsprintf_p(arg__Dst: [*c]u8, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _Dst = arg__Dst;
    _ = &_Dst;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsprintf_p_l(_Dst, _MaxCount, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:401:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _sprintf_p_l(_DstBuf: [*c]u8, _MaxCount: usize, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:410:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _sprintf_p(_Dst: [*c]u8, _MaxCount: usize, _Format: [*c]const u8, ...) c_int;
pub fn _vscprintf_p_l(arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsprintf_p(@as(c_ulonglong, 2), null, @as(usize, @bitCast(@as(c_longlong, @as(c_int, 0)))), _Format, _Locale, _ArgList);
}
pub fn _vscprintf_p(arg__Format: [*c]const u8, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vscprintf_p_l(_Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:428:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _scprintf_p_l(_Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:437:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _scprintf_p(_Format: [*c]const u8, ...) c_int;
pub fn _vfprintf_l(arg__File: [*c]FILE, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfprintf(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _File, _Format, _Locale, _ArgList);
}
pub fn _vprintf_l(arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfprintf_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:455:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fprintf_l(_File: [*c]FILE, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:464:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _printf_l(_Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
pub fn _vsnprintf_l(arg__DstBuf: [*c]u8, arg__MaxCount: usize, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsprintf(@as(c_ulonglong, 1), _DstBuf, _MaxCount, _Format, _Locale, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:478:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snprintf_l(_DstBuf: [*c]u8, _MaxCount: usize, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
pub fn _vsprintf_l(arg__DstBuf: [*c]u8, arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsnprintf_l(_DstBuf, @as(usize, @bitCast(@as(c_longlong, -@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:491:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _sprintf_l(_DstBuf: [*c]u8, _Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
pub fn _vscprintf_l(arg__Format: [*c]const u8, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsprintf(@as(c_ulonglong, 2), null, @as(usize, @bitCast(@as(c_longlong, @as(c_int, 0)))), _Format, _Locale, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:505:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _scprintf_l(_Format: [*c]const u8, _Locale: _locale_t, ...) c_int;
pub extern fn fopen_s(_File: [*c][*c]FILE, _Filename: [*c]const u8, _Mode: [*c]const u8) errno_t;
pub extern fn freopen_s(_File: [*c][*c]FILE, _Filename: [*c]const u8, _Mode: [*c]const u8, _Stream: [*c]FILE) errno_t;
pub extern fn gets_s([*c]u8, rsize_t) [*c]u8;
pub extern fn tmpfile_s(_File: [*c][*c]FILE) errno_t;
pub extern fn tmpnam_s([*c]u8, rsize_t) errno_t;
pub extern fn _getws_s(_Str: [*c]wchar_t, _SizeInWords: usize) [*c]wchar_t;
pub extern fn __stdio_common_vswprintf_s(_Options: c_ulonglong, _Str: [*c]wchar_t, _Len: usize, _Format: [*c]const wchar_t, _Locale: _locale_t, _ArgList: va_list) c_int;
pub extern fn __stdio_common_vsnwprintf_s(_Options: c_ulonglong, _Str: [*c]wchar_t, _Len: usize, _MaxCount: usize, _Format: [*c]const wchar_t, _Locale: _locale_t, _ArgList: va_list) c_int;
pub extern fn __stdio_common_vfwprintf_s(_Options: c_ulonglong, _File: [*c]FILE, _Format: [*c]const wchar_t, _Locale: _locale_t, _ArgList: va_list) c_int;
pub fn _vfwscanf_s_l(arg__File: [*c]FILE, arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfwscanf(@as(c_ulonglong, 2) | @as(c_ulonglong, 1), _File, _Format, _Locale, _ArgList);
}
pub fn vfwscanf_s(arg__File: [*c]FILE, arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfwscanf_s_l(_File, _Format, null, _ArgList);
}
pub fn _vwscanf_s_l(arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfwscanf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 0)))), _Format, _Locale, _ArgList);
}
pub fn vwscanf_s(arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfwscanf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 0)))), _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:631:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fwscanf_s_l(_File: [*c]FILE, _Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:641:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn fwscanf_s(_File: [*c]FILE, _Format: [*c]const wchar_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:651:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _wscanf_s_l(_Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:661:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn wscanf_s(_Format: [*c]const wchar_t, ...) c_int;
pub fn _vswscanf_s_l(arg__Src: [*c]const wchar_t, arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Src = arg__Src;
    _ = &_Src;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vswscanf(@as(c_ulonglong, 2) | @as(c_ulonglong, 1), _Src, @as(usize, @bitCast(@as(c_longlong, -@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
pub fn vswscanf_s(arg__Src: [*c]const wchar_t, arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Src = arg__Src;
    _ = &_Src;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vswscanf_s_l(_Src, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:681:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _swscanf_s_l(_Src: [*c]const wchar_t, _Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:690:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn swscanf_s(_Src: [*c]const wchar_t, _Format: [*c]const wchar_t, ...) c_int;
pub fn _vsnwscanf_s_l(arg__Src: [*c]const wchar_t, arg__MaxCount: usize, arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Src = arg__Src;
    _ = &_Src;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vswscanf(@as(c_ulonglong, 2) | @as(c_ulonglong, 1), _Src, _MaxCount, _Format, _Locale, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:704:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snwscanf_s_l(_Src: [*c]const wchar_t, _MaxCount: usize, _Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:713:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snwscanf_s(_Src: [*c]const wchar_t, _MaxCount: usize, _Format: [*c]const wchar_t, ...) c_int;
pub fn _vfwprintf_s_l(arg__File: [*c]FILE, arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vfwprintf_s(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _File, _Format, _Locale, _ArgList);
}
pub fn _vwprintf_s_l(arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfwprintf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, _Locale, _ArgList);
}
pub fn vfwprintf_s(arg__File: [*c]FILE, arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _File = arg__File;
    _ = &_File;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfwprintf_s_l(_File, _Format, null, _ArgList);
}
pub fn vwprintf_s(arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vfwprintf_s_l(__acrt_iob_func(@as(c_uint, @bitCast(@as(c_int, 1)))), _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:739:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _fwprintf_s_l(_File: [*c]FILE, _Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:748:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _wprintf_s_l(_Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:757:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn fwprintf_s(_File: [*c]FILE, _Format: [*c]const wchar_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:766:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn wprintf_s(_Format: [*c]const wchar_t, ...) c_int;
pub fn _vswprintf_s_l(arg__DstBuf: [*c]wchar_t, arg__DstSize: usize, arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vswprintf_s(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _DstBuf, _DstSize, _Format, _Locale, _ArgList);
}
pub fn vswprintf_s(arg__DstBuf: [*c]wchar_t, arg__DstSize: usize, arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vswprintf_s_l(_DstBuf, _DstSize, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:784:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _swprintf_s_l(_DstBuf: [*c]wchar_t, _DstSize: usize, _Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:793:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn swprintf_s(_DstBuf: [*c]wchar_t, _DstSize: usize, _Format: [*c]const wchar_t, ...) c_int;
pub fn _vsnwprintf_s_l(arg__DstBuf: [*c]wchar_t, arg__DstSize: usize, arg__MaxCount: usize, arg__Format: [*c]const wchar_t, arg__Locale: _locale_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _Locale = arg__Locale;
    _ = &_Locale;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return __stdio_common_vsnwprintf_s(@as(c_ulonglong, 4) | @as(c_ulonglong, 32), _DstBuf, _DstSize, _MaxCount, _Format, _Locale, _ArgList);
}
pub fn _vsnwprintf_s(arg__DstBuf: [*c]wchar_t, arg__DstSize: usize, arg__MaxCount: usize, arg__Format: [*c]const wchar_t, arg__ArgList: va_list) callconv(.c) c_int {
    var _DstBuf = arg__DstBuf;
    _ = &_DstBuf;
    var _DstSize = arg__DstSize;
    _ = &_DstSize;
    var _MaxCount = arg__MaxCount;
    _ = &_MaxCount;
    var _Format = arg__Format;
    _ = &_Format;
    var _ArgList = arg__ArgList;
    _ = &_ArgList;
    return _vsnwprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, null, _ArgList);
}
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:811:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snwprintf_s_l(_DstBuf: [*c]wchar_t, _DstSize: usize, _MaxCount: usize, _Format: [*c]const wchar_t, _Locale: _locale_t, ...) c_int;
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/sec_api/stdio_s.h:820:27: warning: TODO unable to translate variadic function, demoted to extern
pub extern fn _snwprintf_s(_DstBuf: [*c]wchar_t, _DstSize: usize, _MaxCount: usize, _Format: [*c]const wchar_t, ...) c_int;
pub extern fn _wfopen_s(_File: [*c][*c]FILE, _Filename: [*c]const wchar_t, _Mode: [*c]const wchar_t) errno_t;
pub extern fn _wfreopen_s(_File: [*c][*c]FILE, _Filename: [*c]const wchar_t, _Mode: [*c]const wchar_t, _OldFile: [*c]FILE) errno_t;
pub extern fn _wtmpnam_s(_DstBuf: [*c]wchar_t, _SizeInWords: usize) errno_t;
pub extern fn _fread_nolock_s(_DstBuf: ?*anyopaque, _DstSize: usize, _ElementSize: usize, _Count: usize, _File: [*c]FILE) usize;
pub const struct_cusparseContext = opaque {};
pub const cusparseHandle_t = ?*struct_cusparseContext;
pub const struct_cusparseMatDescr = opaque {};
pub const cusparseMatDescr_t = ?*struct_cusparseMatDescr;
pub const struct_bsrsv2Info = opaque {};
pub const bsrsv2Info_t = ?*struct_bsrsv2Info;
pub const struct_bsrsm2Info = opaque {};
pub const bsrsm2Info_t = ?*struct_bsrsm2Info;
pub const struct_csric02Info = opaque {};
pub const csric02Info_t = ?*struct_csric02Info;
pub const struct_bsric02Info = opaque {};
pub const bsric02Info_t = ?*struct_bsric02Info;
pub const struct_csrilu02Info = opaque {};
pub const csrilu02Info_t = ?*struct_csrilu02Info;
pub const struct_bsrilu02Info = opaque {};
pub const bsrilu02Info_t = ?*struct_bsrilu02Info;
pub const struct_csru2csrInfo = opaque {};
pub const csru2csrInfo_t = ?*struct_csru2csrInfo;
pub const struct_cusparseColorInfo = opaque {};
pub const cusparseColorInfo_t = ?*struct_cusparseColorInfo;
pub const struct_pruneInfo = opaque {};
pub const pruneInfo_t = ?*struct_pruneInfo;
pub const CUSPARSE_STATUS_SUCCESS: c_int = 0;
pub const CUSPARSE_STATUS_NOT_INITIALIZED: c_int = 1;
pub const CUSPARSE_STATUS_ALLOC_FAILED: c_int = 2;
pub const CUSPARSE_STATUS_INVALID_VALUE: c_int = 3;
pub const CUSPARSE_STATUS_ARCH_MISMATCH: c_int = 4;
pub const CUSPARSE_STATUS_MAPPING_ERROR: c_int = 5;
pub const CUSPARSE_STATUS_EXECUTION_FAILED: c_int = 6;
pub const CUSPARSE_STATUS_INTERNAL_ERROR: c_int = 7;
pub const CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED: c_int = 8;
pub const CUSPARSE_STATUS_ZERO_PIVOT: c_int = 9;
pub const CUSPARSE_STATUS_NOT_SUPPORTED: c_int = 10;
pub const CUSPARSE_STATUS_INSUFFICIENT_RESOURCES: c_int = 11;
pub const cusparseStatus_t = c_uint;
pub const CUSPARSE_POINTER_MODE_HOST: c_int = 0;
pub const CUSPARSE_POINTER_MODE_DEVICE: c_int = 1;
pub const cusparsePointerMode_t = c_uint;
pub const CUSPARSE_ACTION_SYMBOLIC: c_int = 0;
pub const CUSPARSE_ACTION_NUMERIC: c_int = 1;
pub const cusparseAction_t = c_uint;
pub const CUSPARSE_MATRIX_TYPE_GENERAL: c_int = 0;
pub const CUSPARSE_MATRIX_TYPE_SYMMETRIC: c_int = 1;
pub const CUSPARSE_MATRIX_TYPE_HERMITIAN: c_int = 2;
pub const CUSPARSE_MATRIX_TYPE_TRIANGULAR: c_int = 3;
pub const cusparseMatrixType_t = c_uint;
pub const CUSPARSE_FILL_MODE_LOWER: c_int = 0;
pub const CUSPARSE_FILL_MODE_UPPER: c_int = 1;
pub const cusparseFillMode_t = c_uint;
pub const CUSPARSE_DIAG_TYPE_NON_UNIT: c_int = 0;
pub const CUSPARSE_DIAG_TYPE_UNIT: c_int = 1;
pub const cusparseDiagType_t = c_uint;
pub const CUSPARSE_INDEX_BASE_ZERO: c_int = 0;
pub const CUSPARSE_INDEX_BASE_ONE: c_int = 1;
pub const cusparseIndexBase_t = c_uint;
pub const CUSPARSE_OPERATION_NON_TRANSPOSE: c_int = 0;
pub const CUSPARSE_OPERATION_TRANSPOSE: c_int = 1;
pub const CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE: c_int = 2;
pub const cusparseOperation_t = c_uint;
pub const CUSPARSE_DIRECTION_ROW: c_int = 0;
pub const CUSPARSE_DIRECTION_COLUMN: c_int = 1;
pub const cusparseDirection_t = c_uint;
pub const CUSPARSE_SOLVE_POLICY_NO_LEVEL: c_int = 0;
pub const CUSPARSE_SOLVE_POLICY_USE_LEVEL: c_int = 1;
pub const cusparseSolvePolicy_t = c_uint;
pub const CUSPARSE_COLOR_ALG0: c_int = 0;
pub const CUSPARSE_COLOR_ALG1: c_int = 1;
pub const cusparseColorAlg_t = c_uint;
pub extern fn cusparseCreate(handle: [*c]cusparseHandle_t) cusparseStatus_t;
pub extern fn cusparseDestroy(handle: cusparseHandle_t) cusparseStatus_t;
pub extern fn cusparseGetVersion(handle: cusparseHandle_t, version: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseGetProperty(@"type": libraryPropertyType, value: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseGetErrorName(status: cusparseStatus_t) [*c]const u8;
pub extern fn cusparseGetErrorString(status: cusparseStatus_t) [*c]const u8;
pub extern fn cusparseSetStream(handle: cusparseHandle_t, streamId: cudaStream_t) cusparseStatus_t;
pub extern fn cusparseGetStream(handle: cusparseHandle_t, streamId: [*c]cudaStream_t) cusparseStatus_t;
pub extern fn cusparseGetPointerMode(handle: cusparseHandle_t, mode: [*c]cusparsePointerMode_t) cusparseStatus_t;
pub extern fn cusparseSetPointerMode(handle: cusparseHandle_t, mode: cusparsePointerMode_t) cusparseStatus_t;
pub const cusparseLoggerCallback_t = ?*const fn (c_int, [*c]const u8, [*c]const u8) callconv(.c) void;
pub extern fn cusparseLoggerSetCallback(callback: cusparseLoggerCallback_t) cusparseStatus_t;
pub extern fn cusparseLoggerSetFile(file: [*c]FILE) cusparseStatus_t;
pub extern fn cusparseLoggerOpenFile(logFile: [*c]const u8) cusparseStatus_t;
pub extern fn cusparseLoggerSetLevel(level: c_int) cusparseStatus_t;
pub extern fn cusparseLoggerSetMask(mask: c_int) cusparseStatus_t;
pub extern fn cusparseLoggerForceDisable() cusparseStatus_t;
pub extern fn cusparseCreateMatDescr(descrA: [*c]cusparseMatDescr_t) cusparseStatus_t;
pub extern fn cusparseDestroyMatDescr(descrA: cusparseMatDescr_t) cusparseStatus_t;
pub extern fn cusparseSetMatType(descrA: cusparseMatDescr_t, @"type": cusparseMatrixType_t) cusparseStatus_t;
pub extern fn cusparseGetMatType(descrA: cusparseMatDescr_t) cusparseMatrixType_t;
pub extern fn cusparseSetMatFillMode(descrA: cusparseMatDescr_t, fillMode: cusparseFillMode_t) cusparseStatus_t;
pub extern fn cusparseGetMatFillMode(descrA: cusparseMatDescr_t) cusparseFillMode_t;
pub extern fn cusparseSetMatDiagType(descrA: cusparseMatDescr_t, diagType: cusparseDiagType_t) cusparseStatus_t;
pub extern fn cusparseGetMatDiagType(descrA: cusparseMatDescr_t) cusparseDiagType_t;
pub extern fn cusparseSetMatIndexBase(descrA: cusparseMatDescr_t, base: cusparseIndexBase_t) cusparseStatus_t;
pub extern fn cusparseGetMatIndexBase(descrA: cusparseMatDescr_t) cusparseIndexBase_t;
pub extern fn cusparseCreateCsric02Info(info: [*c]csric02Info_t) cusparseStatus_t;
pub extern fn cusparseDestroyCsric02Info(info: csric02Info_t) cusparseStatus_t;
pub extern fn cusparseCreateBsric02Info(info: [*c]bsric02Info_t) cusparseStatus_t;
pub extern fn cusparseDestroyBsric02Info(info: bsric02Info_t) cusparseStatus_t;
pub extern fn cusparseCreateCsrilu02Info(info: [*c]csrilu02Info_t) cusparseStatus_t;
pub extern fn cusparseDestroyCsrilu02Info(info: csrilu02Info_t) cusparseStatus_t;
pub extern fn cusparseCreateBsrilu02Info(info: [*c]bsrilu02Info_t) cusparseStatus_t;
pub extern fn cusparseDestroyBsrilu02Info(info: bsrilu02Info_t) cusparseStatus_t;
pub extern fn cusparseCreateBsrsv2Info(info: [*c]bsrsv2Info_t) cusparseStatus_t;
pub extern fn cusparseDestroyBsrsv2Info(info: bsrsv2Info_t) cusparseStatus_t;
pub extern fn cusparseCreateBsrsm2Info(info: [*c]bsrsm2Info_t) cusparseStatus_t;
pub extern fn cusparseDestroyBsrsm2Info(info: bsrsm2Info_t) cusparseStatus_t;
pub extern fn cusparseCreateCsru2csrInfo(info: [*c]csru2csrInfo_t) cusparseStatus_t;
pub extern fn cusparseDestroyCsru2csrInfo(info: csru2csrInfo_t) cusparseStatus_t;
pub extern fn cusparseCreateColorInfo(info: [*c]cusparseColorInfo_t) cusparseStatus_t;
pub extern fn cusparseDestroyColorInfo(info: cusparseColorInfo_t) cusparseStatus_t;
pub extern fn cusparseCreatePruneInfo(info: [*c]pruneInfo_t) cusparseStatus_t;
pub extern fn cusparseDestroyPruneInfo(info: pruneInfo_t) cusparseStatus_t;
pub extern fn cusparseSgemvi(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, alpha: [*c]const f32, A: [*c]const f32, lda: c_int, nnz: c_int, xVal: [*c]const f32, xInd: [*c]const c_int, beta: [*c]const f32, y: [*c]f32, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgemvi_bufferSize(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, nnz: c_int, pBufferSize: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDgemvi(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, alpha: [*c]const f64, A: [*c]const f64, lda: c_int, nnz: c_int, xVal: [*c]const f64, xInd: [*c]const c_int, beta: [*c]const f64, y: [*c]f64, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgemvi_bufferSize(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, nnz: c_int, pBufferSize: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCgemvi(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, A: [*c]const cuComplex, lda: c_int, nnz: c_int, xVal: [*c]const cuComplex, xInd: [*c]const c_int, beta: [*c]const cuComplex, y: [*c]cuComplex, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgemvi_bufferSize(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, nnz: c_int, pBufferSize: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZgemvi(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, A: [*c]const cuDoubleComplex, lda: c_int, nnz: c_int, xVal: [*c]const cuDoubleComplex, xInd: [*c]const c_int, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgemvi_bufferSize(handle: cusparseHandle_t, transA: cusparseOperation_t, m: c_int, n: c_int, nnz: c_int, pBufferSize: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsrmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const f32, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const f32, beta: [*c]const f32, y: [*c]f32) cusparseStatus_t;
pub extern fn cusparseDbsrmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const f64, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const f64, beta: [*c]const f64, y: [*c]f64) cusparseStatus_t;
pub extern fn cusparseCbsrmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const cuComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const cuComplex, beta: [*c]const cuComplex, y: [*c]cuComplex) cusparseStatus_t;
pub extern fn cusparseZbsrmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const cuDoubleComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const cuDoubleComplex, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex) cusparseStatus_t;
pub extern fn cusparseSbsrxmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, sizeOfMask: c_int, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const f32, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedMaskPtrA: [*c]const c_int, bsrSortedRowPtrA: [*c]const c_int, bsrSortedEndPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const f32, beta: [*c]const f32, y: [*c]f32) cusparseStatus_t;
pub extern fn cusparseDbsrxmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, sizeOfMask: c_int, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const f64, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedMaskPtrA: [*c]const c_int, bsrSortedRowPtrA: [*c]const c_int, bsrSortedEndPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const f64, beta: [*c]const f64, y: [*c]f64) cusparseStatus_t;
pub extern fn cusparseCbsrxmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, sizeOfMask: c_int, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const cuComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedMaskPtrA: [*c]const c_int, bsrSortedRowPtrA: [*c]const c_int, bsrSortedEndPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const cuComplex, beta: [*c]const cuComplex, y: [*c]cuComplex) cusparseStatus_t;
pub extern fn cusparseZbsrxmv(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, sizeOfMask: c_int, mb: c_int, nb: c_int, nnzb: c_int, alpha: [*c]const cuDoubleComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedMaskPtrA: [*c]const c_int, bsrSortedRowPtrA: [*c]const c_int, bsrSortedEndPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, x: [*c]const cuDoubleComplex, beta: [*c]const cuDoubleComplex, y: [*c]cuDoubleComplex) cusparseStatus_t;
pub extern fn cusparseXbsrsv2_zeroPivot(handle: cusparseHandle_t, info: bsrsv2Info_t, position: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsrsv2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDbsrsv2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCbsrsv2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZbsrsv2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsrsv2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, info: bsrsv2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDbsrsv2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, info: bsrsv2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCbsrsv2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, info: bsrsv2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZbsrsv2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, info: bsrsv2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSbsrsv2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsrsv2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsrsv2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsrsv2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSbsrsv2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, alpha: [*c]const f32, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, f: [*c]const f32, x: [*c]f32, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsrsv2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, alpha: [*c]const f64, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, f: [*c]const f64, x: [*c]f64, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsrsv2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, alpha: [*c]const cuComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, f: [*c]const cuComplex, x: [*c]cuComplex, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsrsv2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, mb: c_int, nnzb: c_int, alpha: [*c]const cuDoubleComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, info: bsrsv2Info_t, f: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSbsrmm(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, kb: c_int, nnzb: c_int, alpha: [*c]const f32, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, B: [*c]const f32, ldb: c_int, beta: [*c]const f32, C: [*c]f32, ldc: c_int) cusparseStatus_t;
pub extern fn cusparseDbsrmm(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, kb: c_int, nnzb: c_int, alpha: [*c]const f64, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, B: [*c]const f64, ldb: c_int, beta: [*c]const f64, C: [*c]f64, ldc: c_int) cusparseStatus_t;
pub extern fn cusparseCbsrmm(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, kb: c_int, nnzb: c_int, alpha: [*c]const cuComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, B: [*c]const cuComplex, ldb: c_int, beta: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int) cusparseStatus_t;
pub extern fn cusparseZbsrmm(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, kb: c_int, nnzb: c_int, alpha: [*c]const cuDoubleComplex, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockSize: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, beta: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int) cusparseStatus_t;
pub extern fn cusparseXbsrsm2_zeroPivot(handle: cusparseHandle_t, info: bsrsm2Info_t, position: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsrsm2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDbsrsm2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCbsrsm2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZbsrsm2_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsrsm2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDbsrsm2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCbsrsm2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZbsrsm2_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transB: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSbsrsm2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsrsm2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsrsm2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsrsm2_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSbsrsm2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, alpha: [*c]const f32, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, B: [*c]const f32, ldb: c_int, X: [*c]f32, ldx: c_int, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsrsm2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, alpha: [*c]const f64, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, B: [*c]const f64, ldb: c_int, X: [*c]f64, ldx: c_int, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsrsm2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, alpha: [*c]const cuComplex, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, B: [*c]const cuComplex, ldb: c_int, X: [*c]cuComplex, ldx: c_int, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsrsm2_solve(handle: cusparseHandle_t, dirA: cusparseDirection_t, transA: cusparseOperation_t, transXY: cusparseOperation_t, mb: c_int, n: c_int, nnzb: c_int, alpha: [*c]const cuDoubleComplex, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrsm2Info_t, B: [*c]const cuDoubleComplex, ldb: c_int, X: [*c]cuDoubleComplex, ldx: c_int, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsrilu02_numericBoost(handle: cusparseHandle_t, info: csrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]f32) cusparseStatus_t;
pub extern fn cusparseDcsrilu02_numericBoost(handle: cusparseHandle_t, info: csrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]f64) cusparseStatus_t;
pub extern fn cusparseCcsrilu02_numericBoost(handle: cusparseHandle_t, info: csrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]cuComplex) cusparseStatus_t;
pub extern fn cusparseZcsrilu02_numericBoost(handle: cusparseHandle_t, info: csrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]cuDoubleComplex) cusparseStatus_t;
pub extern fn cusparseXcsrilu02_zeroPivot(handle: cusparseHandle_t, info: csrilu02Info_t, position: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseScsrilu02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDcsrilu02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCcsrilu02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZcsrilu02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseScsrilu02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]f32, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDcsrilu02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]f64, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCcsrilu02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]cuComplex, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZcsrilu02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]cuDoubleComplex, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseScsrilu02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsrilu02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsrilu02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsrilu02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsrilu02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsrilu02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsrilu02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsrilu02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSbsrilu02_numericBoost(handle: cusparseHandle_t, info: bsrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]f32) cusparseStatus_t;
pub extern fn cusparseDbsrilu02_numericBoost(handle: cusparseHandle_t, info: bsrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]f64) cusparseStatus_t;
pub extern fn cusparseCbsrilu02_numericBoost(handle: cusparseHandle_t, info: bsrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]cuComplex) cusparseStatus_t;
pub extern fn cusparseZbsrilu02_numericBoost(handle: cusparseHandle_t, info: bsrilu02Info_t, enable_boost: c_int, tol: [*c]f64, boost_val: [*c]cuDoubleComplex) cusparseStatus_t;
pub extern fn cusparseXbsrilu02_zeroPivot(handle: cusparseHandle_t, info: bsrilu02Info_t, position: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsrilu02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDbsrilu02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCbsrilu02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZbsrilu02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsrilu02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDbsrilu02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCbsrilu02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZbsrilu02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsrilu02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSbsrilu02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsrilu02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsrilu02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsrilu02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSbsrilu02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsrilu02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsrilu02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsrilu02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsrilu02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseXcsric02_zeroPivot(handle: cusparseHandle_t, info: csric02Info_t, position: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseScsric02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDcsric02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCcsric02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZcsric02_bufferSize(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseScsric02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]f32, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDcsric02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]f64, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCcsric02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]cuComplex, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZcsric02_bufferSizeExt(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedVal: [*c]cuDoubleComplex, csrSortedRowPtr: [*c]const c_int, csrSortedColInd: [*c]const c_int, info: csric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseScsric02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsric02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsric02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsric02_analysis(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsric02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsric02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsric02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsric02(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA_valM: [*c]cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, info: csric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseXbsric02_zeroPivot(handle: cusparseHandle_t, info: bsric02Info_t, position: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsric02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDbsric02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCbsric02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZbsric02_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsric02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDbsric02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCbsric02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZbsric02_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockSize: c_int, info: bsric02Info_t, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSbsric02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pInputBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsric02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pInputBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsric02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pInputBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsric02_analysis(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]const cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pInputBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSbsric02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDbsric02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCbsric02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZbsric02(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedVal: [*c]cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, blockDim: c_int, info: bsric02Info_t, policy: cusparseSolvePolicy_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgtsv2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, B: [*c]const f32, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDgtsv2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, B: [*c]const f64, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCgtsv2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, B: [*c]const cuComplex, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZgtsv2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, B: [*c]const cuDoubleComplex, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSgtsv2(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, B: [*c]f32, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgtsv2(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, B: [*c]f64, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgtsv2(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, B: [*c]cuComplex, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgtsv2(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, B: [*c]cuDoubleComplex, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgtsv2_nopivot_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, B: [*c]const f32, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDgtsv2_nopivot_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, B: [*c]const f64, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCgtsv2_nopivot_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, B: [*c]const cuComplex, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZgtsv2_nopivot_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, B: [*c]const cuDoubleComplex, ldb: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSgtsv2_nopivot(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, B: [*c]f32, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgtsv2_nopivot(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, B: [*c]f64, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgtsv2_nopivot(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, B: [*c]cuComplex, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgtsv2_nopivot(handle: cusparseHandle_t, m: c_int, n: c_int, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, B: [*c]cuDoubleComplex, ldb: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgtsv2StridedBatch_bufferSizeExt(handle: cusparseHandle_t, m: c_int, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, x: [*c]const f32, batchCount: c_int, batchStride: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDgtsv2StridedBatch_bufferSizeExt(handle: cusparseHandle_t, m: c_int, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, x: [*c]const f64, batchCount: c_int, batchStride: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCgtsv2StridedBatch_bufferSizeExt(handle: cusparseHandle_t, m: c_int, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, x: [*c]const cuComplex, batchCount: c_int, batchStride: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZgtsv2StridedBatch_bufferSizeExt(handle: cusparseHandle_t, m: c_int, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, batchCount: c_int, batchStride: c_int, bufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSgtsv2StridedBatch(handle: cusparseHandle_t, m: c_int, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, x: [*c]f32, batchCount: c_int, batchStride: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgtsv2StridedBatch(handle: cusparseHandle_t, m: c_int, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, x: [*c]f64, batchCount: c_int, batchStride: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgtsv2StridedBatch(handle: cusparseHandle_t, m: c_int, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, x: [*c]cuComplex, batchCount: c_int, batchStride: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgtsv2StridedBatch(handle: cusparseHandle_t, m: c_int, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, x: [*c]cuDoubleComplex, batchCount: c_int, batchStride: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgtsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, x: [*c]const f32, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDgtsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, x: [*c]const f64, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCgtsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, x: [*c]const cuComplex, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZgtsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSgtsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]f32, d: [*c]f32, du: [*c]f32, x: [*c]f32, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgtsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]f64, d: [*c]f64, du: [*c]f64, x: [*c]f64, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgtsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]cuComplex, d: [*c]cuComplex, du: [*c]cuComplex, x: [*c]cuComplex, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgtsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, dl: [*c]cuDoubleComplex, d: [*c]cuDoubleComplex, du: [*c]cuDoubleComplex, x: [*c]cuDoubleComplex, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgpsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]const f32, dl: [*c]const f32, d: [*c]const f32, du: [*c]const f32, dw: [*c]const f32, x: [*c]const f32, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDgpsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]const f64, dl: [*c]const f64, d: [*c]const f64, du: [*c]const f64, dw: [*c]const f64, x: [*c]const f64, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCgpsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]const cuComplex, dl: [*c]const cuComplex, d: [*c]const cuComplex, du: [*c]const cuComplex, dw: [*c]const cuComplex, x: [*c]const cuComplex, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZgpsvInterleavedBatch_bufferSizeExt(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]const cuDoubleComplex, dl: [*c]const cuDoubleComplex, d: [*c]const cuDoubleComplex, du: [*c]const cuDoubleComplex, dw: [*c]const cuDoubleComplex, x: [*c]const cuDoubleComplex, batchCount: c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSgpsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]f32, dl: [*c]f32, d: [*c]f32, du: [*c]f32, dw: [*c]f32, x: [*c]f32, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgpsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]f64, dl: [*c]f64, d: [*c]f64, du: [*c]f64, dw: [*c]f64, x: [*c]f64, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgpsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]cuComplex, dl: [*c]cuComplex, d: [*c]cuComplex, du: [*c]cuComplex, dw: [*c]cuComplex, x: [*c]cuComplex, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgpsvInterleavedBatch(handle: cusparseHandle_t, algo: c_int, m: c_int, ds: [*c]cuDoubleComplex, dl: [*c]cuDoubleComplex, d: [*c]cuDoubleComplex, du: [*c]cuDoubleComplex, dw: [*c]cuDoubleComplex, x: [*c]cuDoubleComplex, batchCount: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsrgeam2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const f32, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const f32, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const f32, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDcsrgeam2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const f64, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const f64, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const f64, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCcsrgeam2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const cuComplex, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const cuComplex, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const cuComplex, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZcsrgeam2_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const cuDoubleComplex, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const cuDoubleComplex, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const cuDoubleComplex, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseXcsrgeam2Nnz(handle: cusparseHandle_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, workspace: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsrgeam2(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const f32, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const f32, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const f32, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f32, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsrgeam2(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const f64, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const f64, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const f64, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f64, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsrgeam2(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const cuComplex, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const cuComplex, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const cuComplex, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]cuComplex, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsrgeam2(handle: cusparseHandle_t, m: c_int, n: c_int, alpha: [*c]const cuDoubleComplex, descrA: cusparseMatDescr_t, nnzA: c_int, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, beta: [*c]const cuDoubleComplex, descrB: cusparseMatDescr_t, nnzB: c_int, csrSortedValB: [*c]const cuDoubleComplex, csrSortedRowPtrB: [*c]const c_int, csrSortedColIndB: [*c]const c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]cuDoubleComplex, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsrcolor(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, fractionToColor: [*c]const f32, ncolors: [*c]c_int, coloring: [*c]c_int, reordering: [*c]c_int, info: cusparseColorInfo_t) cusparseStatus_t;
pub extern fn cusparseDcsrcolor(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, fractionToColor: [*c]const f64, ncolors: [*c]c_int, coloring: [*c]c_int, reordering: [*c]c_int, info: cusparseColorInfo_t) cusparseStatus_t;
pub extern fn cusparseCcsrcolor(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, fractionToColor: [*c]const f32, ncolors: [*c]c_int, coloring: [*c]c_int, reordering: [*c]c_int, info: cusparseColorInfo_t) cusparseStatus_t;
pub extern fn cusparseZcsrcolor(handle: cusparseHandle_t, m: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, fractionToColor: [*c]const f64, ncolors: [*c]c_int, coloring: [*c]c_int, reordering: [*c]c_int, info: cusparseColorInfo_t) cusparseStatus_t;
pub extern fn cusparseSnnz(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, A: [*c]const f32, lda: c_int, nnzPerRowCol: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDnnz(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, A: [*c]const f64, lda: c_int, nnzPerRowCol: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCnnz(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, A: [*c]const cuComplex, lda: c_int, nnzPerRowCol: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZnnz(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, A: [*c]const cuDoubleComplex, lda: c_int, nnzPerRowCol: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSnnz_compress(handle: cusparseHandle_t, m: c_int, descr: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, nnzPerRow: [*c]c_int, nnzC: [*c]c_int, tol: f32) cusparseStatus_t;
pub extern fn cusparseDnnz_compress(handle: cusparseHandle_t, m: c_int, descr: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, nnzPerRow: [*c]c_int, nnzC: [*c]c_int, tol: f64) cusparseStatus_t;
pub extern fn cusparseCnnz_compress(handle: cusparseHandle_t, m: c_int, descr: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, nnzPerRow: [*c]c_int, nnzC: [*c]c_int, tol: cuComplex) cusparseStatus_t;
pub extern fn cusparseZnnz_compress(handle: cusparseHandle_t, m: c_int, descr: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, nnzPerRow: [*c]c_int, nnzC: [*c]c_int, tol: cuDoubleComplex) cusparseStatus_t;
pub extern fn cusparseScsr2csr_compress(handle: cusparseHandle_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedColIndA: [*c]const c_int, csrSortedRowPtrA: [*c]const c_int, nnzA: c_int, nnzPerRow: [*c]const c_int, csrSortedValC: [*c]f32, csrSortedColIndC: [*c]c_int, csrSortedRowPtrC: [*c]c_int, tol: f32) cusparseStatus_t;
pub extern fn cusparseDcsr2csr_compress(handle: cusparseHandle_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedColIndA: [*c]const c_int, csrSortedRowPtrA: [*c]const c_int, nnzA: c_int, nnzPerRow: [*c]const c_int, csrSortedValC: [*c]f64, csrSortedColIndC: [*c]c_int, csrSortedRowPtrC: [*c]c_int, tol: f64) cusparseStatus_t;
pub extern fn cusparseCcsr2csr_compress(handle: cusparseHandle_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedColIndA: [*c]const c_int, csrSortedRowPtrA: [*c]const c_int, nnzA: c_int, nnzPerRow: [*c]const c_int, csrSortedValC: [*c]cuComplex, csrSortedColIndC: [*c]c_int, csrSortedRowPtrC: [*c]c_int, tol: cuComplex) cusparseStatus_t;
pub extern fn cusparseZcsr2csr_compress(handle: cusparseHandle_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedColIndA: [*c]const c_int, csrSortedRowPtrA: [*c]const c_int, nnzA: c_int, nnzPerRow: [*c]const c_int, csrSortedValC: [*c]cuDoubleComplex, csrSortedColIndC: [*c]c_int, csrSortedRowPtrC: [*c]c_int, tol: cuDoubleComplex) cusparseStatus_t;
pub extern fn cusparseXcoo2csr(handle: cusparseHandle_t, cooRowInd: [*c]const c_int, nnz: c_int, m: c_int, csrSortedRowPtr: [*c]c_int, idxBase: cusparseIndexBase_t) cusparseStatus_t;
pub extern fn cusparseXcsr2coo(handle: cusparseHandle_t, csrSortedRowPtr: [*c]const c_int, nnz: c_int, m: c_int, cooRowInd: [*c]c_int, idxBase: cusparseIndexBase_t) cusparseStatus_t;
pub extern fn cusparseXcsr2bsrNnz(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, bsrSortedRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseScsr2bsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]f32, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDcsr2bsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]f64, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCcsr2bsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]cuComplex, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZcsr2bsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]cuDoubleComplex, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSbsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f32, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDbsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f64, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCbsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]cuComplex, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZbsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, blockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]cuDoubleComplex, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSgebsr2gebsc_bufferSize(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDgebsr2gebsc_bufferSize(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCgebsr2gebsc_bufferSize(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZgebsr2gebsc_bufferSize(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSgebsr2gebsc_bufferSizeExt(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDgebsr2gebsc_bufferSizeExt(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCgebsr2gebsc_bufferSizeExt(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZgebsr2gebsc_bufferSizeExt(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSgebsr2gebsc(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const f32, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, bscVal: [*c]f32, bscRowInd: [*c]c_int, bscColPtr: [*c]c_int, copyValues: cusparseAction_t, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgebsr2gebsc(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const f64, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, bscVal: [*c]f64, bscRowInd: [*c]c_int, bscColPtr: [*c]c_int, copyValues: cusparseAction_t, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgebsr2gebsc(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const cuComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, bscVal: [*c]cuComplex, bscRowInd: [*c]c_int, bscColPtr: [*c]c_int, copyValues: cusparseAction_t, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgebsr2gebsc(handle: cusparseHandle_t, mb: c_int, nb: c_int, nnzb: c_int, bsrSortedVal: [*c]const cuDoubleComplex, bsrSortedRowPtr: [*c]const c_int, bsrSortedColInd: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, bscVal: [*c]cuDoubleComplex, bscRowInd: [*c]c_int, bscColPtr: [*c]c_int, copyValues: cusparseAction_t, idxBase: cusparseIndexBase_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseXgebsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, descrC: cusparseMatDescr_t, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSgebsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f32, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDgebsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f64, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCgebsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]cuComplex, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZgebsr2csr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, descrC: cusparseMatDescr_t, csrSortedValC: [*c]cuDoubleComplex, csrSortedRowPtrC: [*c]c_int, csrSortedColIndC: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseScsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDcsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCcsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZcsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseScsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDcsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCcsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZcsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, rowBlockDim: c_int, colBlockDim: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseXcsr2gebsrNnz(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, descrC: cusparseMatDescr_t, bsrSortedRowPtrC: [*c]c_int, rowBlockDim: c_int, colBlockDim: c_int, nnzTotalDevHostPtr: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]f32, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDim: c_int, colBlockDim: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]f64, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDim: c_int, colBlockDim: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]cuComplex, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDim: c_int, colBlockDim: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, m: c_int, n: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const cuDoubleComplex, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]cuDoubleComplex, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDim: c_int, colBlockDim: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgebsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseDgebsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCgebsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseZgebsr2gebsr_bufferSize(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSizeInBytes: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseSgebsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDgebsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCgebsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZgebsr2gebsr_bufferSizeExt(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseXgebsr2gebsrNnz(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, descrC: cusparseMatDescr_t, bsrSortedRowPtrC: [*c]c_int, rowBlockDimC: c_int, colBlockDimC: c_int, nnzTotalDevHostPtr: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSgebsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f32, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]f32, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDgebsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const f64, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]f64, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCgebsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]cuComplex, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZgebsr2gebsr(handle: cusparseHandle_t, dirA: cusparseDirection_t, mb: c_int, nb: c_int, nnzb: c_int, descrA: cusparseMatDescr_t, bsrSortedValA: [*c]const cuDoubleComplex, bsrSortedRowPtrA: [*c]const c_int, bsrSortedColIndA: [*c]const c_int, rowBlockDimA: c_int, colBlockDimA: c_int, descrC: cusparseMatDescr_t, bsrSortedValC: [*c]cuDoubleComplex, bsrSortedRowPtrC: [*c]c_int, bsrSortedColIndC: [*c]c_int, rowBlockDimC: c_int, colBlockDimC: c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCreateIdentityPermutation(handle: cusparseHandle_t, n: c_int, p: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseXcoosort_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, cooRowsA: [*c]const c_int, cooColsA: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseXcoosortByRow(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, cooRowsA: [*c]c_int, cooColsA: [*c]c_int, P: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseXcoosortByColumn(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, cooRowsA: [*c]c_int, cooColsA: [*c]c_int, P: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseXcsrsort_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, csrRowPtrA: [*c]const c_int, csrColIndA: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseXcsrsort(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrRowPtrA: [*c]const c_int, csrColIndA: [*c]c_int, P: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseXcscsort_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, cscColPtrA: [*c]const c_int, cscRowIndA: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseXcscsort(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, cscColPtrA: [*c]const c_int, cscRowIndA: [*c]c_int, P: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsru2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, csrVal: [*c]f32, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDcsru2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, csrVal: [*c]f64, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseCcsru2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, csrVal: [*c]cuComplex, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseZcsru2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, csrVal: [*c]cuDoubleComplex, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseScsru2csr(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]f32, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsru2csr(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]f64, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsru2csr(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]cuComplex, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsru2csr(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]cuDoubleComplex, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseScsr2csru(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]f32, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDcsr2csru(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]f64, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCcsr2csru(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]cuComplex, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseZcsr2csru(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, descrA: cusparseMatDescr_t, csrVal: [*c]cuDoubleComplex, csrRowPtr: [*c]const c_int, csrColInd: [*c]c_int, info: csru2csrInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneDense2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, threshold: [*c]const f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDpruneDense2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, threshold: [*c]const f64, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpruneDense2csrNnz(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, threshold: [*c]const f32, descrC: cusparseMatDescr_t, csrRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneDense2csrNnz(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, threshold: [*c]const f64, descrC: cusparseMatDescr_t, csrSortedRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneDense2csr(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, threshold: [*c]const f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneDense2csr(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, threshold: [*c]const f64, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneCsr2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, threshold: [*c]const f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDpruneCsr2csr_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, threshold: [*c]const f64, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpruneCsr2csrNnz(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, threshold: [*c]const f32, descrC: cusparseMatDescr_t, csrSortedRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneCsr2csrNnz(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, threshold: [*c]const f64, descrC: cusparseMatDescr_t, csrSortedRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneCsr2csr(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, threshold: [*c]const f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneCsr2csr(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, threshold: [*c]const f64, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneDense2csrByPercentage_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, info: pruneInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDpruneDense2csrByPercentage_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, info: pruneInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpruneDense2csrNnzByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, percentage: f32, descrC: cusparseMatDescr_t, csrRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneDense2csrNnzByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, percentage: f32, descrC: cusparseMatDescr_t, csrRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneDense2csrByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneDense2csrByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneCsr2csrByPercentage_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, info: pruneInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDpruneCsr2csrByPercentage_bufferSizeExt(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]const f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]const c_int, info: pruneInfo_t, pBufferSizeInBytes: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpruneCsr2csrNnzByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneCsr2csrNnzByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedRowPtrC: [*c]c_int, nnzTotalDevHostPtr: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpruneCsr2csrByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f32, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f32, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDpruneCsr2csrByPercentage(handle: cusparseHandle_t, m: c_int, n: c_int, nnzA: c_int, descrA: cusparseMatDescr_t, csrSortedValA: [*c]const f64, csrSortedRowPtrA: [*c]const c_int, csrSortedColIndA: [*c]const c_int, percentage: f32, descrC: cusparseMatDescr_t, csrSortedValC: [*c]f64, csrSortedRowPtrC: [*c]const c_int, csrSortedColIndC: [*c]c_int, info: pruneInfo_t, pBuffer: ?*anyopaque) cusparseStatus_t;
pub const CUSPARSE_CSR2CSC_ALG_DEFAULT: c_int = 1;
pub const CUSPARSE_CSR2CSC_ALG1: c_int = 1;
pub const cusparseCsr2CscAlg_t = c_uint;
pub extern fn cusparseCsr2cscEx2(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, csrVal: ?*const anyopaque, csrRowPtr: [*c]const c_int, csrColInd: [*c]const c_int, cscVal: ?*anyopaque, cscColPtr: [*c]c_int, cscRowInd: [*c]c_int, valType: cudaDataType, copyValues: cusparseAction_t, idxBase: cusparseIndexBase_t, alg: cusparseCsr2CscAlg_t, buffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCsr2cscEx2_bufferSize(handle: cusparseHandle_t, m: c_int, n: c_int, nnz: c_int, csrVal: ?*const anyopaque, csrRowPtr: [*c]const c_int, csrColInd: [*c]const c_int, cscVal: ?*anyopaque, cscColPtr: [*c]c_int, cscRowInd: [*c]c_int, valType: cudaDataType, copyValues: cusparseAction_t, idxBase: cusparseIndexBase_t, alg: cusparseCsr2CscAlg_t, bufferSize: [*c]usize) cusparseStatus_t;
pub const CUSPARSE_FORMAT_CSR: c_int = 1;
pub const CUSPARSE_FORMAT_CSC: c_int = 2;
pub const CUSPARSE_FORMAT_COO: c_int = 3;
pub const CUSPARSE_FORMAT_BLOCKED_ELL: c_int = 5;
pub const CUSPARSE_FORMAT_BSR: c_int = 6;
pub const CUSPARSE_FORMAT_SLICED_ELLPACK: c_int = 7;
pub const cusparseFormat_t = c_uint;
pub const CUSPARSE_ORDER_COL: c_int = 1;
pub const CUSPARSE_ORDER_ROW: c_int = 2;
pub const cusparseOrder_t = c_uint;
pub const CUSPARSE_INDEX_16U: c_int = 1;
pub const CUSPARSE_INDEX_32I: c_int = 2;
pub const CUSPARSE_INDEX_64I: c_int = 3;
pub const cusparseIndexType_t = c_uint;
pub const struct_cusparseSpVecDescr = opaque {};
pub const struct_cusparseDnVecDescr = opaque {};
pub const struct_cusparseSpMatDescr = opaque {};
pub const struct_cusparseDnMatDescr = opaque {};
pub const cusparseSpVecDescr_t = ?*struct_cusparseSpVecDescr;
pub const cusparseDnVecDescr_t = ?*struct_cusparseDnVecDescr;
pub const cusparseSpMatDescr_t = ?*struct_cusparseSpMatDescr;
pub const cusparseDnMatDescr_t = ?*struct_cusparseDnMatDescr;
pub const cusparseConstSpVecDescr_t = ?*const struct_cusparseSpVecDescr;
pub const cusparseConstDnVecDescr_t = ?*const struct_cusparseDnVecDescr;
pub const cusparseConstSpMatDescr_t = ?*const struct_cusparseSpMatDescr;
pub const cusparseConstDnMatDescr_t = ?*const struct_cusparseDnMatDescr;
pub extern fn cusparseCreateSpVec(spVecDescr: [*c]cusparseSpVecDescr_t, size: i64, nnz: i64, indices: ?*anyopaque, values: ?*anyopaque, idxType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateConstSpVec(spVecDescr: [*c]cusparseConstSpVecDescr_t, size: i64, nnz: i64, indices: ?*const anyopaque, values: ?*const anyopaque, idxType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseDestroySpVec(spVecDescr: cusparseConstSpVecDescr_t) cusparseStatus_t;
pub extern fn cusparseSpVecGet(spVecDescr: cusparseSpVecDescr_t, size: [*c]i64, nnz: [*c]i64, indices: [*c]?*anyopaque, values: [*c]?*anyopaque, idxType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseConstSpVecGet(spVecDescr: cusparseConstSpVecDescr_t, size: [*c]i64, nnz: [*c]i64, indices: [*c]?*const anyopaque, values: [*c]?*const anyopaque, idxType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseSpVecGetIndexBase(spVecDescr: cusparseConstSpVecDescr_t, idxBase: [*c]cusparseIndexBase_t) cusparseStatus_t;
pub extern fn cusparseSpVecGetValues(spVecDescr: cusparseSpVecDescr_t, values: [*c]?*anyopaque) cusparseStatus_t;
pub extern fn cusparseConstSpVecGetValues(spVecDescr: cusparseConstSpVecDescr_t, values: [*c]?*const anyopaque) cusparseStatus_t;
pub extern fn cusparseSpVecSetValues(spVecDescr: cusparseSpVecDescr_t, values: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCreateDnVec(dnVecDescr: [*c]cusparseDnVecDescr_t, size: i64, values: ?*anyopaque, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateConstDnVec(dnVecDescr: [*c]cusparseConstDnVecDescr_t, size: i64, values: ?*const anyopaque, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseDestroyDnVec(dnVecDescr: cusparseConstDnVecDescr_t) cusparseStatus_t;
pub extern fn cusparseDnVecGet(dnVecDescr: cusparseDnVecDescr_t, size: [*c]i64, values: [*c]?*anyopaque, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseConstDnVecGet(dnVecDescr: cusparseConstDnVecDescr_t, size: [*c]i64, values: [*c]?*const anyopaque, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseDnVecGetValues(dnVecDescr: cusparseDnVecDescr_t, values: [*c]?*anyopaque) cusparseStatus_t;
pub extern fn cusparseConstDnVecGetValues(dnVecDescr: cusparseConstDnVecDescr_t, values: [*c]?*const anyopaque) cusparseStatus_t;
pub extern fn cusparseDnVecSetValues(dnVecDescr: cusparseDnVecDescr_t, values: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDestroySpMat(spMatDescr: cusparseConstSpMatDescr_t) cusparseStatus_t;
pub extern fn cusparseSpMatGetFormat(spMatDescr: cusparseConstSpMatDescr_t, format: [*c]cusparseFormat_t) cusparseStatus_t;
pub extern fn cusparseSpMatGetIndexBase(spMatDescr: cusparseConstSpMatDescr_t, idxBase: [*c]cusparseIndexBase_t) cusparseStatus_t;
pub extern fn cusparseSpMatGetValues(spMatDescr: cusparseSpMatDescr_t, values: [*c]?*anyopaque) cusparseStatus_t;
pub extern fn cusparseConstSpMatGetValues(spMatDescr: cusparseConstSpMatDescr_t, values: [*c]?*const anyopaque) cusparseStatus_t;
pub extern fn cusparseSpMatSetValues(spMatDescr: cusparseSpMatDescr_t, values: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpMatGetSize(spMatDescr: cusparseConstSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, nnz: [*c]i64) cusparseStatus_t;
pub extern fn cusparseSpMatGetStridedBatch(spMatDescr: cusparseConstSpMatDescr_t, batchCount: [*c]c_int) cusparseStatus_t;
pub extern fn cusparseCooSetStridedBatch(spMatDescr: cusparseSpMatDescr_t, batchCount: c_int, batchStride: i64) cusparseStatus_t;
pub extern fn cusparseCsrSetStridedBatch(spMatDescr: cusparseSpMatDescr_t, batchCount: c_int, offsetsBatchStride: i64, columnsValuesBatchStride: i64) cusparseStatus_t;
pub extern fn cusparseBsrSetStridedBatch(spMatDescr: cusparseSpMatDescr_t, batchCount: c_int, offsetsBatchStride: i64, columnsBatchStride: i64, ValuesBatchStride: i64) cusparseStatus_t;
pub const CUSPARSE_SPMAT_FILL_MODE: c_int = 0;
pub const CUSPARSE_SPMAT_DIAG_TYPE: c_int = 1;
pub const cusparseSpMatAttribute_t = c_uint;
pub extern fn cusparseSpMatGetAttribute(spMatDescr: cusparseConstSpMatDescr_t, attribute: cusparseSpMatAttribute_t, data: ?*anyopaque, dataSize: usize) cusparseStatus_t;
pub extern fn cusparseSpMatSetAttribute(spMatDescr: cusparseSpMatDescr_t, attribute: cusparseSpMatAttribute_t, data: ?*anyopaque, dataSize: usize) cusparseStatus_t;
pub extern fn cusparseCreateCsr(spMatDescr: [*c]cusparseSpMatDescr_t, rows: i64, cols: i64, nnz: i64, csrRowOffsets: ?*anyopaque, csrColInd: ?*anyopaque, csrValues: ?*anyopaque, csrRowOffsetsType: cusparseIndexType_t, csrColIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateConstCsr(spMatDescr: [*c]cusparseConstSpMatDescr_t, rows: i64, cols: i64, nnz: i64, csrRowOffsets: ?*const anyopaque, csrColInd: ?*const anyopaque, csrValues: ?*const anyopaque, csrRowOffsetsType: cusparseIndexType_t, csrColIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateCsc(spMatDescr: [*c]cusparseSpMatDescr_t, rows: i64, cols: i64, nnz: i64, cscColOffsets: ?*anyopaque, cscRowInd: ?*anyopaque, cscValues: ?*anyopaque, cscColOffsetsType: cusparseIndexType_t, cscRowIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateConstCsc(spMatDescr: [*c]cusparseConstSpMatDescr_t, rows: i64, cols: i64, nnz: i64, cscColOffsets: ?*const anyopaque, cscRowInd: ?*const anyopaque, cscValues: ?*const anyopaque, cscColOffsetsType: cusparseIndexType_t, cscRowIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCsrGet(spMatDescr: cusparseSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, nnz: [*c]i64, csrRowOffsets: [*c]?*anyopaque, csrColInd: [*c]?*anyopaque, csrValues: [*c]?*anyopaque, csrRowOffsetsType: [*c]cusparseIndexType_t, csrColIndType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseConstCsrGet(spMatDescr: cusparseConstSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, nnz: [*c]i64, csrRowOffsets: [*c]?*const anyopaque, csrColInd: [*c]?*const anyopaque, csrValues: [*c]?*const anyopaque, csrRowOffsetsType: [*c]cusparseIndexType_t, csrColIndType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseCscGet(spMatDescr: cusparseSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, nnz: [*c]i64, cscColOffsets: [*c]?*anyopaque, cscRowInd: [*c]?*anyopaque, cscValues: [*c]?*anyopaque, cscColOffsetsType: [*c]cusparseIndexType_t, cscRowIndType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseConstCscGet(spMatDescr: cusparseConstSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, nnz: [*c]i64, cscColOffsets: [*c]?*const anyopaque, cscRowInd: [*c]?*const anyopaque, cscValues: [*c]?*const anyopaque, cscColOffsetsType: [*c]cusparseIndexType_t, cscRowIndType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseCsrSetPointers(spMatDescr: cusparseSpMatDescr_t, csrRowOffsets: ?*anyopaque, csrColInd: ?*anyopaque, csrValues: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCscSetPointers(spMatDescr: cusparseSpMatDescr_t, cscColOffsets: ?*anyopaque, cscRowInd: ?*anyopaque, cscValues: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCreateBsr(spMatDescr: [*c]cusparseSpMatDescr_t, brows: i64, bcols: i64, bnnz: i64, rowBlockSize: i64, colBlockSize: i64, bsrRowOffsets: ?*anyopaque, bsrColInd: ?*anyopaque, bsrValues: ?*anyopaque, bsrRowOffsetsType: cusparseIndexType_t, bsrColIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType, order: cusparseOrder_t) cusparseStatus_t;
pub extern fn cusparseCreateConstBsr(spMatDescr: [*c]cusparseConstSpMatDescr_t, brows: i64, bcols: i64, bnnz: i64, rowBlockDim: i64, colBlockDim: i64, bsrRowOffsets: ?*const anyopaque, bsrColInd: ?*const anyopaque, bsrValues: ?*const anyopaque, bsrRowOffsetsType: cusparseIndexType_t, bsrColIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType, order: cusparseOrder_t) cusparseStatus_t;
pub extern fn cusparseCreateCoo(spMatDescr: [*c]cusparseSpMatDescr_t, rows: i64, cols: i64, nnz: i64, cooRowInd: ?*anyopaque, cooColInd: ?*anyopaque, cooValues: ?*anyopaque, cooIdxType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateConstCoo(spMatDescr: [*c]cusparseConstSpMatDescr_t, rows: i64, cols: i64, nnz: i64, cooRowInd: ?*const anyopaque, cooColInd: ?*const anyopaque, cooValues: ?*const anyopaque, cooIdxType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCooGet(spMatDescr: cusparseSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, nnz: [*c]i64, cooRowInd: [*c]?*anyopaque, cooColInd: [*c]?*anyopaque, cooValues: [*c]?*anyopaque, idxType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseConstCooGet(spMatDescr: cusparseConstSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, nnz: [*c]i64, cooRowInd: [*c]?*const anyopaque, cooColInd: [*c]?*const anyopaque, cooValues: [*c]?*const anyopaque, idxType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseCooSetPointers(spMatDescr: cusparseSpMatDescr_t, cooRows: ?*anyopaque, cooColumns: ?*anyopaque, cooValues: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseCreateBlockedEll(spMatDescr: [*c]cusparseSpMatDescr_t, rows: i64, cols: i64, ellBlockSize: i64, ellCols: i64, ellColInd: ?*anyopaque, ellValue: ?*anyopaque, ellIdxType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateConstBlockedEll(spMatDescr: [*c]cusparseConstSpMatDescr_t, rows: i64, cols: i64, ellBlockSize: i64, ellCols: i64, ellColInd: ?*const anyopaque, ellValue: ?*const anyopaque, ellIdxType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseBlockedEllGet(spMatDescr: cusparseSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, ellBlockSize: [*c]i64, ellCols: [*c]i64, ellColInd: [*c]?*anyopaque, ellValue: [*c]?*anyopaque, ellIdxType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseConstBlockedEllGet(spMatDescr: cusparseConstSpMatDescr_t, rows: [*c]i64, cols: [*c]i64, ellBlockSize: [*c]i64, ellCols: [*c]i64, ellColInd: [*c]?*const anyopaque, ellValue: [*c]?*const anyopaque, ellIdxType: [*c]cusparseIndexType_t, idxBase: [*c]cusparseIndexBase_t, valueType: [*c]cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateSlicedEll(spMatDescr: [*c]cusparseSpMatDescr_t, rows: i64, cols: i64, nnz: i64, sellValuesSize: i64, sliceSize: i64, sellSliceOffsets: ?*anyopaque, sellColInd: ?*anyopaque, sellValues: ?*anyopaque, sellSliceOffsetsType: cusparseIndexType_t, sellColIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateConstSlicedEll(spMatDescr: [*c]cusparseConstSpMatDescr_t, rows: i64, cols: i64, nnz: i64, sellValuesSize: i64, sliceSize: i64, sellSliceOffsets: ?*const anyopaque, sellColInd: ?*const anyopaque, sellValues: ?*const anyopaque, sellSliceOffsetsType: cusparseIndexType_t, sellColIndType: cusparseIndexType_t, idxBase: cusparseIndexBase_t, valueType: cudaDataType) cusparseStatus_t;
pub extern fn cusparseCreateDnMat(dnMatDescr: [*c]cusparseDnMatDescr_t, rows: i64, cols: i64, ld: i64, values: ?*anyopaque, valueType: cudaDataType, order: cusparseOrder_t) cusparseStatus_t;
pub extern fn cusparseCreateConstDnMat(dnMatDescr: [*c]cusparseConstDnMatDescr_t, rows: i64, cols: i64, ld: i64, values: ?*const anyopaque, valueType: cudaDataType, order: cusparseOrder_t) cusparseStatus_t;
pub extern fn cusparseDestroyDnMat(dnMatDescr: cusparseConstDnMatDescr_t) cusparseStatus_t;
pub extern fn cusparseDnMatGet(dnMatDescr: cusparseDnMatDescr_t, rows: [*c]i64, cols: [*c]i64, ld: [*c]i64, values: [*c]?*anyopaque, @"type": [*c]cudaDataType, order: [*c]cusparseOrder_t) cusparseStatus_t;
pub extern fn cusparseConstDnMatGet(dnMatDescr: cusparseConstDnMatDescr_t, rows: [*c]i64, cols: [*c]i64, ld: [*c]i64, values: [*c]?*const anyopaque, @"type": [*c]cudaDataType, order: [*c]cusparseOrder_t) cusparseStatus_t;
pub extern fn cusparseDnMatGetValues(dnMatDescr: cusparseDnMatDescr_t, values: [*c]?*anyopaque) cusparseStatus_t;
pub extern fn cusparseConstDnMatGetValues(dnMatDescr: cusparseConstDnMatDescr_t, values: [*c]?*const anyopaque) cusparseStatus_t;
pub extern fn cusparseDnMatSetValues(dnMatDescr: cusparseDnMatDescr_t, values: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDnMatSetStridedBatch(dnMatDescr: cusparseDnMatDescr_t, batchCount: c_int, batchStride: i64) cusparseStatus_t;
pub extern fn cusparseDnMatGetStridedBatch(dnMatDescr: cusparseConstDnMatDescr_t, batchCount: [*c]c_int, batchStride: [*c]i64) cusparseStatus_t;
pub extern fn cusparseAxpby(handle: cusparseHandle_t, alpha: ?*const anyopaque, vecX: cusparseConstSpVecDescr_t, beta: ?*const anyopaque, vecY: cusparseDnVecDescr_t) cusparseStatus_t;
pub extern fn cusparseGather(handle: cusparseHandle_t, vecY: cusparseConstDnVecDescr_t, vecX: cusparseSpVecDescr_t) cusparseStatus_t;
pub extern fn cusparseScatter(handle: cusparseHandle_t, vecX: cusparseConstSpVecDescr_t, vecY: cusparseDnVecDescr_t) cusparseStatus_t;
pub extern fn cusparseRot(handle: cusparseHandle_t, c_coeff: ?*const anyopaque, s_coeff: ?*const anyopaque, vecX: cusparseSpVecDescr_t, vecY: cusparseDnVecDescr_t) cusparseStatus_t;
pub extern fn cusparseSpVV_bufferSize(handle: cusparseHandle_t, opX: cusparseOperation_t, vecX: cusparseConstSpVecDescr_t, vecY: cusparseConstDnVecDescr_t, result: ?*const anyopaque, computeType: cudaDataType, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpVV(handle: cusparseHandle_t, opX: cusparseOperation_t, vecX: cusparseConstSpVecDescr_t, vecY: cusparseConstDnVecDescr_t, result: ?*anyopaque, computeType: cudaDataType, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub const CUSPARSE_SPARSETODENSE_ALG_DEFAULT: c_int = 0;
pub const cusparseSparseToDenseAlg_t = c_uint;
pub extern fn cusparseSparseToDense_bufferSize(handle: cusparseHandle_t, matA: cusparseConstSpMatDescr_t, matB: cusparseDnMatDescr_t, alg: cusparseSparseToDenseAlg_t, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSparseToDense(handle: cusparseHandle_t, matA: cusparseConstSpMatDescr_t, matB: cusparseDnMatDescr_t, alg: cusparseSparseToDenseAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub const CUSPARSE_DENSETOSPARSE_ALG_DEFAULT: c_int = 0;
pub const cusparseDenseToSparseAlg_t = c_uint;
pub extern fn cusparseDenseToSparse_bufferSize(handle: cusparseHandle_t, matA: cusparseConstDnMatDescr_t, matB: cusparseSpMatDescr_t, alg: cusparseDenseToSparseAlg_t, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseDenseToSparse_analysis(handle: cusparseHandle_t, matA: cusparseConstDnMatDescr_t, matB: cusparseSpMatDescr_t, alg: cusparseDenseToSparseAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseDenseToSparse_convert(handle: cusparseHandle_t, matA: cusparseConstDnMatDescr_t, matB: cusparseSpMatDescr_t, alg: cusparseDenseToSparseAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub const CUSPARSE_SPMV_ALG_DEFAULT: c_int = 0;
pub const CUSPARSE_SPMV_CSR_ALG1: c_int = 2;
pub const CUSPARSE_SPMV_CSR_ALG2: c_int = 3;
pub const CUSPARSE_SPMV_COO_ALG1: c_int = 1;
pub const CUSPARSE_SPMV_COO_ALG2: c_int = 4;
pub const CUSPARSE_SPMV_SELL_ALG1: c_int = 5;
pub const cusparseSpMVAlg_t = c_uint;
pub extern fn cusparseSpMV(handle: cusparseHandle_t, opA: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, vecX: cusparseConstDnVecDescr_t, beta: ?*const anyopaque, vecY: cusparseDnVecDescr_t, computeType: cudaDataType, alg: cusparseSpMVAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpMV_bufferSize(handle: cusparseHandle_t, opA: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, vecX: cusparseConstDnVecDescr_t, beta: ?*const anyopaque, vecY: cusparseDnVecDescr_t, computeType: cudaDataType, alg: cusparseSpMVAlg_t, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpMV_preprocess(handle: cusparseHandle_t, opA: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, vecX: cusparseConstDnVecDescr_t, beta: ?*const anyopaque, vecY: cusparseDnVecDescr_t, computeType: cudaDataType, alg: cusparseSpMVAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub const CUSPARSE_SPSV_ALG_DEFAULT: c_int = 0;
pub const cusparseSpSVAlg_t = c_uint;
pub const CUSPARSE_SPSV_UPDATE_GENERAL: c_int = 0;
pub const CUSPARSE_SPSV_UPDATE_DIAGONAL: c_int = 1;
pub const cusparseSpSVUpdate_t = c_uint;
pub const struct_cusparseSpSVDescr = opaque {};
pub const cusparseSpSVDescr_t = ?*struct_cusparseSpSVDescr;
pub extern fn cusparseSpSV_createDescr(descr: [*c]cusparseSpSVDescr_t) cusparseStatus_t;
pub extern fn cusparseSpSV_destroyDescr(descr: cusparseSpSVDescr_t) cusparseStatus_t;
pub extern fn cusparseSpSV_bufferSize(handle: cusparseHandle_t, opA: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, vecX: cusparseConstDnVecDescr_t, vecY: cusparseDnVecDescr_t, computeType: cudaDataType, alg: cusparseSpSVAlg_t, spsvDescr: cusparseSpSVDescr_t, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpSV_analysis(handle: cusparseHandle_t, opA: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, vecX: cusparseConstDnVecDescr_t, vecY: cusparseDnVecDescr_t, computeType: cudaDataType, alg: cusparseSpSVAlg_t, spsvDescr: cusparseSpSVDescr_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpSV_solve(handle: cusparseHandle_t, opA: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, vecX: cusparseConstDnVecDescr_t, vecY: cusparseDnVecDescr_t, computeType: cudaDataType, alg: cusparseSpSVAlg_t, spsvDescr: cusparseSpSVDescr_t) cusparseStatus_t;
pub extern fn cusparseSpSV_updateMatrix(handle: cusparseHandle_t, spsvDescr: cusparseSpSVDescr_t, newValues: ?*anyopaque, updatePart: cusparseSpSVUpdate_t) cusparseStatus_t;
pub const CUSPARSE_SPSM_ALG_DEFAULT: c_int = 0;
pub const cusparseSpSMAlg_t = c_uint;
pub const CUSPARSE_SPSM_UPDATE_GENERAL: c_int = 0;
pub const CUSPARSE_SPSM_UPDATE_DIAGONAL: c_int = 1;
pub const cusparseSpSMUpdate_t = c_uint;
pub const struct_cusparseSpSMDescr = opaque {};
pub const cusparseSpSMDescr_t = ?*struct_cusparseSpSMDescr;
pub extern fn cusparseSpSM_createDescr(descr: [*c]cusparseSpSMDescr_t) cusparseStatus_t;
pub extern fn cusparseSpSM_destroyDescr(descr: cusparseSpSMDescr_t) cusparseStatus_t;
pub extern fn cusparseSpSM_bufferSize(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstDnMatDescr_t, matC: cusparseDnMatDescr_t, computeType: cudaDataType, alg: cusparseSpSMAlg_t, spsmDescr: cusparseSpSMDescr_t, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpSM_analysis(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstDnMatDescr_t, matC: cusparseDnMatDescr_t, computeType: cudaDataType, alg: cusparseSpSMAlg_t, spsmDescr: cusparseSpSMDescr_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpSM_solve(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstDnMatDescr_t, matC: cusparseDnMatDescr_t, computeType: cudaDataType, alg: cusparseSpSMAlg_t, spsmDescr: cusparseSpSMDescr_t) cusparseStatus_t;
pub extern fn cusparseSpSM_updateMatrix(handle: cusparseHandle_t, spsmDescr: cusparseSpSMDescr_t, newValues: ?*anyopaque, updatePart: cusparseSpSMUpdate_t) cusparseStatus_t;
pub const CUSPARSE_SPMM_ALG_DEFAULT: c_int = 0;
pub const CUSPARSE_SPMM_COO_ALG1: c_int = 1;
pub const CUSPARSE_SPMM_COO_ALG2: c_int = 2;
pub const CUSPARSE_SPMM_COO_ALG3: c_int = 3;
pub const CUSPARSE_SPMM_COO_ALG4: c_int = 5;
pub const CUSPARSE_SPMM_CSR_ALG1: c_int = 4;
pub const CUSPARSE_SPMM_CSR_ALG2: c_int = 6;
pub const CUSPARSE_SPMM_CSR_ALG3: c_int = 12;
pub const CUSPARSE_SPMM_BLOCKED_ELL_ALG1: c_int = 13;
pub const CUSPARSE_SPMM_BSR_ALG1: c_int = 14;
pub const cusparseSpMMAlg_t = c_uint;
pub extern fn cusparseSpMM_bufferSize(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstDnMatDescr_t, beta: ?*const anyopaque, matC: cusparseDnMatDescr_t, computeType: cudaDataType, alg: cusparseSpMMAlg_t, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpMM_preprocess(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstDnMatDescr_t, beta: ?*const anyopaque, matC: cusparseDnMatDescr_t, computeType: cudaDataType, alg: cusparseSpMMAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpMM(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstDnMatDescr_t, beta: ?*const anyopaque, matC: cusparseDnMatDescr_t, computeType: cudaDataType, alg: cusparseSpMMAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub const CUSPARSE_SPGEMM_DEFAULT: c_int = 0;
pub const CUSPARSE_SPGEMM_CSR_ALG_DETERMINITIC: c_int = 1;
pub const CUSPARSE_SPGEMM_CSR_ALG_NONDETERMINITIC: c_int = 2;
pub const CUSPARSE_SPGEMM_ALG1: c_int = 3;
pub const CUSPARSE_SPGEMM_ALG2: c_int = 4;
pub const CUSPARSE_SPGEMM_ALG3: c_int = 5;
pub const cusparseSpGEMMAlg_t = c_uint;
pub const struct_cusparseSpGEMMDescr = opaque {};
pub const cusparseSpGEMMDescr_t = ?*struct_cusparseSpGEMMDescr;
pub extern fn cusparseSpGEMM_createDescr(descr: [*c]cusparseSpGEMMDescr_t) cusparseStatus_t;
pub extern fn cusparseSpGEMM_destroyDescr(descr: cusparseSpGEMMDescr_t) cusparseStatus_t;
pub extern fn cusparseSpGEMM_workEstimation(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t, bufferSize1: [*c]usize, externalBuffer1: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpGEMM_getNumProducts(spgemmDescr: cusparseSpGEMMDescr_t, num_prods: [*c]i64) cusparseStatus_t;
pub extern fn cusparseSpGEMM_estimateMemory(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t, chunk_fraction: f32, bufferSize3: [*c]usize, externalBuffer3: ?*anyopaque, bufferSize2: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpGEMM_compute(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t, bufferSize2: [*c]usize, externalBuffer2: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpGEMM_copy(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t) cusparseStatus_t;
pub extern fn cusparseSpGEMMreuse_workEstimation(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, matC: cusparseSpMatDescr_t, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t, bufferSize1: [*c]usize, externalBuffer1: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpGEMMreuse_nnz(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, matC: cusparseSpMatDescr_t, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t, bufferSize2: [*c]usize, externalBuffer2: ?*anyopaque, bufferSize3: [*c]usize, externalBuffer3: ?*anyopaque, bufferSize4: [*c]usize, externalBuffer4: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpGEMMreuse_copy(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, matC: cusparseSpMatDescr_t, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t, bufferSize5: [*c]usize, externalBuffer5: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpGEMMreuse_compute(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstSpMatDescr_t, matB: cusparseConstSpMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSpGEMMAlg_t, spgemmDescr: cusparseSpGEMMDescr_t) cusparseStatus_t;
pub const CUSPARSE_SDDMM_ALG_DEFAULT: c_int = 0;
pub const cusparseSDDMMAlg_t = c_uint;
pub extern fn cusparseSDDMM_bufferSize(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstDnMatDescr_t, matB: cusparseConstDnMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSDDMMAlg_t, bufferSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSDDMM_preprocess(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstDnMatDescr_t, matB: cusparseConstDnMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSDDMMAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSDDMM(handle: cusparseHandle_t, opA: cusparseOperation_t, opB: cusparseOperation_t, alpha: ?*const anyopaque, matA: cusparseConstDnMatDescr_t, matB: cusparseConstDnMatDescr_t, beta: ?*const anyopaque, matC: cusparseSpMatDescr_t, computeType: cudaDataType, alg: cusparseSDDMMAlg_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub const struct_cusparseSpMMOpPlan = opaque {};
pub const cusparseSpMMOpPlan_t = ?*struct_cusparseSpMMOpPlan;
pub const CUSPARSE_SPMM_OP_ALG_DEFAULT: c_int = 0;
pub const cusparseSpMMOpAlg_t = c_uint;
pub extern fn cusparseSpMMOp_createPlan(handle: cusparseHandle_t, plan: [*c]cusparseSpMMOpPlan_t, opA: cusparseOperation_t, opB: cusparseOperation_t, matA: cusparseConstSpMatDescr_t, matB: cusparseConstDnMatDescr_t, matC: cusparseDnMatDescr_t, computeType: cudaDataType, alg: cusparseSpMMOpAlg_t, addOperationNvvmBuffer: ?*const anyopaque, addOperationBufferSize: usize, mulOperationNvvmBuffer: ?*const anyopaque, mulOperationBufferSize: usize, epilogueNvvmBuffer: ?*const anyopaque, epilogueBufferSize: usize, SpMMWorkspaceSize: [*c]usize) cusparseStatus_t;
pub extern fn cusparseSpMMOp(plan: cusparseSpMMOpPlan_t, externalBuffer: ?*anyopaque) cusparseStatus_t;
pub extern fn cusparseSpMMOp_destroyPlan(plan: cusparseSpMMOpPlan_t) cusparseStatus_t;
pub const struct_cusolverDnContext = opaque {};
pub const cusolverDnHandle_t = ?*struct_cusolverDnContext;
pub const struct_syevjInfo = opaque {};
pub const syevjInfo_t = ?*struct_syevjInfo;
pub const struct_gesvdjInfo = opaque {};
pub const gesvdjInfo_t = ?*struct_gesvdjInfo;
pub const struct_cusolverDnIRSParams = opaque {};
pub const cusolverDnIRSParams_t = ?*struct_cusolverDnIRSParams;
pub const struct_cusolverDnIRSInfos = opaque {};
pub const cusolverDnIRSInfos_t = ?*struct_cusolverDnIRSInfos;
pub const struct_cusolverDnParams = opaque {};
pub const cusolverDnParams_t = ?*struct_cusolverDnParams;
pub const CUSOLVERDN_GETRF: c_int = 0;
pub const CUSOLVERDN_POTRF: c_int = 1;
pub const cusolverDnFunction_t = c_uint;
pub const CUSOLVER_DETERMINISTIC_RESULTS: c_int = 1;
pub const CUSOLVER_ALLOW_NON_DETERMINISTIC_RESULTS: c_int = 2;
pub const cusolverDeterministicMode_t = c_uint;
pub const imaxdiv_t = extern struct {
    quot: intmax_t = @import("std").mem.zeroes(intmax_t),
    rem: intmax_t = @import("std").mem.zeroes(intmax_t),
};
pub extern fn imaxabs(j: intmax_t) intmax_t;
pub extern fn imaxdiv(numer: intmax_t, denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias nptr: [*c]const u8, noalias endptr: [*c][*c]u8, base: c_int) intmax_t;
pub extern fn strtoumax(noalias nptr: [*c]const u8, noalias endptr: [*c][*c]u8, base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias nptr: [*c]const wchar_t, noalias endptr: [*c][*c]wchar_t, base: c_int) intmax_t;
pub extern fn wcstoumax(noalias nptr: [*c]const wchar_t, noalias endptr: [*c][*c]wchar_t, base: c_int) uintmax_t;
pub const cusolver_int_t = c_int;
pub const CUSOLVER_STATUS_SUCCESS: c_int = 0;
pub const CUSOLVER_STATUS_NOT_INITIALIZED: c_int = 1;
pub const CUSOLVER_STATUS_ALLOC_FAILED: c_int = 2;
pub const CUSOLVER_STATUS_INVALID_VALUE: c_int = 3;
pub const CUSOLVER_STATUS_ARCH_MISMATCH: c_int = 4;
pub const CUSOLVER_STATUS_MAPPING_ERROR: c_int = 5;
pub const CUSOLVER_STATUS_EXECUTION_FAILED: c_int = 6;
pub const CUSOLVER_STATUS_INTERNAL_ERROR: c_int = 7;
pub const CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED: c_int = 8;
pub const CUSOLVER_STATUS_NOT_SUPPORTED: c_int = 9;
pub const CUSOLVER_STATUS_ZERO_PIVOT: c_int = 10;
pub const CUSOLVER_STATUS_INVALID_LICENSE: c_int = 11;
pub const CUSOLVER_STATUS_IRS_PARAMS_NOT_INITIALIZED: c_int = 12;
pub const CUSOLVER_STATUS_IRS_PARAMS_INVALID: c_int = 13;
pub const CUSOLVER_STATUS_IRS_PARAMS_INVALID_PREC: c_int = 14;
pub const CUSOLVER_STATUS_IRS_PARAMS_INVALID_REFINE: c_int = 15;
pub const CUSOLVER_STATUS_IRS_PARAMS_INVALID_MAXITER: c_int = 16;
pub const CUSOLVER_STATUS_IRS_INTERNAL_ERROR: c_int = 20;
pub const CUSOLVER_STATUS_IRS_NOT_SUPPORTED: c_int = 21;
pub const CUSOLVER_STATUS_IRS_OUT_OF_RANGE: c_int = 22;
pub const CUSOLVER_STATUS_IRS_NRHS_NOT_SUPPORTED_FOR_REFINE_GMRES: c_int = 23;
pub const CUSOLVER_STATUS_IRS_INFOS_NOT_INITIALIZED: c_int = 25;
pub const CUSOLVER_STATUS_IRS_INFOS_NOT_DESTROYED: c_int = 26;
pub const CUSOLVER_STATUS_IRS_MATRIX_SINGULAR: c_int = 30;
pub const CUSOLVER_STATUS_INVALID_WORKSPACE: c_int = 31;
pub const cusolverStatus_t = c_uint;
pub const CUSOLVER_EIG_TYPE_1: c_int = 1;
pub const CUSOLVER_EIG_TYPE_2: c_int = 2;
pub const CUSOLVER_EIG_TYPE_3: c_int = 3;
pub const cusolverEigType_t = c_uint;
pub const CUSOLVER_EIG_MODE_NOVECTOR: c_int = 0;
pub const CUSOLVER_EIG_MODE_VECTOR: c_int = 1;
pub const cusolverEigMode_t = c_uint;
pub const CUSOLVER_EIG_RANGE_ALL: c_int = 1001;
pub const CUSOLVER_EIG_RANGE_I: c_int = 1002;
pub const CUSOLVER_EIG_RANGE_V: c_int = 1003;
pub const cusolverEigRange_t = c_uint;
pub const CUSOLVER_INF_NORM: c_int = 104;
pub const CUSOLVER_MAX_NORM: c_int = 105;
pub const CUSOLVER_ONE_NORM: c_int = 106;
pub const CUSOLVER_FRO_NORM: c_int = 107;
pub const cusolverNorm_t = c_uint;
pub const CUSOLVER_IRS_REFINE_NOT_SET: c_int = 1100;
pub const CUSOLVER_IRS_REFINE_NONE: c_int = 1101;
pub const CUSOLVER_IRS_REFINE_CLASSICAL: c_int = 1102;
pub const CUSOLVER_IRS_REFINE_CLASSICAL_GMRES: c_int = 1103;
pub const CUSOLVER_IRS_REFINE_GMRES: c_int = 1104;
pub const CUSOLVER_IRS_REFINE_GMRES_GMRES: c_int = 1105;
pub const CUSOLVER_IRS_REFINE_GMRES_NOPCOND: c_int = 1106;
pub const CUSOLVER_PREC_DD: c_int = 1150;
pub const CUSOLVER_PREC_SS: c_int = 1151;
pub const CUSOLVER_PREC_SHT: c_int = 1152;
pub const cusolverIRSRefinement_t = c_uint;
pub const CUSOLVER_R_8I: c_int = 1201;
pub const CUSOLVER_R_8U: c_int = 1202;
pub const CUSOLVER_R_64F: c_int = 1203;
pub const CUSOLVER_R_32F: c_int = 1204;
pub const CUSOLVER_R_16F: c_int = 1205;
pub const CUSOLVER_R_16BF: c_int = 1206;
pub const CUSOLVER_R_TF32: c_int = 1207;
pub const CUSOLVER_R_AP: c_int = 1208;
pub const CUSOLVER_C_8I: c_int = 1211;
pub const CUSOLVER_C_8U: c_int = 1212;
pub const CUSOLVER_C_64F: c_int = 1213;
pub const CUSOLVER_C_32F: c_int = 1214;
pub const CUSOLVER_C_16F: c_int = 1215;
pub const CUSOLVER_C_16BF: c_int = 1216;
pub const CUSOLVER_C_TF32: c_int = 1217;
pub const CUSOLVER_C_AP: c_int = 1218;
pub const cusolverPrecType_t = c_uint;
pub const CUSOLVER_ALG_0: c_int = 0;
pub const CUSOLVER_ALG_1: c_int = 1;
pub const CUSOLVER_ALG_2: c_int = 2;
pub const cusolverAlgMode_t = c_uint;
pub const CUBLAS_STOREV_COLUMNWISE: c_int = 0;
pub const CUBLAS_STOREV_ROWWISE: c_int = 1;
pub const cusolverStorevMode_t = c_uint;
pub const CUBLAS_DIRECT_FORWARD: c_int = 0;
pub const CUBLAS_DIRECT_BACKWARD: c_int = 1;
pub const cusolverDirectMode_t = c_uint;
pub extern fn cusolverGetProperty(@"type": libraryPropertyType, value: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverGetVersion(version: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCreate(handle: [*c]cusolverDnHandle_t) cusolverStatus_t;
pub extern fn cusolverDnDestroy(handle: cusolverDnHandle_t) cusolverStatus_t;
pub extern fn cusolverDnSetStream(handle: cusolverDnHandle_t, streamId: cudaStream_t) cusolverStatus_t;
pub extern fn cusolverDnGetStream(handle: cusolverDnHandle_t, streamId: [*c]cudaStream_t) cusolverStatus_t;
pub extern fn cusolverDnSetDeterministicMode(handle: cusolverDnHandle_t, mode: cusolverDeterministicMode_t) cusolverStatus_t;
pub extern fn cusolverDnGetDeterministicMode(handle: cusolverDnHandle_t, mode: [*c]cusolverDeterministicMode_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsCreate(params_ptr: [*c]cusolverDnIRSParams_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsDestroy(params: cusolverDnIRSParams_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetRefinementSolver(params: cusolverDnIRSParams_t, refinement_solver: cusolverIRSRefinement_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetSolverMainPrecision(params: cusolverDnIRSParams_t, solver_main_precision: cusolverPrecType_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetSolverLowestPrecision(params: cusolverDnIRSParams_t, solver_lowest_precision: cusolverPrecType_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetSolverPrecisions(params: cusolverDnIRSParams_t, solver_main_precision: cusolverPrecType_t, solver_lowest_precision: cusolverPrecType_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetTol(params: cusolverDnIRSParams_t, val: f64) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetTolInner(params: cusolverDnIRSParams_t, val: f64) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetMaxIters(params: cusolverDnIRSParams_t, maxiters: cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsSetMaxItersInner(params: cusolverDnIRSParams_t, maxiters_inner: cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsGetMaxIters(params: cusolverDnIRSParams_t, maxiters: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsEnableFallback(params: cusolverDnIRSParams_t) cusolverStatus_t;
pub extern fn cusolverDnIRSParamsDisableFallback(params: cusolverDnIRSParams_t) cusolverStatus_t;
pub extern fn cusolverDnIRSInfosDestroy(infos: cusolverDnIRSInfos_t) cusolverStatus_t;
pub extern fn cusolverDnIRSInfosCreate(infos_ptr: [*c]cusolverDnIRSInfos_t) cusolverStatus_t;
pub extern fn cusolverDnIRSInfosGetNiters(infos: cusolverDnIRSInfos_t, niters: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnIRSInfosGetOuterNiters(infos: cusolverDnIRSInfos_t, outer_niters: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnIRSInfosRequestResidual(infos: cusolverDnIRSInfos_t) cusolverStatus_t;
pub extern fn cusolverDnIRSInfosGetResidualHistory(infos: cusolverDnIRSInfos_t, residual_history: [*c]?*anyopaque) cusolverStatus_t;
pub extern fn cusolverDnIRSInfosGetMaxIters(infos: cusolverDnIRSInfos_t, maxiters: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZZgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZCgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZKgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZEgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZYgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCCgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCEgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCKgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCYgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDDgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDSgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDHgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDBgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDXgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSSgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSHgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSBgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSXgesv(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZZgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZCgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZKgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZEgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZYgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCCgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCKgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCEgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCYgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDDgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDSgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDHgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDBgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDXgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSSgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSHgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSBgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSXgesv_bufferSize(handle: cusolverDnHandle_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dipiv: [*c]cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZZgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZCgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZKgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZEgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZYgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCCgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCKgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCEgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnCYgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDDgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDSgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDHgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDBgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnDXgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSSgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSHgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSBgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnSXgels(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, iter: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnZZgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZCgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZKgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZEgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnZYgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuDoubleComplex, ldda: cusolver_int_t, dB: [*c]cuDoubleComplex, lddb: cusolver_int_t, dX: [*c]cuDoubleComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCCgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCKgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCEgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnCYgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]cuComplex, ldda: cusolver_int_t, dB: [*c]cuComplex, lddb: cusolver_int_t, dX: [*c]cuComplex, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDDgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDSgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDHgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDBgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnDXgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f64, ldda: cusolver_int_t, dB: [*c]f64, lddb: cusolver_int_t, dX: [*c]f64, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSSgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSHgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSBgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSXgels_bufferSize(handle: cusolverDnHandle_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: [*c]f32, ldda: cusolver_int_t, dB: [*c]f32, lddb: cusolver_int_t, dX: [*c]f32, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnIRSXgesv(handle: cusolverDnHandle_t, gesv_irs_params: cusolverDnIRSParams_t, gesv_irs_infos: cusolverDnIRSInfos_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: ?*anyopaque, ldda: cusolver_int_t, dB: ?*anyopaque, lddb: cusolver_int_t, dX: ?*anyopaque, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, niters: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnIRSXgesv_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnIRSParams_t, n: cusolver_int_t, nrhs: cusolver_int_t, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnIRSXgels(handle: cusolverDnHandle_t, gels_irs_params: cusolverDnIRSParams_t, gels_irs_infos: cusolverDnIRSInfos_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, dA: ?*anyopaque, ldda: cusolver_int_t, dB: ?*anyopaque, lddb: cusolver_int_t, dX: ?*anyopaque, lddx: cusolver_int_t, dWorkspace: ?*anyopaque, lwork_bytes: usize, niters: [*c]cusolver_int_t, d_info: [*c]cusolver_int_t) cusolverStatus_t;
pub extern fn cusolverDnIRSXgels_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnIRSParams_t, m: cusolver_int_t, n: cusolver_int_t, nrhs: cusolver_int_t, lwork_bytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSpotrf_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDpotrf_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCpotrf_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZpotrf_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSpotrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, Workspace: [*c]f32, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDpotrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, Workspace: [*c]f64, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCpotrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, Workspace: [*c]cuComplex, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZpotrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, Workspace: [*c]cuDoubleComplex, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSpotrs(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c]const f32, lda: c_int, B: [*c]f32, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDpotrs(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c]const f64, lda: c_int, B: [*c]f64, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCpotrs(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c]const cuComplex, lda: c_int, B: [*c]cuComplex, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZpotrs(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]cuDoubleComplex, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSpotrfBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, Aarray: [*c][*c]f32, lda: c_int, infoArray: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDpotrfBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, Aarray: [*c][*c]f64, lda: c_int, infoArray: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCpotrfBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, Aarray: [*c][*c]cuComplex, lda: c_int, infoArray: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZpotrfBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, Aarray: [*c][*c]cuDoubleComplex, lda: c_int, infoArray: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnSpotrsBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c][*c]f32, lda: c_int, B: [*c][*c]f32, ldb: c_int, d_info: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDpotrsBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c][*c]f64, lda: c_int, B: [*c][*c]f64, ldb: c_int, d_info: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCpotrsBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c][*c]cuComplex, lda: c_int, B: [*c][*c]cuComplex, ldb: c_int, d_info: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZpotrsBatched(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, A: [*c][*c]cuDoubleComplex, lda: c_int, B: [*c][*c]cuDoubleComplex, ldb: c_int, d_info: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnSpotri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDpotri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCpotri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZpotri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSpotri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, work: [*c]f32, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDpotri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, work: [*c]f64, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCpotri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, work: [*c]cuComplex, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZpotri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, work: [*c]cuDoubleComplex, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXtrtri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, diag: cublasDiagType_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXtrtri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, diag: cublasDiagType_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSlauum_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDlauum_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnClauum_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZlauum_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSlauum(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, work: [*c]f32, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDlauum(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, work: [*c]f64, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnClauum(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, work: [*c]cuComplex, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZlauum(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, work: [*c]cuDoubleComplex, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgetrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f32, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgetrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f64, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgetrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgetrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgetrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f32, lda: c_int, Workspace: [*c]f32, devIpiv: [*c]c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgetrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f64, lda: c_int, Workspace: [*c]f64, devIpiv: [*c]c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgetrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, Workspace: [*c]cuComplex, devIpiv: [*c]c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgetrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, Workspace: [*c]cuDoubleComplex, devIpiv: [*c]c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSlaswp(handle: cusolverDnHandle_t, n: c_int, A: [*c]f32, lda: c_int, k1: c_int, k2: c_int, devIpiv: [*c]const c_int, incx: c_int) cusolverStatus_t;
pub extern fn cusolverDnDlaswp(handle: cusolverDnHandle_t, n: c_int, A: [*c]f64, lda: c_int, k1: c_int, k2: c_int, devIpiv: [*c]const c_int, incx: c_int) cusolverStatus_t;
pub extern fn cusolverDnClaswp(handle: cusolverDnHandle_t, n: c_int, A: [*c]cuComplex, lda: c_int, k1: c_int, k2: c_int, devIpiv: [*c]const c_int, incx: c_int) cusolverStatus_t;
pub extern fn cusolverDnZlaswp(handle: cusolverDnHandle_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, k1: c_int, k2: c_int, devIpiv: [*c]const c_int, incx: c_int) cusolverStatus_t;
pub extern fn cusolverDnSgetrs(handle: cusolverDnHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, A: [*c]const f32, lda: c_int, devIpiv: [*c]const c_int, B: [*c]f32, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgetrs(handle: cusolverDnHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, A: [*c]const f64, lda: c_int, devIpiv: [*c]const c_int, B: [*c]f64, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgetrs(handle: cusolverDnHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, A: [*c]const cuComplex, lda: c_int, devIpiv: [*c]const c_int, B: [*c]cuComplex, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgetrs(handle: cusolverDnHandle_t, trans: cublasOperation_t, n: c_int, nrhs: c_int, A: [*c]const cuDoubleComplex, lda: c_int, devIpiv: [*c]const c_int, B: [*c]cuDoubleComplex, ldb: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgeqrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f32, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgeqrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f64, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgeqrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgeqrf_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgeqrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f32, lda: c_int, TAU: [*c]f32, Workspace: [*c]f32, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgeqrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f64, lda: c_int, TAU: [*c]f64, Workspace: [*c]f64, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgeqrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, TAU: [*c]cuComplex, Workspace: [*c]cuComplex, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgeqrf(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, TAU: [*c]cuDoubleComplex, Workspace: [*c]cuDoubleComplex, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSorgqr_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]const f32, lda: c_int, tau: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDorgqr_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]const f64, lda: c_int, tau: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCungqr_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuComplex, lda: c_int, tau: [*c]const cuComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZungqr_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSorgqr(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]f32, lda: c_int, tau: [*c]const f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDorgqr(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]f64, lda: c_int, tau: [*c]const f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCungqr(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]cuComplex, lda: c_int, tau: [*c]const cuComplex, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZungqr(handle: cusolverDnHandle_t, m: c_int, n: c_int, k: c_int, A: [*c]cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSormqr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const f32, lda: c_int, tau: [*c]const f32, C: [*c]const f32, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDormqr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const f64, lda: c_int, tau: [*c]const f64, C: [*c]const f64, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCunmqr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuComplex, lda: c_int, tau: [*c]const cuComplex, C: [*c]const cuComplex, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZunmqr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, C: [*c]const cuDoubleComplex, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSormqr(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const f32, lda: c_int, tau: [*c]const f32, C: [*c]f32, ldc: c_int, work: [*c]f32, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDormqr(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const f64, lda: c_int, tau: [*c]const f64, C: [*c]f64, ldc: c_int, work: [*c]f64, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCunmqr(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuComplex, lda: c_int, tau: [*c]const cuComplex, C: [*c]cuComplex, ldc: c_int, work: [*c]cuComplex, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZunmqr(handle: cusolverDnHandle_t, side: cublasSideMode_t, trans: cublasOperation_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int, work: [*c]cuDoubleComplex, lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsytrf_bufferSize(handle: cusolverDnHandle_t, n: c_int, A: [*c]f32, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsytrf_bufferSize(handle: cusolverDnHandle_t, n: c_int, A: [*c]f64, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCsytrf_bufferSize(handle: cusolverDnHandle_t, n: c_int, A: [*c]cuComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZsytrf_bufferSize(handle: cusolverDnHandle_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsytrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, ipiv: [*c]c_int, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsytrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, ipiv: [*c]c_int, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCsytrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, ipiv: [*c]c_int, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZsytrf(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, ipiv: [*c]c_int, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXsytrs_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: i64, nrhs: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, ipiv: [*c]const i64, dataTypeB: cudaDataType, B: ?*anyopaque, ldb: i64, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXsytrs(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: i64, nrhs: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, ipiv: [*c]const i64, dataTypeB: cudaDataType, B: ?*anyopaque, ldb: i64, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsytri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, ipiv: [*c]const c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsytri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, ipiv: [*c]const c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCsytri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, ipiv: [*c]const c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZsytri_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, ipiv: [*c]const c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsytri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, ipiv: [*c]const c_int, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsytri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, ipiv: [*c]const c_int, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCsytri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, ipiv: [*c]const c_int, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZsytri(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, ipiv: [*c]const c_int, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgebrd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgebrd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgebrd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgebrd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, Lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgebrd(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f32, lda: c_int, D: [*c]f32, E: [*c]f32, TAUQ: [*c]f32, TAUP: [*c]f32, Work: [*c]f32, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgebrd(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]f64, lda: c_int, D: [*c]f64, E: [*c]f64, TAUQ: [*c]f64, TAUP: [*c]f64, Work: [*c]f64, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgebrd(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, D: [*c]f32, E: [*c]f32, TAUQ: [*c]cuComplex, TAUP: [*c]cuComplex, Work: [*c]cuComplex, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgebrd(handle: cusolverDnHandle_t, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, D: [*c]f64, E: [*c]f64, TAUQ: [*c]cuDoubleComplex, TAUP: [*c]cuDoubleComplex, Work: [*c]cuDoubleComplex, Lwork: c_int, devInfo: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSorgbr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]const f32, lda: c_int, tau: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDorgbr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]const f64, lda: c_int, tau: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCungbr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuComplex, lda: c_int, tau: [*c]const cuComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZungbr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]const cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSorgbr(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]f32, lda: c_int, tau: [*c]const f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDorgbr(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]f64, lda: c_int, tau: [*c]const f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCungbr(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]cuComplex, lda: c_int, tau: [*c]const cuComplex, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZungbr(handle: cusolverDnHandle_t, side: cublasSideMode_t, m: c_int, n: c_int, k: c_int, A: [*c]cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsytrd_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, d: [*c]const f32, e: [*c]const f32, tau: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsytrd_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, d: [*c]const f64, e: [*c]const f64, tau: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnChetrd_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, d: [*c]const f32, e: [*c]const f32, tau: [*c]const cuComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZhetrd_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, d: [*c]const f64, e: [*c]const f64, tau: [*c]const cuDoubleComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsytrd(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, d: [*c]f32, e: [*c]f32, tau: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsytrd(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, d: [*c]f64, e: [*c]f64, tau: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnChetrd(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, d: [*c]f32, e: [*c]f32, tau: [*c]cuComplex, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZhetrd(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, d: [*c]f64, e: [*c]f64, tau: [*c]cuDoubleComplex, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSorgtr_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, tau: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDorgtr_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, tau: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCungtr_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, tau: [*c]const cuComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZungtr_bufferSize(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSorgtr(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, tau: [*c]const f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDorgtr(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, tau: [*c]const f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCungtr(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, tau: [*c]const cuComplex, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZungtr(handle: cusolverDnHandle_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSormtr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, tau: [*c]const f32, C: [*c]const f32, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDormtr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, tau: [*c]const f64, C: [*c]const f64, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCunmtr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]const cuComplex, lda: c_int, tau: [*c]const cuComplex, C: [*c]const cuComplex, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZunmtr_bufferSize(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, tau: [*c]const cuDoubleComplex, C: [*c]const cuDoubleComplex, ldc: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSormtr(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]f32, lda: c_int, tau: [*c]f32, C: [*c]f32, ldc: c_int, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDormtr(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]f64, lda: c_int, tau: [*c]f64, C: [*c]f64, ldc: c_int, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCunmtr(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, tau: [*c]cuComplex, C: [*c]cuComplex, ldc: c_int, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZunmtr(handle: cusolverDnHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, tau: [*c]cuDoubleComplex, C: [*c]cuDoubleComplex, ldc: c_int, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgesvd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgesvd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgesvd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgesvd_bufferSize(handle: cusolverDnHandle_t, m: c_int, n: c_int, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgesvd(handle: cusolverDnHandle_t, jobu: i8, jobvt: i8, m: c_int, n: c_int, A: [*c]f32, lda: c_int, S: [*c]f32, U: [*c]f32, ldu: c_int, VT: [*c]f32, ldvt: c_int, work: [*c]f32, lwork: c_int, rwork: [*c]f32, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDgesvd(handle: cusolverDnHandle_t, jobu: i8, jobvt: i8, m: c_int, n: c_int, A: [*c]f64, lda: c_int, S: [*c]f64, U: [*c]f64, ldu: c_int, VT: [*c]f64, ldvt: c_int, work: [*c]f64, lwork: c_int, rwork: [*c]f64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCgesvd(handle: cusolverDnHandle_t, jobu: i8, jobvt: i8, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, S: [*c]f32, U: [*c]cuComplex, ldu: c_int, VT: [*c]cuComplex, ldvt: c_int, work: [*c]cuComplex, lwork: c_int, rwork: [*c]f32, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZgesvd(handle: cusolverDnHandle_t, jobu: i8, jobvt: i8, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, S: [*c]f64, U: [*c]cuDoubleComplex, ldu: c_int, VT: [*c]cuDoubleComplex, ldvt: c_int, work: [*c]cuDoubleComplex, lwork: c_int, rwork: [*c]f64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsyevd_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsyevd_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCheevd_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZheevd_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsyevd(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, W: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsyevd(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, W: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCheevd(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, W: [*c]f32, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZheevd(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, W: [*c]f64, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsyevdx_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsyevdx_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCheevdx_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZheevdx_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsyevdx(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsyevdx(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCheevdx(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f32, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZheevdx(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f64, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsygvdx_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsygvdx_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnChegvdx_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZhegvdx_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsygvdx(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, B: [*c]f32, ldb: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsygvdx(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, B: [*c]f64, ldb: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnChegvdx(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, B: [*c]cuComplex, ldb: c_int, vl: f32, vu: f32, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f32, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZhegvdx(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, B: [*c]cuDoubleComplex, ldb: c_int, vl: f64, vu: f64, il: c_int, iu: c_int, meig: [*c]c_int, W: [*c]f64, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsygvd_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsygvd_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnChegvd_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, W: [*c]const f32, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZhegvd_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, W: [*c]const f64, lwork: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsygvd(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, B: [*c]f32, ldb: c_int, W: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnDsygvd(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, B: [*c]f64, ldb: c_int, W: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnChegvd(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, B: [*c]cuComplex, ldb: c_int, W: [*c]f32, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnZhegvd(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, B: [*c]cuDoubleComplex, ldb: c_int, W: [*c]f64, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnCreateSyevjInfo(info: [*c]syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDestroySyevjInfo(info: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnXsyevjSetTolerance(info: syevjInfo_t, tolerance: f64) cusolverStatus_t;
pub extern fn cusolverDnXsyevjSetMaxSweeps(info: syevjInfo_t, max_sweeps: c_int) cusolverStatus_t;
pub extern fn cusolverDnXsyevjSetSortEig(info: syevjInfo_t, sort_eig: c_int) cusolverStatus_t;
pub extern fn cusolverDnXsyevjGetResidual(handle: cusolverDnHandle_t, info: syevjInfo_t, residual: [*c]f64) cusolverStatus_t;
pub extern fn cusolverDnXsyevjGetSweeps(handle: cusolverDnHandle_t, info: syevjInfo_t, executed_sweeps: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSsyevjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, W: [*c]const f32, lwork: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDsyevjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, W: [*c]const f64, lwork: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCheevjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, W: [*c]const f32, lwork: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZheevjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, W: [*c]const f64, lwork: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnSsyevjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, W: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDsyevjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, W: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCheevjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, W: [*c]f32, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZheevjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, W: [*c]f64, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int, params: syevjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnSsyevj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, W: [*c]const f32, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDsyevj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, W: [*c]const f64, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnCheevj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, W: [*c]const f32, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnZheevj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, W: [*c]const f64, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnSsyevj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, W: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDsyevj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, W: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnCheevj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, W: [*c]f32, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnZheevj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, W: [*c]f64, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnSsygvj_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f32, lda: c_int, B: [*c]const f32, ldb: c_int, W: [*c]const f32, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDsygvj_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const f64, lda: c_int, B: [*c]const f64, ldb: c_int, W: [*c]const f64, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnChegvj_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuComplex, lda: c_int, B: [*c]const cuComplex, ldb: c_int, W: [*c]const f32, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnZhegvj_bufferSize(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, B: [*c]const cuDoubleComplex, ldb: c_int, W: [*c]const f64, lwork: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnSsygvj(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f32, lda: c_int, B: [*c]f32, ldb: c_int, W: [*c]f32, work: [*c]f32, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDsygvj(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]f64, lda: c_int, B: [*c]f64, ldb: c_int, W: [*c]f64, work: [*c]f64, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnChegvj(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuComplex, lda: c_int, B: [*c]cuComplex, ldb: c_int, W: [*c]f32, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnZhegvj(handle: cusolverDnHandle_t, itype: cusolverEigType_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, B: [*c]cuDoubleComplex, ldb: c_int, W: [*c]f64, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int, params: syevjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnCreateGesvdjInfo(info: [*c]gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDestroyGesvdjInfo(info: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnXgesvdjSetTolerance(info: gesvdjInfo_t, tolerance: f64) cusolverStatus_t;
pub extern fn cusolverDnXgesvdjSetMaxSweeps(info: gesvdjInfo_t, max_sweeps: c_int) cusolverStatus_t;
pub extern fn cusolverDnXgesvdjSetSortEig(info: gesvdjInfo_t, sort_svd: c_int) cusolverStatus_t;
pub extern fn cusolverDnXgesvdjGetResidual(handle: cusolverDnHandle_t, info: gesvdjInfo_t, residual: [*c]f64) cusolverStatus_t;
pub extern fn cusolverDnXgesvdjGetSweeps(handle: cusolverDnHandle_t, info: gesvdjInfo_t, executed_sweeps: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSgesvdjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, S: [*c]const f32, U: [*c]const f32, ldu: c_int, V: [*c]const f32, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDgesvdjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, S: [*c]const f64, U: [*c]const f64, ldu: c_int, V: [*c]const f64, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCgesvdjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]const cuComplex, lda: c_int, S: [*c]const f32, U: [*c]const cuComplex, ldu: c_int, V: [*c]const cuComplex, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZgesvdjBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, S: [*c]const f64, U: [*c]const cuDoubleComplex, ldu: c_int, V: [*c]const cuDoubleComplex, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnSgesvdjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]f32, lda: c_int, S: [*c]f32, U: [*c]f32, ldu: c_int, V: [*c]f32, ldv: c_int, work: [*c]f32, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDgesvdjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]f64, lda: c_int, S: [*c]f64, U: [*c]f64, ldu: c_int, V: [*c]f64, ldv: c_int, work: [*c]f64, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCgesvdjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, S: [*c]f32, U: [*c]cuComplex, ldu: c_int, V: [*c]cuComplex, ldv: c_int, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZgesvdjBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, S: [*c]f64, U: [*c]cuDoubleComplex, ldu: c_int, V: [*c]cuDoubleComplex, ldv: c_int, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnSgesvdj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]const f32, lda: c_int, S: [*c]const f32, U: [*c]const f32, ldu: c_int, V: [*c]const f32, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDgesvdj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]const f64, lda: c_int, S: [*c]const f64, U: [*c]const f64, ldu: c_int, V: [*c]const f64, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnCgesvdj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]const cuComplex, lda: c_int, S: [*c]const f32, U: [*c]const cuComplex, ldu: c_int, V: [*c]const cuComplex, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnZgesvdj_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]const cuDoubleComplex, lda: c_int, S: [*c]const f64, U: [*c]const cuDoubleComplex, ldu: c_int, V: [*c]const cuDoubleComplex, ldv: c_int, lwork: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnSgesvdj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]f32, lda: c_int, S: [*c]f32, U: [*c]f32, ldu: c_int, V: [*c]f32, ldv: c_int, work: [*c]f32, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnDgesvdj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]f64, lda: c_int, S: [*c]f64, U: [*c]f64, ldu: c_int, V: [*c]f64, ldv: c_int, work: [*c]f64, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnCgesvdj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]cuComplex, lda: c_int, S: [*c]f32, U: [*c]cuComplex, ldu: c_int, V: [*c]cuComplex, ldv: c_int, work: [*c]cuComplex, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnZgesvdj(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, econ: c_int, m: c_int, n: c_int, A: [*c]cuDoubleComplex, lda: c_int, S: [*c]f64, U: [*c]cuDoubleComplex, ldu: c_int, V: [*c]cuDoubleComplex, ldv: c_int, work: [*c]cuDoubleComplex, lwork: c_int, info: [*c]c_int, params: gesvdjInfo_t) cusolverStatus_t;
pub extern fn cusolverDnSgesvdaStridedBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const f32, lda: c_int, strideA: c_longlong, d_S: [*c]const f32, strideS: c_longlong, d_U: [*c]const f32, ldu: c_int, strideU: c_longlong, d_V: [*c]const f32, ldv: c_int, strideV: c_longlong, lwork: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDgesvdaStridedBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const f64, lda: c_int, strideA: c_longlong, d_S: [*c]const f64, strideS: c_longlong, d_U: [*c]const f64, ldu: c_int, strideU: c_longlong, d_V: [*c]const f64, ldv: c_int, strideV: c_longlong, lwork: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCgesvdaStridedBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const cuComplex, lda: c_int, strideA: c_longlong, d_S: [*c]const f32, strideS: c_longlong, d_U: [*c]const cuComplex, ldu: c_int, strideU: c_longlong, d_V: [*c]const cuComplex, ldv: c_int, strideV: c_longlong, lwork: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZgesvdaStridedBatched_bufferSize(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const cuDoubleComplex, lda: c_int, strideA: c_longlong, d_S: [*c]const f64, strideS: c_longlong, d_U: [*c]const cuDoubleComplex, ldu: c_int, strideU: c_longlong, d_V: [*c]const cuDoubleComplex, ldv: c_int, strideV: c_longlong, lwork: [*c]c_int, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnSgesvdaStridedBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const f32, lda: c_int, strideA: c_longlong, d_S: [*c]f32, strideS: c_longlong, d_U: [*c]f32, ldu: c_int, strideU: c_longlong, d_V: [*c]f32, ldv: c_int, strideV: c_longlong, d_work: [*c]f32, lwork: c_int, d_info: [*c]c_int, h_R_nrmF: [*c]f64, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnDgesvdaStridedBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const f64, lda: c_int, strideA: c_longlong, d_S: [*c]f64, strideS: c_longlong, d_U: [*c]f64, ldu: c_int, strideU: c_longlong, d_V: [*c]f64, ldv: c_int, strideV: c_longlong, d_work: [*c]f64, lwork: c_int, d_info: [*c]c_int, h_R_nrmF: [*c]f64, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCgesvdaStridedBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const cuComplex, lda: c_int, strideA: c_longlong, d_S: [*c]f32, strideS: c_longlong, d_U: [*c]cuComplex, ldu: c_int, strideU: c_longlong, d_V: [*c]cuComplex, ldv: c_int, strideV: c_longlong, d_work: [*c]cuComplex, lwork: c_int, d_info: [*c]c_int, h_R_nrmF: [*c]f64, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnZgesvdaStridedBatched(handle: cusolverDnHandle_t, jobz: cusolverEigMode_t, rank: c_int, m: c_int, n: c_int, d_A: [*c]const cuDoubleComplex, lda: c_int, strideA: c_longlong, d_S: [*c]f64, strideS: c_longlong, d_U: [*c]cuDoubleComplex, ldu: c_int, strideU: c_longlong, d_V: [*c]cuDoubleComplex, ldv: c_int, strideV: c_longlong, d_work: [*c]cuDoubleComplex, lwork: c_int, d_info: [*c]c_int, h_R_nrmF: [*c]f64, batchSize: c_int) cusolverStatus_t;
pub extern fn cusolverDnCreateParams(params: [*c]cusolverDnParams_t) cusolverStatus_t;
pub extern fn cusolverDnDestroyParams(params: cusolverDnParams_t) cusolverStatus_t;
pub extern fn cusolverDnSetAdvOptions(params: cusolverDnParams_t, function: cusolverDnFunction_t, algo: cusolverAlgMode_t) cusolverStatus_t;
pub extern fn cusolverDnPotrf_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, computeType: cudaDataType, workspaceInBytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnPotrf(handle: cusolverDnHandle_t, params: cusolverDnParams_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, computeType: cudaDataType, pBuffer: ?*anyopaque, workspaceInBytes: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnPotrs(handle: cusolverDnHandle_t, params: cusolverDnParams_t, uplo: cublasFillMode_t, n: i64, nrhs: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeB: cudaDataType, B: ?*anyopaque, ldb: i64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnGeqrf_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeTau: cudaDataType, tau: ?*const anyopaque, computeType: cudaDataType, workspaceInBytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnGeqrf(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeTau: cudaDataType, tau: ?*anyopaque, computeType: cudaDataType, pBuffer: ?*anyopaque, workspaceInBytes: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnGetrf_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, computeType: cudaDataType, workspaceInBytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnGetrf(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, ipiv: [*c]i64, computeType: cudaDataType, pBuffer: ?*anyopaque, workspaceInBytes: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnGetrs(handle: cusolverDnHandle_t, params: cusolverDnParams_t, trans: cublasOperation_t, n: i64, nrhs: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, ipiv: [*c]const i64, dataTypeB: cudaDataType, B: ?*anyopaque, ldb: i64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSyevd_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*const anyopaque, computeType: cudaDataType, workspaceInBytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSyevd(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*anyopaque, computeType: cudaDataType, pBuffer: ?*anyopaque, workspaceInBytes: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnSyevdx_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, vl: ?*anyopaque, vu: ?*anyopaque, il: i64, iu: i64, h_meig: [*c]i64, dataTypeW: cudaDataType, W: ?*const anyopaque, computeType: cudaDataType, workspaceInBytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnSyevdx(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, vl: ?*anyopaque, vu: ?*anyopaque, il: i64, iu: i64, meig64: [*c]i64, dataTypeW: cudaDataType, W: ?*anyopaque, computeType: cudaDataType, pBuffer: ?*anyopaque, workspaceInBytes: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnGesvd_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobu: i8, jobvt: i8, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeS: cudaDataType, S: ?*const anyopaque, dataTypeU: cudaDataType, U: ?*const anyopaque, ldu: i64, dataTypeVT: cudaDataType, VT: ?*const anyopaque, ldvt: i64, computeType: cudaDataType, workspaceInBytes: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnGesvd(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobu: i8, jobvt: i8, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeS: cudaDataType, S: ?*anyopaque, dataTypeU: cudaDataType, U: ?*anyopaque, ldu: i64, dataTypeVT: cudaDataType, VT: ?*anyopaque, ldvt: i64, computeType: cudaDataType, pBuffer: ?*anyopaque, workspaceInBytes: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXpotrf_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXpotrf(handle: cusolverDnHandle_t, params: cusolverDnParams_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXpotrs(handle: cusolverDnHandle_t, params: cusolverDnParams_t, uplo: cublasFillMode_t, n: i64, nrhs: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeB: cudaDataType, B: ?*anyopaque, ldb: i64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXgeqrf_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeTau: cudaDataType, tau: ?*const anyopaque, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXgeqrf(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeTau: cudaDataType, tau: ?*anyopaque, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXgetrf_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXgetrf(handle: cusolverDnHandle_t, params: cusolverDnParams_t, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, ipiv: [*c]i64, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXgetrs(handle: cusolverDnHandle_t, params: cusolverDnParams_t, trans: cublasOperation_t, n: i64, nrhs: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, ipiv: [*c]const i64, dataTypeB: cudaDataType, B: ?*anyopaque, ldb: i64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXsyevd_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*const anyopaque, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXsyevd(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*anyopaque, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXsyevBatched_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*const anyopaque, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize, batchSize: i64) cusolverStatus_t;
pub extern fn cusolverDnXsyevBatched(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*anyopaque, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int, batchSize: i64) cusolverStatus_t;
pub extern fn cusolverDnXsyevdx_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, vl: ?*anyopaque, vu: ?*anyopaque, il: i64, iu: i64, h_meig: [*c]i64, dataTypeW: cudaDataType, W: ?*const anyopaque, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXsyevdx(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, range: cusolverEigRange_t, uplo: cublasFillMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, vl: ?*anyopaque, vu: ?*anyopaque, il: i64, iu: i64, meig64: [*c]i64, dataTypeW: cudaDataType, W: ?*anyopaque, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXgeev_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobvl: cusolverEigMode_t, jobvr: cusolverEigMode_t, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*const anyopaque, dataTypeVL: cudaDataType, VL: ?*const anyopaque, ldvl: i64, dataTypeVR: cudaDataType, VR: ?*const anyopaque, ldvr: i64, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXgeev(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobvl: cusolverEigMode_t, jobvr: cusolverEigMode_t, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeW: cudaDataType, W: ?*anyopaque, dataTypeVL: cudaDataType, VL: ?*anyopaque, ldvl: i64, dataTypeVR: cudaDataType, VR: ?*anyopaque, ldvr: i64, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXgesvd_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobu: i8, jobvt: i8, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeS: cudaDataType, S: ?*const anyopaque, dataTypeU: cudaDataType, U: ?*const anyopaque, ldu: i64, dataTypeVT: cudaDataType, VT: ?*const anyopaque, ldvt: i64, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXgesvd(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobu: i8, jobvt: i8, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeS: cudaDataType, S: ?*anyopaque, dataTypeU: cudaDataType, U: ?*anyopaque, ldu: i64, dataTypeVT: cudaDataType, VT: ?*anyopaque, ldvt: i64, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXgesvdp_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, econ: c_int, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeS: cudaDataType, S: ?*const anyopaque, dataTypeU: cudaDataType, U: ?*const anyopaque, ldu: i64, dataTypeV: cudaDataType, V: ?*const anyopaque, ldv: i64, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXgesvdp(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobz: cusolverEigMode_t, econ: c_int, m: i64, n: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeS: cudaDataType, S: ?*anyopaque, dataTypeU: cudaDataType, U: ?*anyopaque, ldu: i64, dataTypeV: cudaDataType, V: ?*anyopaque, ldv: i64, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, d_info: [*c]c_int, h_err_sigma: [*c]f64) cusolverStatus_t;
pub extern fn cusolverDnXgesvdr_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobu: i8, jobv: i8, m: i64, n: i64, k: i64, p: i64, niters: i64, dataTypeA: cudaDataType, A: ?*const anyopaque, lda: i64, dataTypeSrand: cudaDataType, Srand: ?*const anyopaque, dataTypeUrand: cudaDataType, Urand: ?*const anyopaque, ldUrand: i64, dataTypeVrand: cudaDataType, Vrand: ?*const anyopaque, ldVrand: i64, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXgesvdr(handle: cusolverDnHandle_t, params: cusolverDnParams_t, jobu: i8, jobv: i8, m: i64, n: i64, k: i64, p: i64, niters: i64, dataTypeA: cudaDataType, A: ?*anyopaque, lda: i64, dataTypeSrand: cudaDataType, Srand: ?*anyopaque, dataTypeUrand: cudaDataType, Urand: ?*anyopaque, ldUrand: i64, dataTypeVrand: cudaDataType, Vrand: ?*anyopaque, ldVrand: i64, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize, d_info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverDnXlarft_bufferSize(handle: cusolverDnHandle_t, params: cusolverDnParams_t, direct: cusolverDirectMode_t, storev: cusolverStorevMode_t, n: i64, k: i64, dataTypeV: cudaDataType, V: ?*const anyopaque, ldv: i64, dataTypeTau: cudaDataType, tau: ?*const anyopaque, dataTypeT: cudaDataType, T: ?*anyopaque, ldt: i64, computeType: cudaDataType, workspaceInBytesOnDevice: [*c]usize, workspaceInBytesOnHost: [*c]usize) cusolverStatus_t;
pub extern fn cusolverDnXlarft(handle: cusolverDnHandle_t, params: cusolverDnParams_t, direct: cusolverDirectMode_t, storev: cusolverStorevMode_t, n: i64, k: i64, dataTypeV: cudaDataType, V: ?*const anyopaque, ldv: i64, dataTypeTau: cudaDataType, tau: ?*const anyopaque, dataTypeT: cudaDataType, T: ?*anyopaque, ldt: i64, computeType: cudaDataType, bufferOnDevice: ?*anyopaque, workspaceInBytesOnDevice: usize, bufferOnHost: ?*anyopaque, workspaceInBytesOnHost: usize) cusolverStatus_t;
pub const cusolverDnLoggerCallback_t = ?*const fn (c_int, [*c]const u8, [*c]const u8) callconv(.c) void;
pub extern fn cusolverDnLoggerSetCallback(callback: cusolverDnLoggerCallback_t) cusolverStatus_t;
pub extern fn cusolverDnLoggerSetFile(file: [*c]FILE) cusolverStatus_t;
pub extern fn cusolverDnLoggerOpenFile(logFile: [*c]const u8) cusolverStatus_t;
pub extern fn cusolverDnLoggerSetLevel(level: c_int) cusolverStatus_t;
pub extern fn cusolverDnLoggerSetMask(mask: c_int) cusolverStatus_t;
pub extern fn cusolverDnLoggerForceDisable(...) cusolverStatus_t;
pub const struct_cusolverMgContext = opaque {};
pub const cusolverMgHandle_t = ?*struct_cusolverMgContext;
pub const CUDALIBMG_GRID_MAPPING_ROW_MAJOR: c_int = 1;
pub const CUDALIBMG_GRID_MAPPING_COL_MAJOR: c_int = 0;
pub const cusolverMgGridMapping_t = c_uint;
pub const cudaLibMgGrid_t = ?*anyopaque;
pub const cudaLibMgMatrixDesc_t = ?*anyopaque;
pub extern fn cusolverMgCreate(handle: [*c]cusolverMgHandle_t) cusolverStatus_t;
pub extern fn cusolverMgDestroy(handle: cusolverMgHandle_t) cusolverStatus_t;
pub extern fn cusolverMgDeviceSelect(handle: cusolverMgHandle_t, nbDevices: c_int, deviceId: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverMgCreateDeviceGrid(grid: [*c]cudaLibMgGrid_t, numRowDevices: i32, numColDevices: i32, deviceId: [*c]const i32, mapping: cusolverMgGridMapping_t) cusolverStatus_t;
pub extern fn cusolverMgDestroyGrid(grid: cudaLibMgGrid_t) cusolverStatus_t;
pub extern fn cusolverMgCreateMatrixDesc(desc: [*c]cudaLibMgMatrixDesc_t, numRows: i64, numCols: i64, rowBlockSize: i64, colBlockSize: i64, dataType: cudaDataType, grid: cudaLibMgGrid_t) cusolverStatus_t;
pub extern fn cusolverMgDestroyMatrixDesc(desc: cudaLibMgMatrixDesc_t) cusolverStatus_t;
pub extern fn cusolverMgSyevd_bufferSize(handle: cusolverMgHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, W: ?*anyopaque, dataTypeW: cudaDataType, computeType: cudaDataType, lwork: [*c]i64) cusolverStatus_t;
pub extern fn cusolverMgSyevd(handle: cusolverMgHandle_t, jobz: cusolverEigMode_t, uplo: cublasFillMode_t, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, W: ?*anyopaque, dataTypeW: cudaDataType, computeType: cudaDataType, array_d_work: [*c]?*anyopaque, lwork: i64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverMgGetrf_bufferSize(handle: cusolverMgHandle_t, M: c_int, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, array_d_IPIV: [*c][*c]c_int, computeType: cudaDataType, lwork: [*c]i64) cusolverStatus_t;
pub extern fn cusolverMgGetrf(handle: cusolverMgHandle_t, M: c_int, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, array_d_IPIV: [*c][*c]c_int, computeType: cudaDataType, array_d_work: [*c]?*anyopaque, lwork: i64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverMgGetrs_bufferSize(handle: cusolverMgHandle_t, TRANS: cublasOperation_t, N: c_int, NRHS: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, array_d_IPIV: [*c][*c]c_int, array_d_B: [*c]?*anyopaque, IB: c_int, JB: c_int, descrB: cudaLibMgMatrixDesc_t, computeType: cudaDataType, lwork: [*c]i64) cusolverStatus_t;
pub extern fn cusolverMgGetrs(handle: cusolverMgHandle_t, TRANS: cublasOperation_t, N: c_int, NRHS: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, array_d_IPIV: [*c][*c]c_int, array_d_B: [*c]?*anyopaque, IB: c_int, JB: c_int, descrB: cudaLibMgMatrixDesc_t, computeType: cudaDataType, array_d_work: [*c]?*anyopaque, lwork: i64, info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverMgPotrf_bufferSize(handle: cusolverMgHandle_t, uplo: cublasFillMode_t, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, computeType: cudaDataType, lwork: [*c]i64) cusolverStatus_t;
pub extern fn cusolverMgPotrf(handle: cusolverMgHandle_t, uplo: cublasFillMode_t, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, computeType: cudaDataType, array_d_work: [*c]?*anyopaque, lwork: i64, h_info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverMgPotrs_bufferSize(handle: cusolverMgHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, array_d_B: [*c]?*anyopaque, IB: c_int, JB: c_int, descrB: cudaLibMgMatrixDesc_t, computeType: cudaDataType, lwork: [*c]i64) cusolverStatus_t;
pub extern fn cusolverMgPotrs(handle: cusolverMgHandle_t, uplo: cublasFillMode_t, n: c_int, nrhs: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, array_d_B: [*c]?*anyopaque, IB: c_int, JB: c_int, descrB: cudaLibMgMatrixDesc_t, computeType: cudaDataType, array_d_work: [*c]?*anyopaque, lwork: i64, h_info: [*c]c_int) cusolverStatus_t;
pub extern fn cusolverMgPotri_bufferSize(handle: cusolverMgHandle_t, uplo: cublasFillMode_t, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, computeType: cudaDataType, lwork: [*c]i64) cusolverStatus_t;
pub extern fn cusolverMgPotri(handle: cusolverMgHandle_t, uplo: cublasFillMode_t, N: c_int, array_d_A: [*c]?*anyopaque, IA: c_int, JA: c_int, descrA: cudaLibMgMatrixDesc_t, computeType: cudaDataType, array_d_work: [*c]?*anyopaque, lwork: i64, h_info: [*c]c_int) cusolverStatus_t;
pub extern fn tomoSinF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSinD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoCosF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoCosD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoTanF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoTanD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoReluF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoReluD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoLeakyReluF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoLeakyReluD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoInvF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoInvD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoEluF(a: [*c]f32, len: usize, alpha: f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoEluD(a: [*c]f64, len: usize, alpha: f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSeluF(a: [*c]f32, len: usize, alpha: f32, lambda: f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSeluD(a: [*c]f64, len: usize, alpha: f64, lambda: f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSoftplusF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSoftplusD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSigmoidF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSigmoidD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoTanhF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoTanhD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSwishF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSwishD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoGeluF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoGeluD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoHardSigmoidF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoHardSigmoidD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoHardSwishF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoHardSwishD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSoftsignF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSoftsignD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSquareF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSquareD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSqrtF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSqrtD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoLogF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoLogD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoExpF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoExpD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoAbsF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoAbsD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoScaleF(a: [*c]f32, len: usize, scale: f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoScaleD(a: [*c]f64, len: usize, scale: f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoPowF(a: [*c]f32, len: usize, exponent: c_int, stream: cudaStream_t) cudaError_t;
pub extern fn tomoPowD(a: [*c]f64, len: usize, exponent: c_int, stream: cudaStream_t) cudaError_t;
pub extern fn tomoPowfF(a: [*c]f32, len: usize, exponent: f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoPowfD(a: [*c]f64, len: usize, exponent: f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoClampF(a: [*c]f32, len: usize, lower: f32, upper: f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoClampD(a: [*c]f64, len: usize, lower: f64, upper: f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoFloorF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoFloorD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoCeilF(a: [*c]f32, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoCeilD(a: [*c]f64, len: usize, stream: cudaStream_t) cudaError_t;
pub extern fn tomoShiftF(a: [*c]f32, len: usize, offset: f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoShiftD(a: [*c]f64, len: usize, offset: f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoScaleShiftF(a: [*c]f32, len: usize, scale: f32, offset: f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoScaleShiftD(a: [*c]f64, len: usize, scale: f64, offset: f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSumReduceF(a: [*c]const f32, len: usize, host_out: [*c]f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoSumReduceD(a: [*c]const f64, len: usize, host_out: [*c]f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoMeanF(a: [*c]const f32, len: usize, host_out: [*c]f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoMeanD(a: [*c]const f64, len: usize, host_out: [*c]f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoMinF(in: [*c]const f32, len: usize, host_out: [*c]f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoMinD(in: [*c]const f64, len: usize, host_out: [*c]f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoMaxF(in: [*c]const f32, len: usize, host_out: [*c]f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoMaxD(in: [*c]const f64, len: usize, host_out: [*c]f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoL1NormF(a: [*c]const f32, len: usize, host_out: [*c]f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoL1NormD(a: [*c]const f64, len: usize, host_out: [*c]f64, stream: cudaStream_t) cudaError_t;
pub extern fn tomoL2NormF(a: [*c]const f32, len: usize, host_out: [*c]f32, stream: cudaStream_t) cudaError_t;
pub extern fn tomoL2NormD(a: [*c]const f64, len: usize, host_out: [*c]f64, stream: cudaStream_t) cudaError_t;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 19);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 7);
pub const __clang_version__ = "19.1.7 (https://github.com/ziglang/zig-bootstrap 50d8e88ba329b5d58a212f9fd2e9b1ad59a88e7d)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 19.1.7 (https://github.com/ziglang/zig-bootstrap 50d8e88ba329b5d58a212f9fd2e9b1ad59a88e7d)";
pub const __GXX_TYPEINFO_EQUALITY_INLINE = @as(c_int, 0);
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __SEH__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-16";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 16);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 16);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 2);
pub const __SIZEOF_WINT_T__ = @as(c_int, 2);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_longlong;
pub const __PTRDIFF_FMTd__ = "lld";
pub const __PTRDIFF_FMTi__ = "lli";
pub const __INTPTR_TYPE__ = c_longlong;
pub const __INTPTR_FMTd__ = "lld";
pub const __INTPTR_FMTi__ = "lli";
pub const __SIZE_TYPE__ = c_ulonglong;
pub const __SIZE_FMTo__ = "llo";
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTx__ = "llx";
pub const __SIZE_FMTX__ = "llX";
pub const __WCHAR_TYPE__ = c_ushort;
pub const __WINT_TYPE__ = c_ushort;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulonglong;
pub const __UINTPTR_FMTo__ = "llo";
pub const __UINTPTR_FMTu__ = "llu";
pub const __UINTPTR_FMTx__ = "llx";
pub const __UINTPTR_FMTX__ = "llX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):203:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):225:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):233:9
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):366:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):367:9
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __GFNI__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __KL__ = @as(c_int, 1);
pub const __WIDEKL__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __WAITPKG__ = @as(c_int, 1);
pub const __MOVDIRI__ = @as(c_int, 1);
pub const __MOVDIR64B__ = @as(c_int, 1);
pub const __PTWRITE__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __HRESET__ = @as(c_int, 1);
pub const __AVXVNNI__ = @as(c_int, 1);
pub const __SERIALIZE__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _WIN32 = @as(c_int, 1);
pub const _WIN64 = @as(c_int, 1);
pub const WIN32 = @as(c_int, 1);
pub const __WIN32 = @as(c_int, 1);
pub const __WIN32__ = @as(c_int, 1);
pub const WINNT = @as(c_int, 1);
pub const __WINNT = @as(c_int, 1);
pub const __WINNT__ = @as(c_int, 1);
pub const WIN64 = @as(c_int, 1);
pub const __WIN64 = @as(c_int, 1);
pub const __WIN64__ = @as(c_int, 1);
pub const __MINGW64__ = @as(c_int, 1);
pub const __MSVCRT__ = @as(c_int, 1);
pub const __MINGW32__ = @as(c_int, 1);
pub const __declspec = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// (no file):443:9
pub const _cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):444:9
pub const __cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):445:9
pub const _stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):446:9
pub const __stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):447:9
pub const _fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):448:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):449:9
pub const _thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):450:9
pub const __thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):451:9
pub const _pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):452:9
pub const __pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):453:9
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const __MSVCRT_VERSION__ = @as(c_int, 0xE00);
pub const _WIN32_WINNT = @as(c_int, 0x0a00);
pub const _DEBUG = @as(c_int, 1);
pub const __cuda_cuda_h__ = "";
pub const _INC_STDLIB = "";
pub const _INC_CORECRT = "";
pub const _INC__MINGW_H = "";
pub const _INC_CRTDEFS_MACRO = "";
pub const __STRINGIFY = @compileError("unable to translate C expr: unexpected token '#'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:10:9
pub inline fn __MINGW64_STRINGIFY(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub const __MINGW64_VERSION_MAJOR = @as(c_int, 13);
pub const __MINGW64_VERSION_MINOR = @as(c_int, 0);
pub const __MINGW64_VERSION_BUGFIX = @as(c_int, 0);
pub const __MINGW64_VERSION_RC = @as(c_int, 0);
pub const __MINGW64_VERSION_STR = __MINGW64_STRINGIFY(__MINGW64_VERSION_MAJOR) ++ "." ++ __MINGW64_STRINGIFY(__MINGW64_VERSION_MINOR) ++ "." ++ __MINGW64_STRINGIFY(__MINGW64_VERSION_BUGFIX);
pub const __MINGW64_VERSION_STATE = "alpha";
pub const __MINGW32_MAJOR_VERSION = @as(c_int, 3);
pub const __MINGW32_MINOR_VERSION = @as(c_int, 11);
pub const _M_AMD64 = @as(c_int, 100);
pub const _M_X64 = @as(c_int, 100);
pub const @"_" = @as(c_int, 1);
pub const __MINGW_USE_UNDERSCORE_PREFIX = @as(c_int, 0);
pub const __MINGW_IMP_SYMBOL = @compileError("unable to translate macro: undefined identifier `__imp_`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:119:11
pub const __MINGW_IMP_LSYMBOL = @compileError("unable to translate macro: undefined identifier `__imp_`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:120:11
pub inline fn __MINGW_USYMBOL(sym: anytype) @TypeOf(sym) {
    _ = &sym;
    return sym;
}
pub const __MINGW_LSYMBOL = @compileError("unable to translate C expr: unexpected token '##'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:122:11
pub const __MINGW_ASM_CALL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:130:9
pub const __MINGW_ASM_CRT_CALL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:131:9
pub const __MINGW_EXTENSION = @compileError("unable to translate C expr: unexpected token '__extension__'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:163:13
pub const __C89_NAMELESS = __MINGW_EXTENSION;
pub const __C89_NAMELESSSTRUCTNAME = "";
pub const __C89_NAMELESSSTRUCTNAME1 = "";
pub const __C89_NAMELESSSTRUCTNAME2 = "";
pub const __C89_NAMELESSSTRUCTNAME3 = "";
pub const __C89_NAMELESSSTRUCTNAME4 = "";
pub const __C89_NAMELESSSTRUCTNAME5 = "";
pub const __C89_NAMELESSUNIONNAME = "";
pub const __C89_NAMELESSUNIONNAME1 = "";
pub const __C89_NAMELESSUNIONNAME2 = "";
pub const __C89_NAMELESSUNIONNAME3 = "";
pub const __C89_NAMELESSUNIONNAME4 = "";
pub const __C89_NAMELESSUNIONNAME5 = "";
pub const __C89_NAMELESSUNIONNAME6 = "";
pub const __C89_NAMELESSUNIONNAME7 = "";
pub const __C89_NAMELESSUNIONNAME8 = "";
pub const __GNU_EXTENSION = __MINGW_EXTENSION;
pub const __MINGW_HAVE_ANSI_C99_PRINTF = @as(c_int, 1);
pub const __MINGW_HAVE_WIDE_C99_PRINTF = @as(c_int, 1);
pub const __MINGW_HAVE_ANSI_C99_SCANF = @as(c_int, 1);
pub const __MINGW_HAVE_WIDE_C99_SCANF = @as(c_int, 1);
pub const __MINGW_POISON_NAME = @compileError("unable to translate macro: undefined identifier `_layout_has_not_been_verified_and_its_declaration_is_most_likely_incorrect`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:203:11
pub const __MSABI_LONG = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __MINGW_GCC_VERSION = ((__GNUC__ * @as(c_int, 10000)) + (__GNUC_MINOR__ * @as(c_int, 100))) + __GNUC_PATCHLEVEL__;
pub inline fn __MINGW_GNUC_PREREQ(major: anytype, minor: anytype) @TypeOf((__GNUC__ > major) or ((__GNUC__ == major) and (__GNUC_MINOR__ >= minor))) {
    _ = &major;
    _ = &minor;
    return (__GNUC__ > major) or ((__GNUC__ == major) and (__GNUC_MINOR__ >= minor));
}
pub inline fn __MINGW_MSC_PREREQ(major: anytype, minor: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &major;
    _ = &minor;
    return @as(c_int, 0);
}
pub const __MINGW_ATTRIB_DEPRECATED_STR = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:247:11
pub const __MINGW_SEC_WARN_STR = "This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation";
pub const __MINGW_MSVC2005_DEPREC_STR = "This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation";
pub const __MINGW_ATTRIB_DEPRECATED_MSVC2005 = __MINGW_ATTRIB_DEPRECATED_STR(__MINGW_MSVC2005_DEPREC_STR);
pub const __MINGW_ATTRIB_DEPRECATED_SEC_WARN = __MINGW_ATTRIB_DEPRECATED_STR(__MINGW_SEC_WARN_STR);
pub const __MINGW_MS_PRINTF = @compileError("unable to translate macro: undefined identifier `__format__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:271:9
pub const __MINGW_MS_SCANF = @compileError("unable to translate macro: undefined identifier `__format__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:274:9
pub const __MINGW_GNU_PRINTF = @compileError("unable to translate macro: undefined identifier `__format__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:277:9
pub const __MINGW_GNU_SCANF = @compileError("unable to translate macro: undefined identifier `__format__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:280:9
pub const __mingw_ovr = @compileError("unable to translate macro: undefined identifier `__unused__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:301:11
pub const __mingw_attribute_artificial = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:308:11
pub const __MINGW_SELECTANY = @compileError("unable to translate macro: undefined identifier `__selectany__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_mac.h:314:9
pub const __MINGW_FORTIFY_LEVEL = @as(c_int, 0);
pub const __mingw_bos_ovr = __mingw_ovr;
pub const __MINGW_FORTIFY_VA_ARG = @as(c_int, 0);
pub const _INC_MINGW_SECAPI = "";
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = @as(c_int, 0);
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = @as(c_int, 0);
pub const __MINGW_CRT_NAME_CONCAT2 = @compileError("unable to translate macro: undefined identifier `_s`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_secapi.h:41:9
pub const __CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY_0_3_ = @compileError("unable to translate C expr: unexpected token ';'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw_secapi.h:69:9
pub const __LONG32 = c_long;
pub const __MINGW_IMPORT = @compileError("unable to translate macro: undefined identifier `__dllimport__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:44:12
pub const __USE_CRTIMP = @as(c_int, 1);
pub const _CRTIMP = @compileError("unable to translate macro: undefined identifier `__dllimport__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:52:15
pub const __DECLSPEC_SUPPORTED = "";
pub const USE___UUIDOF = @as(c_int, 0);
pub const _inline = @compileError("unable to translate C expr: unexpected token '__inline'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:74:9
pub const __CRT_INLINE = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:83:11
pub const __MINGW_INTRIN_INLINE = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:90:9
pub const __CRT__NO_INLINE = @as(c_int, 1);
pub const __MINGW_CXX11_CONSTEXPR = "";
pub const __MINGW_CXX14_CONSTEXPR = "";
pub const __UNUSED_PARAM = @compileError("unable to translate macro: undefined identifier `__unused__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:118:11
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:133:10
pub const __MINGW_ATTRIB_NORETURN = @compileError("unable to translate macro: undefined identifier `__noreturn__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:149:9
pub const __MINGW_ATTRIB_CONST = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:150:9
pub const __MINGW_ATTRIB_MALLOC = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:160:9
pub const __MINGW_ATTRIB_PURE = @compileError("unable to translate macro: undefined identifier `__pure__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:161:9
pub const __MINGW_ATTRIB_NONNULL = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:174:9
pub const __MINGW_ATTRIB_UNUSED = @compileError("unable to translate macro: undefined identifier `__unused__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:180:9
pub const __MINGW_ATTRIB_USED = @compileError("unable to translate macro: undefined identifier `__used__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:186:9
pub const __MINGW_ATTRIB_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:187:9
pub const __MINGW_ATTRIB_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:189:9
pub const __MINGW_NOTHROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:204:9
pub const __MINGW_ATTRIB_NO_OPTIMIZE = "";
pub const __MINGW_PRAGMA_PARAM = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:222:9
pub const __MINGW_BROKEN_INTERFACE = @compileError("unable to translate macro: undefined identifier `message`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:225:9
pub const _UCRT = "";
pub const _INT128_DEFINED = "";
pub const __int8 = u8;
pub const __int16 = c_short;
pub const __int32 = c_int;
pub const __int64 = c_longlong;
pub const __ptr32 = "";
pub const __ptr64 = "";
pub const __unaligned = "";
pub const __w64 = "";
pub const __forceinline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:280:9
pub const __nothrow = "";
pub const _INC_VADEFS = "";
pub const MINGW_SDK_INIT = "";
pub const MINGW_HAS_SECURE_API = @as(c_int, 1);
pub const __STDC_SECURE_LIB__ = @as(c_long, 200411);
pub const __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__;
pub const MINGW_DDK_H = "";
pub const MINGW_HAS_DDK_H = @as(c_int, 1);
pub const _CRT_PACKING = @as(c_int, 8);
pub const __GNUC_VA_LIST = "";
pub const _VA_LIST_DEFINED = "";
pub inline fn _ADDRESSOF(v: anytype) @TypeOf(&v) {
    _ = &v;
    return &v;
}
pub const _crt_va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/vadefs.h:48:9
pub const _crt_va_arg = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/vadefs.h:49:9
pub const _crt_va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/vadefs.h:50:9
pub const _crt_va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/vadefs.h:51:9
pub const __CRT_STRINGIZE = @compileError("unable to translate C expr: unexpected token '#'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:299:9
pub inline fn _CRT_STRINGIZE(_Value: anytype) @TypeOf(__CRT_STRINGIZE(_Value)) {
    _ = &_Value;
    return __CRT_STRINGIZE(_Value);
}
pub const __CRT_WIDE = @compileError("unable to translate macro: undefined identifier `L`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:304:9
pub inline fn _CRT_WIDE(_String: anytype) @TypeOf(__CRT_WIDE(_String)) {
    _ = &_String;
    return __CRT_WIDE(_String);
}
pub const _W64 = "";
pub const _CRTIMP_NOIA64 = _CRTIMP;
pub const _CRTIMP2 = _CRTIMP;
pub const _CRTIMP_ALTERNATIVE = _CRTIMP;
pub const _CRT_ALTERNATIVE_IMPORTED = "";
pub const _MRTIMP2 = _CRTIMP;
pub const _DLL = "";
pub const _MT = "";
pub const _MCRTIMP = _CRTIMP;
pub const _CRTIMP_PURE = _CRTIMP;
pub const _PGLOBAL = "";
pub const _AGLOBAL = "";
pub const _SECURECRT_FILL_BUFFER_PATTERN = @as(c_int, 0xFD);
pub const _CRT_DEPRECATE_TEXT = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:363:9
pub const _CRT_INSECURE_DEPRECATE_MEMORY = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:366:9
pub const _CRT_INSECURE_DEPRECATE_GLOBALS = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:370:9
pub const _CRT_MANAGED_HEAP_DEPRECATE = "";
pub const _CRT_OBSOLETE = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:378:9
pub const _CONST_RETURN = "";
pub const UNALIGNED = "";
pub const _CRT_ALIGN = @compileError("unable to translate macro: undefined identifier `__aligned__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:405:9
pub const __CRTDECL = __cdecl;
pub const _ARGMAX = @as(c_int, 100);
pub const _TRUNCATE = @import("std").zig.c_translation.cast(usize, -@as(c_int, 1));
pub inline fn _CRT_UNUSED(x: anytype) anyopaque {
    _ = &x;
    return @import("std").zig.c_translation.cast(anyopaque, x);
}
pub const __USE_MINGW_ANSI_STDIO = @as(c_int, 0);
pub const _CRT_glob = @compileError("unable to translate macro: undefined identifier `_dowildcard`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:469:9
pub const __ANONYMOUS_DEFINED = "";
pub const _ANONYMOUS_UNION = __MINGW_EXTENSION;
pub const _ANONYMOUS_STRUCT = __MINGW_EXTENSION;
pub const _UNION_NAME = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:489:9
pub const _STRUCT_NAME = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:490:9
pub const DUMMYUNIONNAME = "";
pub const DUMMYUNIONNAME1 = "";
pub const DUMMYUNIONNAME2 = "";
pub const DUMMYUNIONNAME3 = "";
pub const DUMMYUNIONNAME4 = "";
pub const DUMMYUNIONNAME5 = "";
pub const DUMMYUNIONNAME6 = "";
pub const DUMMYUNIONNAME7 = "";
pub const DUMMYUNIONNAME8 = "";
pub const DUMMYUNIONNAME9 = "";
pub const DUMMYSTRUCTNAME = "";
pub const DUMMYSTRUCTNAME1 = "";
pub const DUMMYSTRUCTNAME2 = "";
pub const DUMMYSTRUCTNAME3 = "";
pub const DUMMYSTRUCTNAME4 = "";
pub const DUMMYSTRUCTNAME5 = "";
pub const __CRT_UUID_DECL = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:577:9
pub const __MINGW_DEBUGBREAK_IMPL = !(__has_builtin(__debugbreak) != 0);
pub const __MINGW_FASTFAIL_IMPL = !(__has_builtin(__fastfail) != 0);
pub const __MINGW_PREFETCH_IMPL = @compileError("unable to translate macro: undefined identifier `__prefetch`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/_mingw.h:634:9
pub const _CRTNOALIAS = "";
pub const _CRTRESTRICT = "";
pub const _SIZE_T_DEFINED = "";
pub const _SSIZE_T_DEFINED = "";
pub const _RSIZE_T_DEFINED = "";
pub const _INTPTR_T_DEFINED = "";
pub const __intptr_t_defined = "";
pub const _UINTPTR_T_DEFINED = "";
pub const __uintptr_t_defined = "";
pub const _PTRDIFF_T_DEFINED = "";
pub const _PTRDIFF_T_ = "";
pub const _WCHAR_T_DEFINED = "";
pub const _WCTYPE_T_DEFINED = "";
pub const _WINT_T = "";
pub const _ERRCODE_DEFINED = "";
pub const _TIME32_T_DEFINED = "";
pub const _TIME64_T_DEFINED = "";
pub const _TIME_T_DEFINED = "";
pub const _CRT_SECURE_CPP_NOTHROW = @compileError("unable to translate macro: undefined identifier `throw`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:143:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_0 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:262:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:263:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:264:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:265:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_4 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:266:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_1 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:267:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_2 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:268:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_3 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:269:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_2_0 = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:270:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:271:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:272:9
pub const __DEFINE_CPP_OVERLOAD_SECURE_FUNC_SPLITPATH = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:273:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0 = @compileError("unable to translate macro: undefined identifier `__func_name`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:277:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1 = @compileError("unable to translate macro: undefined identifier `__func_name`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:279:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2 = @compileError("unable to translate macro: undefined identifier `__func_name`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:281:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3 = @compileError("unable to translate macro: undefined identifier `__func_name`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:283:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4 = @compileError("unable to translate macro: undefined identifier `__func_name`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:285:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:422:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:423:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:424:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:425:9
pub const __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:426:9
pub const _TAGLC_ID_DEFINED = "";
pub const _THREADLOCALEINFO = "";
pub const __crt_typefix = @compileError("unable to translate C expr: unexpected token ''");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/corecrt.h:486:9
pub const _CRT_USE_WINAPI_FAMILY_DESKTOP_APP = "";
pub const _INC_CORECRT_WSTDLIB = "";
pub const __CLANG_LIMITS_H = "";
pub const _GCC_LIMITS_H_ = "";
pub const _INC_CRTDEFS = "";
pub const _INC_LIMITS = "";
pub const PATH_MAX = @as(c_int, 260);
pub const CHAR_BIT = @as(c_int, 8);
pub const SCHAR_MIN = -@as(c_int, 128);
pub const SCHAR_MAX = @as(c_int, 127);
pub const UCHAR_MAX = @as(c_int, 0xff);
pub const CHAR_MIN = SCHAR_MIN;
pub const CHAR_MAX = SCHAR_MAX;
pub const MB_LEN_MAX = @as(c_int, 5);
pub const SHRT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SHRT_MAX = @as(c_int, 32767);
pub const USHRT_MAX = @as(c_uint, 0xffff);
pub const INT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const UINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);
pub const LONG_MIN = -@as(c_long, 2147483647) - @as(c_int, 1);
pub const LONG_MAX = @as(c_long, 2147483647);
pub const ULONG_MAX = @as(c_ulong, 0xffffffff);
pub const LLONG_MAX = @as(c_longlong, 9223372036854775807);
pub const LLONG_MIN = -@as(c_longlong, 9223372036854775807) - @as(c_int, 1);
pub const ULLONG_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const _I8_MIN = -@as(c_int, 127) - @as(c_int, 1);
pub const _I8_MAX = @as(c_int, 127);
pub const _UI8_MAX = @as(c_uint, 0xff);
pub const _I16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const _I16_MAX = @as(c_int, 32767);
pub const _UI16_MAX = @as(c_uint, 0xffff);
pub const _I32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const _I32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const _UI32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);
pub const LONG_LONG_MAX = @as(c_longlong, 9223372036854775807);
pub const LONG_LONG_MIN = -LONG_LONG_MAX - @as(c_int, 1);
pub const ULONG_LONG_MAX = (@as(c_ulonglong, 2) * LONG_LONG_MAX) + @as(c_ulonglong, 1);
pub const _I64_MIN = -@as(c_longlong, 9223372036854775807) - @as(c_int, 1);
pub const _I64_MAX = @as(c_longlong, 9223372036854775807);
pub const _UI64_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const SIZE_MAX = _UI64_MAX;
pub const SSIZE_MAX = _I64_MAX;
pub const _SECIMP = @compileError("unable to translate macro: undefined identifier `dllimport`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdlib.h:22:9
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const EXIT_FAILURE = @as(c_int, 1);
pub const _ONEXIT_T_DEFINED = "";
pub const onexit_t = _onexit_t;
pub const _DIV_T_DEFINED = "";
pub const _CRT_DOUBLE_DEC = "";
pub inline fn _PTR_LD(x: anytype) [*c]u8 {
    _ = &x;
    return @import("std").zig.c_translation.cast([*c]u8, &x.*.ld);
}
pub const RAND_MAX = @as(c_int, 0x7fff);
pub const MB_CUR_MAX = ___mb_cur_max_func();
pub const __mb_cur_max = ___mb_cur_max_func();
pub inline fn __max(a: anytype, b: anytype) @TypeOf(if (a > b) a else b) {
    _ = &a;
    _ = &b;
    return if (a > b) a else b;
}
pub inline fn __min(a: anytype, b: anytype) @TypeOf(if (a < b) a else b) {
    _ = &a;
    _ = &b;
    return if (a < b) a else b;
}
pub const _MAX_PATH = @as(c_int, 260);
pub const _MAX_DRIVE = @as(c_int, 3);
pub const _MAX_DIR = @as(c_int, 256);
pub const _MAX_FNAME = @as(c_int, 256);
pub const _MAX_EXT = @as(c_int, 256);
pub const _OUT_TO_DEFAULT = @as(c_int, 0);
pub const _OUT_TO_STDERR = @as(c_int, 1);
pub const _OUT_TO_MSGBOX = @as(c_int, 2);
pub const _REPORT_ERRMODE = @as(c_int, 3);
pub const _WRITE_ABORT_MSG = @as(c_int, 0x1);
pub const _CALL_REPORTFAULT = @as(c_int, 0x2);
pub const _MAX_ENV = @as(c_int, 32767);
pub const _CRT_ERRNO_DEFINED = "";
pub const errno = _errno().*;
pub const _doserrno = __doserrno().*;
pub const _sys_nerr = __sys_nerr().*;
pub const _sys_errlist = __sys_errlist();
pub const _fmode = __p__fmode().*;
pub const __argc = __p___argc().*;
pub const __argv = __p___argv().*;
pub const __wargv = __p___wargv().*;
pub const _pgmptr = __p__pgmptr().*;
pub const _wpgmptr = __p__wpgmptr().*;
pub const _environ = __p__environ().*;
pub const _wenviron = __p__wenviron().*;
pub const _osplatform = __p__osplatform().*;
pub const _osver = __p__osver().*;
pub const _winver = __p__winver().*;
pub const _winmajor = __p__winmajor().*;
pub const _winminor = __p__winminor().*;
pub const _countof = @compileError("unable to translate C expr: expected ')' instead got '['");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdlib.h:263:9
pub const _CRT_TERMINATE_DEFINED = "";
pub const _CRT_ABS_DEFINED = "";
pub const _CRT_ATOF_DEFINED = "";
pub const _CRT_ALGO_DEFINED = "";
pub const _CRT_SYSTEM_DEFINED = "";
pub const _CRT_ALLOCATION_DEFINED = "";
pub const _WSTDLIB_DEFINED = "";
pub const _CRT_WSYSTEM_DEFINED = "";
pub const _CVTBUFSIZE = @as(c_int, 309) + @as(c_int, 40);
pub const _CRT_PERROR_DEFINED = "";
pub const _WSTDLIBP_DEFINED = "";
pub const _CRT_WPERROR_DEFINED = "";
pub const sys_errlist = _sys_errlist;
pub const sys_nerr = _sys_nerr;
pub const environ = _environ;
pub const _CRT_SWAB_DEFINED = "";
pub const _INC_STDLIB_S = "";
pub const _QSORT_S_DEFINED = "";
pub const _MALLOC_H_ = "";
pub const _HEAP_MAXREQ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFFFFFFFFE0, .hex);
pub const _STATIC_ASSERT = @compileError("unable to translate macro: undefined identifier `__static_assert_t`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/malloc.h:27:9
pub const _HEAPEMPTY = -@as(c_int, 1);
pub const _HEAPOK = -@as(c_int, 2);
pub const _HEAPBADBEGIN = -@as(c_int, 3);
pub const _HEAPBADNODE = -@as(c_int, 4);
pub const _HEAPEND = -@as(c_int, 5);
pub const _HEAPBADPTR = -@as(c_int, 6);
pub const _FREEENTRY = @as(c_int, 0);
pub const _USEDENTRY = @as(c_int, 1);
pub const _HEAPINFO_DEFINED = "";
pub const _amblksiz = __p__amblksiz().*;
pub const __MM_MALLOC_H = "";
pub const _MAX_WAIT_MALLOC_CRT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const _alloca = @compileError("unable to translate macro: undefined identifier `__builtin_alloca`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/malloc.h:99:9
pub const _ALLOCA_S_THRESHOLD = @as(c_int, 1024);
pub const _ALLOCA_S_STACK_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xCCCC, .hex);
pub const _ALLOCA_S_HEAP_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xDDDD, .hex);
pub const _ALLOCA_S_MARKER_SIZE = @as(c_int, 16);
pub inline fn _malloca(size: anytype) @TypeOf(if ((size + _ALLOCA_S_MARKER_SIZE) <= _ALLOCA_S_THRESHOLD) _MarkAllocaS(_alloca(size + _ALLOCA_S_MARKER_SIZE), _ALLOCA_S_STACK_MARKER) else _MarkAllocaS(malloc(size + _ALLOCA_S_MARKER_SIZE), _ALLOCA_S_HEAP_MARKER)) {
    _ = &size;
    return if ((size + _ALLOCA_S_MARKER_SIZE) <= _ALLOCA_S_THRESHOLD) _MarkAllocaS(_alloca(size + _ALLOCA_S_MARKER_SIZE), _ALLOCA_S_STACK_MARKER) else _MarkAllocaS(malloc(size + _ALLOCA_S_MARKER_SIZE), _ALLOCA_S_HEAP_MARKER);
}
pub const _FREEA_INLINE = "";
pub const alloca = @compileError("unable to translate macro: undefined identifier `__builtin_alloca`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/malloc.h:165:9
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = "";
pub const __need_wint_t = "";
pub const __need_wchar_t = "";
pub const _WCHAR_T = "";
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -@as(c_longlong, 9223372036854775807) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = @as(c_longlong, 9223372036854775807);
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hex);
pub const UINT64_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const INT_LEAST8_MIN = INT8_MIN;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const INT_FAST16_MIN = INT16_MIN;
pub const INT_FAST32_MIN = INT32_MIN;
pub const INT_FAST64_MIN = INT64_MIN;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MIN = INT64_MIN;
pub const INTPTR_MAX = INT64_MAX;
pub const UINTPTR_MAX = UINT64_MAX;
pub const INTMAX_MIN = INT64_MIN;
pub const INTMAX_MAX = INT64_MAX;
pub const UINTMAX_MAX = UINT64_MAX;
pub const PTRDIFF_MIN = INT64_MIN;
pub const PTRDIFF_MAX = INT64_MAX;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const WCHAR_MIN = @as(c_uint, 0);
pub const WCHAR_MAX = @as(c_uint, 0xffff);
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @as(c_uint, 0xffff);
pub inline fn INT8_C(val: anytype) @TypeOf((INT_LEAST8_MAX - INT_LEAST8_MAX) + val) {
    _ = &val;
    return (INT_LEAST8_MAX - INT_LEAST8_MAX) + val;
}
pub inline fn INT16_C(val: anytype) @TypeOf((INT_LEAST16_MAX - INT_LEAST16_MAX) + val) {
    _ = &val;
    return (INT_LEAST16_MAX - INT_LEAST16_MAX) + val;
}
pub inline fn INT32_C(val: anytype) @TypeOf((INT_LEAST32_MAX - INT_LEAST32_MAX) + val) {
    _ = &val;
    return (INT_LEAST32_MAX - INT_LEAST32_MAX) + val;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub inline fn UINT8_C(val: anytype) @TypeOf(val) {
    _ = &val;
    return val;
}
pub inline fn UINT16_C(val: anytype) @TypeOf(val) {
    _ = &val;
    return val;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const __CUDA_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda.h:71:9
pub inline fn __CUDA_API_PTDS(api: anytype) @TypeOf(api) {
    _ = &api;
    return api;
}
pub inline fn __CUDA_API_PTSZ(api: anytype) @TypeOf(api) {
    _ = &api;
    return api;
}
pub const cuDeviceTotalMem = cuDeviceTotalMem_v2;
pub const cuCtxCreate = cuCtxCreate_v2;
pub const cuModuleGetGlobal = cuModuleGetGlobal_v2;
pub const cuMemGetInfo = cuMemGetInfo_v2;
pub const cuMemAlloc = cuMemAlloc_v2;
pub const cuMemAllocPitch = cuMemAllocPitch_v2;
pub const cuMemFree = cuMemFree_v2;
pub const cuMemGetAddressRange = cuMemGetAddressRange_v2;
pub const cuMemAllocHost = cuMemAllocHost_v2;
pub const cuMemHostGetDevicePointer = cuMemHostGetDevicePointer_v2;
pub const cuMemcpyHtoD = __CUDA_API_PTDS(cuMemcpyHtoD_v2);
pub const cuMemcpyDtoH = __CUDA_API_PTDS(cuMemcpyDtoH_v2);
pub const cuMemcpyDtoD = __CUDA_API_PTDS(cuMemcpyDtoD_v2);
pub const cuMemcpyDtoA = __CUDA_API_PTDS(cuMemcpyDtoA_v2);
pub const cuMemcpyAtoD = __CUDA_API_PTDS(cuMemcpyAtoD_v2);
pub const cuMemcpyHtoA = __CUDA_API_PTDS(cuMemcpyHtoA_v2);
pub const cuMemcpyAtoH = __CUDA_API_PTDS(cuMemcpyAtoH_v2);
pub const cuMemcpyAtoA = __CUDA_API_PTDS(cuMemcpyAtoA_v2);
pub const cuMemcpyHtoAAsync = __CUDA_API_PTSZ(cuMemcpyHtoAAsync_v2);
pub const cuMemcpyAtoHAsync = __CUDA_API_PTSZ(cuMemcpyAtoHAsync_v2);
pub const cuMemcpy2D = __CUDA_API_PTDS(cuMemcpy2D_v2);
pub const cuMemcpy2DUnaligned = __CUDA_API_PTDS(cuMemcpy2DUnaligned_v2);
pub const cuMemcpy3D = __CUDA_API_PTDS(cuMemcpy3D_v2);
pub const cuMemcpyHtoDAsync = __CUDA_API_PTSZ(cuMemcpyHtoDAsync_v2);
pub const cuMemcpyDtoHAsync = __CUDA_API_PTSZ(cuMemcpyDtoHAsync_v2);
pub const cuMemcpyDtoDAsync = __CUDA_API_PTSZ(cuMemcpyDtoDAsync_v2);
pub const cuMemcpy2DAsync = __CUDA_API_PTSZ(cuMemcpy2DAsync_v2);
pub const cuMemcpy3DAsync = __CUDA_API_PTSZ(cuMemcpy3DAsync_v2);
pub const cuMemsetD8 = __CUDA_API_PTDS(cuMemsetD8_v2);
pub const cuMemsetD16 = __CUDA_API_PTDS(cuMemsetD16_v2);
pub const cuMemsetD32 = __CUDA_API_PTDS(cuMemsetD32_v2);
pub const cuMemsetD2D8 = __CUDA_API_PTDS(cuMemsetD2D8_v2);
pub const cuMemsetD2D16 = __CUDA_API_PTDS(cuMemsetD2D16_v2);
pub const cuMemsetD2D32 = __CUDA_API_PTDS(cuMemsetD2D32_v2);
pub const cuArrayCreate = cuArrayCreate_v2;
pub const cuArrayGetDescriptor = cuArrayGetDescriptor_v2;
pub const cuArray3DCreate = cuArray3DCreate_v2;
pub const cuArray3DGetDescriptor = cuArray3DGetDescriptor_v2;
pub const cuTexRefSetAddress = cuTexRefSetAddress_v2;
pub const cuTexRefGetAddress = cuTexRefGetAddress_v2;
pub const cuGraphicsResourceGetMappedPointer = cuGraphicsResourceGetMappedPointer_v2;
pub const cuCtxDestroy = cuCtxDestroy_v2;
pub const cuCtxPopCurrent = cuCtxPopCurrent_v2;
pub const cuCtxPushCurrent = cuCtxPushCurrent_v2;
pub const cuStreamDestroy = cuStreamDestroy_v2;
pub const cuEventDestroy = cuEventDestroy_v2;
pub const cuTexRefSetAddress2D = cuTexRefSetAddress2D_v3;
pub const cuLinkCreate = cuLinkCreate_v2;
pub const cuLinkAddData = cuLinkAddData_v2;
pub const cuLinkAddFile = cuLinkAddFile_v2;
pub const cuMemHostRegister = cuMemHostRegister_v2;
pub const cuGraphicsResourceSetMapFlags = cuGraphicsResourceSetMapFlags_v2;
pub const cuStreamBeginCapture = __CUDA_API_PTSZ(cuStreamBeginCapture_v2);
pub const cuDevicePrimaryCtxRelease = cuDevicePrimaryCtxRelease_v2;
pub const cuDevicePrimaryCtxReset = cuDevicePrimaryCtxReset_v2;
pub const cuDevicePrimaryCtxSetFlags = cuDevicePrimaryCtxSetFlags_v2;
pub const cuIpcOpenMemHandle = cuIpcOpenMemHandle_v2;
pub const cuGraphInstantiate = cuGraphInstantiateWithFlags;
pub const cuGraphExecUpdate = cuGraphExecUpdate_v2;
pub const cuGetProcAddress = cuGetProcAddress_v2;
pub const cuGraphAddKernelNode = cuGraphAddKernelNode_v2;
pub const cuGraphKernelNodeGetParams = cuGraphKernelNodeGetParams_v2;
pub const cuGraphKernelNodeSetParams = cuGraphKernelNodeSetParams_v2;
pub const cuGraphExecKernelNodeSetParams = cuGraphExecKernelNodeSetParams_v2;
pub const cuStreamWriteValue32 = __CUDA_API_PTSZ(cuStreamWriteValue32_v2);
pub const cuStreamWaitValue32 = __CUDA_API_PTSZ(cuStreamWaitValue32_v2);
pub const cuStreamWriteValue64 = __CUDA_API_PTSZ(cuStreamWriteValue64_v2);
pub const cuStreamWaitValue64 = __CUDA_API_PTSZ(cuStreamWaitValue64_v2);
pub const cuStreamBatchMemOp = __CUDA_API_PTSZ(cuStreamBatchMemOp_v2);
pub const cuStreamGetCaptureInfo = __CUDA_API_PTSZ(cuStreamGetCaptureInfo_v2);
pub const CUDA_VERSION = @as(c_int, 12080);
pub const CU_UUID_HAS_BEEN_DEFINED = "";
pub const CU_IPC_HANDLE_SIZE = @as(c_int, 64);
pub const CU_STREAM_LEGACY = @import("std").zig.c_translation.cast(CUstream, @as(c_int, 0x1));
pub const CU_STREAM_PER_THREAD = @import("std").zig.c_translation.cast(CUstream, @as(c_int, 0x2));
pub const CU_COMPUTE_ACCELERATED_TARGET_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hex);
pub const CUDA_CB = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda.h:1652:9
pub const CU_GRAPH_COND_ASSIGN_DEFAULT = @as(c_int, 0x1);
pub const CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = @as(c_int, 0);
pub const CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = @as(c_int, 1);
pub const CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = @as(c_int, 2);
pub const CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = CU_LAUNCH_ATTRIBUTE_ACCESS_POLICY_WINDOW;
pub const CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = CU_LAUNCH_ATTRIBUTE_COOPERATIVE;
pub const CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = CU_LAUNCH_ATTRIBUTE_CLUSTER_DIMENSION;
pub const CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = CU_LAUNCH_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE;
pub const CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = CU_LAUNCH_ATTRIBUTE_PRIORITY;
pub const CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP;
pub const CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN;
pub const CU_KERNEL_NODE_ATTRIBUTE_PREFERRED_CLUSTER_DIMENSION = CU_LAUNCH_ATTRIBUTE_PREFERRED_CLUSTER_DIMENSION;
pub const CU_KERNEL_NODE_ATTRIBUTE_DEVICE_UPDATABLE_KERNEL_NODE = CU_LAUNCH_ATTRIBUTE_DEVICE_UPDATABLE_KERNEL_NODE;
pub const CU_KERNEL_NODE_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = CU_LAUNCH_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT;
pub const CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = CU_LAUNCH_ATTRIBUTE_ACCESS_POLICY_WINDOW;
pub const CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = CU_LAUNCH_ATTRIBUTE_SYNCHRONIZATION_POLICY;
pub const CU_STREAM_ATTRIBUTE_PRIORITY = CU_LAUNCH_ATTRIBUTE_PRIORITY;
pub const CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP;
pub const CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN;
pub const CU_MEMHOSTALLOC_PORTABLE = @as(c_int, 0x01);
pub const CU_MEMHOSTALLOC_DEVICEMAP = @as(c_int, 0x02);
pub const CU_MEMHOSTALLOC_WRITECOMBINED = @as(c_int, 0x04);
pub const CU_MEMHOSTREGISTER_PORTABLE = @as(c_int, 0x01);
pub const CU_MEMHOSTREGISTER_DEVICEMAP = @as(c_int, 0x02);
pub const CU_MEMHOSTREGISTER_IOMEMORY = @as(c_int, 0x04);
pub const CU_MEMHOSTREGISTER_READ_ONLY = @as(c_int, 0x08);
pub const CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = @as(c_int, 0x1);
pub const CU_TENSOR_MAP_NUM_QWORDS = @as(c_int, 16);
pub const CUDA_EXTERNAL_MEMORY_DEDICATED = @as(c_int, 0x1);
pub const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = @as(c_int, 0x01);
pub const CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = @as(c_int, 0x02);
pub const CUDA_NVSCISYNC_ATTR_SIGNAL = @as(c_int, 0x1);
pub const CUDA_NVSCISYNC_ATTR_WAIT = @as(c_int, 0x2);
pub const CU_MEM_CREATE_USAGE_TILE_POOL = @as(c_int, 0x1);
pub const CU_MEM_CREATE_USAGE_HW_DECOMPRESS = @as(c_int, 0x2);
pub const CU_MEM_POOL_CREATE_USAGE_HW_DECOMPRESS = @as(c_int, 0x2);
pub const CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = @as(c_int, 0x01);
pub const CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = @as(c_int, 0x02);
pub const CUDA_ARRAY3D_LAYERED = @as(c_int, 0x01);
pub const CUDA_ARRAY3D_2DARRAY = @as(c_int, 0x01);
pub const CUDA_ARRAY3D_SURFACE_LDST = @as(c_int, 0x02);
pub const CUDA_ARRAY3D_CUBEMAP = @as(c_int, 0x04);
pub const CUDA_ARRAY3D_TEXTURE_GATHER = @as(c_int, 0x08);
pub const CUDA_ARRAY3D_DEPTH_TEXTURE = @as(c_int, 0x10);
pub const CUDA_ARRAY3D_COLOR_ATTACHMENT = @as(c_int, 0x20);
pub const CUDA_ARRAY3D_SPARSE = @as(c_int, 0x40);
pub const CUDA_ARRAY3D_DEFERRED_MAPPING = @as(c_int, 0x80);
pub const CUDA_ARRAY3D_VIDEO_ENCODE_DECODE = @as(c_int, 0x100);
pub const CU_TRSA_OVERRIDE_FORMAT = @as(c_int, 0x01);
pub const CU_TRSF_READ_AS_INTEGER = @as(c_int, 0x01);
pub const CU_TRSF_NORMALIZED_COORDINATES = @as(c_int, 0x02);
pub const CU_TRSF_SRGB = @as(c_int, 0x10);
pub const CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = @as(c_int, 0x20);
pub const CU_TRSF_SEAMLESS_CUBEMAP = @as(c_int, 0x40);
pub const CU_LAUNCH_PARAM_END_AS_INT = @as(c_int, 0x00);
pub const CU_LAUNCH_PARAM_END = @import("std").zig.c_translation.cast(?*anyopaque, CU_LAUNCH_PARAM_END_AS_INT);
pub const CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = @as(c_int, 0x01);
pub const CU_LAUNCH_PARAM_BUFFER_POINTER = @import("std").zig.c_translation.cast(?*anyopaque, CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT);
pub const CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = @as(c_int, 0x02);
pub const CU_LAUNCH_PARAM_BUFFER_SIZE = @import("std").zig.c_translation.cast(?*anyopaque, CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT);
pub const CU_PARAM_TR_DEFAULT = -@as(c_int, 1);
pub const CU_DEVICE_CPU = @import("std").zig.c_translation.cast(CUdevice, -@as(c_int, 1));
pub const CU_DEVICE_INVALID = @import("std").zig.c_translation.cast(CUdevice, -@as(c_int, 2));
pub const CUDAAPI = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda.h:4945:9
pub const RESOURCE_ABI_VERSION = @as(c_int, 1);
pub const RESOURCE_ABI_EXTERNAL_BYTES = @as(c_int, 48);
pub const _CONCAT_INNER = @compileError("unable to translate C expr: unexpected token '##'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda.h:25215:9
pub inline fn _CONCAT_OUTER(x: anytype, y: anytype) @TypeOf(_CONCAT_INNER(x, y)) {
    _ = &x;
    _ = &y;
    return _CONCAT_INNER(x, y);
}
pub const __CUDA_RUNTIME_H__ = "";
pub const __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__ = "";
pub const __UNDEF_CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS_CUDA_RUNTIME_H__ = "";
pub const EXCLUDE_FROM_RTC = "";
pub const __HOST_CONFIG_H__ = "";
pub const __DEVICE_TYPES_H__ = "";
pub const __HOST_DEFINES_H__ = "";
pub const __no_return__ = @compileError("unable to translate macro: undefined identifier `noreturn`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:78:9
pub const __forceinline__ = @compileError("unable to translate macro: undefined identifier `always_inline`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:95:9
pub const __inline_hint__ = @compileError("unable to translate macro: undefined identifier `nv_inline_hint`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:97:9
pub const __align__ = @compileError("unable to translate macro: undefined identifier `aligned`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:99:9
pub const __maxnreg__ = @compileError("unable to translate macro: undefined identifier `maxnreg`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:101:9
pub const __thread__ = @compileError("unable to translate macro: undefined identifier `__thread`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:103:9
pub const __import__ = "";
pub const __export__ = "";
pub const __annotate__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:108:9
pub inline fn __location__(a: anytype) @TypeOf(__annotate__(a)) {
    _ = &a;
    return __annotate__(a);
}
pub const CUDARTAPI = "";
pub const CUDARTAPI_CDECL = "";
pub const __specialization_static = "";
pub inline fn __builtin_align__(a: anytype) @TypeOf(__align__(a)) {
    _ = &a;
    return __align__(a);
}
pub const __grid_constant__ = @compileError("unable to translate macro: undefined identifier `grid_constant`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:217:9
pub const __host__ = @compileError("unable to translate macro: undefined identifier `host`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:222:9
pub const __device__ = @compileError("unable to translate macro: undefined identifier `device`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:226:9
pub const __global__ = @compileError("unable to translate macro: undefined identifier `global`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:230:9
pub const __shared__ = @compileError("unable to translate macro: undefined identifier `shared`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:234:9
pub const __constant__ = @compileError("unable to translate macro: undefined identifier `constant`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:238:9
pub const __managed__ = @compileError("unable to translate macro: undefined identifier `managed`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:242:9
pub const __nv_pure__ = @compileError("unable to translate macro: undefined identifier `nv_pure`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:246:9
pub const __device_builtin__ = "";
pub const __device_builtin_texture_type__ = "";
pub const __device_builtin_surface_type__ = "";
pub const __cudart_builtin__ = "";
pub const __cluster_dims__ = @compileError("unable to translate C expr: expected ')' instead got '...'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:271:9
pub const __CUDA_ARCH_HAS_FEATURE__ = @compileError("unable to translate macro: undefined identifier `__CUDA_ARCH_FEAT_`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/crt/host_defines.h:276:9
pub const __DRIVER_TYPES_H__ = "";
pub const __VECTOR_TYPES_H__ = "";
pub inline fn __cuda_builtin_vector_align8(tag: anytype, members: anytype) @TypeOf(__device_builtin__ ++ __align__(@as(c_int, 8)) ++ @import("std").mem.zeroInit(tag, .{members})) {
    _ = &tag;
    _ = &members;
    return __device_builtin__ ++ __align__(@as(c_int, 8)) ++ @import("std").mem.zeroInit(tag, .{members});
}
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\include/__stddef_offsetof.h:16:9
pub const cudaHostAllocDefault = @as(c_int, 0x00);
pub const cudaHostAllocPortable = @as(c_int, 0x01);
pub const cudaHostAllocMapped = @as(c_int, 0x02);
pub const cudaHostAllocWriteCombined = @as(c_int, 0x04);
pub const cudaHostRegisterDefault = @as(c_int, 0x00);
pub const cudaHostRegisterPortable = @as(c_int, 0x01);
pub const cudaHostRegisterMapped = @as(c_int, 0x02);
pub const cudaHostRegisterIoMemory = @as(c_int, 0x04);
pub const cudaHostRegisterReadOnly = @as(c_int, 0x08);
pub const cudaPeerAccessDefault = @as(c_int, 0x00);
pub const cudaStreamDefault = @as(c_int, 0x00);
pub const cudaStreamNonBlocking = @as(c_int, 0x01);
pub const cudaStreamLegacy = @import("std").zig.c_translation.cast(cudaStream_t, @as(c_int, 0x1));
pub const cudaStreamPerThread = @import("std").zig.c_translation.cast(cudaStream_t, @as(c_int, 0x2));
pub const cudaEventDefault = @as(c_int, 0x00);
pub const cudaEventBlockingSync = @as(c_int, 0x01);
pub const cudaEventDisableTiming = @as(c_int, 0x02);
pub const cudaEventInterprocess = @as(c_int, 0x04);
pub const cudaEventRecordDefault = @as(c_int, 0x00);
pub const cudaEventRecordExternal = @as(c_int, 0x01);
pub const cudaEventWaitDefault = @as(c_int, 0x00);
pub const cudaEventWaitExternal = @as(c_int, 0x01);
pub const cudaDeviceScheduleAuto = @as(c_int, 0x00);
pub const cudaDeviceScheduleSpin = @as(c_int, 0x01);
pub const cudaDeviceScheduleYield = @as(c_int, 0x02);
pub const cudaDeviceScheduleBlockingSync = @as(c_int, 0x04);
pub const cudaDeviceBlockingSync = @as(c_int, 0x04);
pub const cudaDeviceScheduleMask = @as(c_int, 0x07);
pub const cudaDeviceMapHost = @as(c_int, 0x08);
pub const cudaDeviceLmemResizeToMax = @as(c_int, 0x10);
pub const cudaDeviceSyncMemops = @as(c_int, 0x80);
pub const cudaDeviceMask = @as(c_int, 0xff);
pub const cudaArrayDefault = @as(c_int, 0x00);
pub const cudaArrayLayered = @as(c_int, 0x01);
pub const cudaArraySurfaceLoadStore = @as(c_int, 0x02);
pub const cudaArrayCubemap = @as(c_int, 0x04);
pub const cudaArrayTextureGather = @as(c_int, 0x08);
pub const cudaArrayColorAttachment = @as(c_int, 0x20);
pub const cudaArraySparse = @as(c_int, 0x40);
pub const cudaArrayDeferredMapping = @as(c_int, 0x80);
pub const cudaIpcMemLazyEnablePeerAccess = @as(c_int, 0x01);
pub const cudaMemAttachGlobal = @as(c_int, 0x01);
pub const cudaMemAttachHost = @as(c_int, 0x02);
pub const cudaMemAttachSingle = @as(c_int, 0x04);
pub const cudaOccupancyDefault = @as(c_int, 0x00);
pub const cudaOccupancyDisableCachingOverride = @as(c_int, 0x01);
pub const cudaCpuDeviceId = @import("std").zig.c_translation.cast(c_int, -@as(c_int, 1));
pub const cudaInvalidDeviceId = @import("std").zig.c_translation.cast(c_int, -@as(c_int, 2));
pub const cudaInitDeviceFlagsAreValid = @as(c_int, 0x01);
pub const cudaCooperativeLaunchMultiDeviceNoPreSync = @as(c_int, 0x01);
pub const cudaCooperativeLaunchMultiDeviceNoPostSync = @as(c_int, 0x02);
pub const cudaArraySparsePropertiesSingleMipTail = @as(c_int, 0x1);
pub const CUDART_CB = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/driver_types.h:1401:9
pub const cudaMemPoolCreateUsageHwDecompress = @as(c_int, 0x2);
pub const CUDA_IPC_HANDLE_SIZE = @as(c_int, 64);
pub const cudaExternalMemoryDedicated = @as(c_int, 0x1);
pub const cudaExternalSemaphoreSignalSkipNvSciBufMemSync = @as(c_int, 0x01);
pub const cudaExternalSemaphoreWaitSkipNvSciBufMemSync = @as(c_int, 0x02);
pub const cudaNvSciSyncAttrSignal = @as(c_int, 0x1);
pub const cudaNvSciSyncAttrWait = @as(c_int, 0x2);
pub const cudaGraphKernelNodePortDefault = @as(c_int, 0);
pub const cudaGraphKernelNodePortProgrammatic = @as(c_int, 1);
pub const cudaGraphKernelNodePortLaunchCompletion = @as(c_int, 2);
pub const cudaStreamAttrID = cudaLaunchAttributeID;
pub const cudaStreamAttributeAccessPolicyWindow = cudaLaunchAttributeAccessPolicyWindow;
pub const cudaStreamAttributeSynchronizationPolicy = cudaLaunchAttributeSynchronizationPolicy;
pub const cudaStreamAttributeMemSyncDomainMap = cudaLaunchAttributeMemSyncDomainMap;
pub const cudaStreamAttributeMemSyncDomain = cudaLaunchAttributeMemSyncDomain;
pub const cudaStreamAttributePriority = cudaLaunchAttributePriority;
pub const cudaStreamAttrValue = cudaLaunchAttributeValue;
pub const cudaKernelNodeAttrID = cudaLaunchAttributeID;
pub const cudaKernelNodeAttributeAccessPolicyWindow = cudaLaunchAttributeAccessPolicyWindow;
pub const cudaKernelNodeAttributeCooperative = cudaLaunchAttributeCooperative;
pub const cudaKernelNodeAttributePriority = cudaLaunchAttributePriority;
pub const cudaKernelNodeAttributeClusterDimension = cudaLaunchAttributeClusterDimension;
pub const cudaKernelNodeAttributeClusterSchedulingPolicyPreference = cudaLaunchAttributeClusterSchedulingPolicyPreference;
pub const cudaKernelNodeAttributeMemSyncDomainMap = cudaLaunchAttributeMemSyncDomainMap;
pub const cudaKernelNodeAttributeMemSyncDomain = cudaLaunchAttributeMemSyncDomain;
pub const cudaKernelNodeAttributePreferredSharedMemoryCarveout = cudaLaunchAttributePreferredSharedMemoryCarveout;
pub const cudaKernelNodeAttributeDeviceUpdatableKernelNode = cudaLaunchAttributeDeviceUpdatableKernelNode;
pub const cudaKernelNodeAttrValue = cudaLaunchAttributeValue;
pub const __SURFACE_TYPES_H__ = "";
pub const cudaSurfaceType1D = @as(c_int, 0x01);
pub const cudaSurfaceType2D = @as(c_int, 0x02);
pub const cudaSurfaceType3D = @as(c_int, 0x03);
pub const cudaSurfaceTypeCubemap = @as(c_int, 0x0C);
pub const cudaSurfaceType1DLayered = @as(c_int, 0xF1);
pub const cudaSurfaceType2DLayered = @as(c_int, 0xF2);
pub const cudaSurfaceTypeCubemapLayered = @as(c_int, 0xFC);
pub const __TEXTURE_TYPES_H__ = "";
pub const cudaTextureType1D = @as(c_int, 0x01);
pub const cudaTextureType2D = @as(c_int, 0x02);
pub const cudaTextureType3D = @as(c_int, 0x03);
pub const cudaTextureTypeCubemap = @as(c_int, 0x0C);
pub const cudaTextureType1DLayered = @as(c_int, 0xF1);
pub const cudaTextureType2DLayered = @as(c_int, 0xF2);
pub const cudaTextureTypeCubemapLayered = @as(c_int, 0xFC);
pub const __LIBRARY_TYPES_H__ = "";
pub const __CHANNEL_DESCRIPTOR_H__ = "";
pub const __CUDA_RUNTIME_API_H__ = "";
pub const CUDART_VERSION = @as(c_int, 12080);
pub const __CUDART_API_VERSION = CUDART_VERSION;
pub const __CUDA_DEVICE_RUNTIME_API_H__ = "";
pub const __CUDA_INTERNAL_USE_CDP2 = "";
pub const __DEPRECATED__ = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_device_runtime_api.h:156:10
pub const __CDPRT_DEPRECATED = @compileError("unable to translate C expr: unexpected token ''");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_device_runtime_api.h:166:10
pub inline fn __CUDART_API_PTDS(api: anytype) @TypeOf(api) {
    _ = &api;
    return api;
}
pub inline fn __CUDART_API_PTSZ(api: anytype) @TypeOf(api) {
    _ = &api;
    return api;
}
pub const cudaSignalExternalSemaphoresAsync = __CUDART_API_PTSZ(cudaSignalExternalSemaphoresAsync_v2);
pub const cudaWaitExternalSemaphoresAsync = __CUDART_API_PTSZ(cudaWaitExternalSemaphoresAsync_v2);
pub const cudaStreamGetCaptureInfo = __CUDART_API_PTSZ(cudaStreamGetCaptureInfo_v2);
pub const cudaGetDeviceProperties = cudaGetDeviceProperties_v2;
pub const __dv = @compileError("unable to translate C expr: unexpected token ''");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_runtime_api.h:254:9
pub const CUDART_DEVICE = __device__;
pub const __DRIVER_FUNCTIONS_H__ = "";
pub const __VECTOR_FUNCTIONS_H__ = "";
pub const __VECTOR_FUNCTIONS_DECL__ = @compileError("unable to translate C expr: unexpected token 'static'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/vector_functions.h:68:9
pub const __VECTOR_FUNCTIONS_HPP__ = "";
pub const __DEVICE_LAUNCH_PARAMETERS_H__ = "";
pub const __STORAGE__ = @compileError("unable to translate C expr: unexpected token 'extern'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/device_launch_parameters.h:61:9
pub inline fn __cudaGet_threadIdx() @TypeOf(threadIdx) {
    return threadIdx;
}
pub inline fn __cudaGet_blockIdx() @TypeOf(blockIdx) {
    return blockIdx;
}
pub inline fn __cudaGet_blockDim() @TypeOf(blockDim) {
    return blockDim;
}
pub inline fn __cudaGet_gridDim() @TypeOf(gridDim) {
    return gridDim;
}
pub inline fn __cudaGet_warpSize() @TypeOf(warpSize) {
    return warpSize;
}
pub const CUBLAS_V2_H_ = "";
pub const CUBLASAPI = "";
pub const CUBLAS_API_H_ = "";
pub const CUBLASWINAPI = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cublas_api.h:62:9
pub const CU_COMPLEX_H_ = "";
pub const _MATH_H_ = "";
pub const _DOMAIN = @as(c_int, 1);
pub const _SING = @as(c_int, 2);
pub const _OVERFLOW = @as(c_int, 3);
pub const _UNDERFLOW = @as(c_int, 4);
pub const _TLOSS = @as(c_int, 5);
pub const _PLOSS = @as(c_int, 6);
pub const DOMAIN = _DOMAIN;
pub const SING = _SING;
pub const OVERFLOW = _OVERFLOW;
pub const UNDERFLOW = _UNDERFLOW;
pub const TLOSS = _TLOSS;
pub const PLOSS = _PLOSS;
pub const M_E = @as(f64, 2.7182818284590452354);
pub const M_LOG2E = @as(f64, 1.4426950408889634074);
pub const M_LOG10E = @as(f64, 0.43429448190325182765);
pub const M_LN2 = @as(f64, 0.69314718055994530942);
pub const M_LN10 = @as(f64, 2.30258509299404568402);
pub const M_PI = @as(f64, 3.14159265358979323846);
pub const M_PI_2 = @as(f64, 1.57079632679489661923);
pub const M_PI_4 = @as(f64, 0.78539816339744830962);
pub const M_1_PI = @as(f64, 0.31830988618379067154);
pub const M_2_PI = @as(f64, 0.63661977236758134308);
pub const M_2_SQRTPI = @as(f64, 1.12837916709551257390);
pub const M_SQRT2 = @as(f64, 1.41421356237309504880);
pub const M_SQRT1_2 = @as(f64, 0.70710678118654752440);
pub const __MINGW_FPCLASS_DEFINED = @as(c_int, 1);
pub const _FPCLASS_SNAN = @as(c_int, 0x0001);
pub const _FPCLASS_QNAN = @as(c_int, 0x0002);
pub const _FPCLASS_NINF = @as(c_int, 0x0004);
pub const _FPCLASS_NN = @as(c_int, 0x0008);
pub const _FPCLASS_ND = @as(c_int, 0x0010);
pub const _FPCLASS_NZ = @as(c_int, 0x0020);
pub const _FPCLASS_PZ = @as(c_int, 0x0040);
pub const _FPCLASS_PD = @as(c_int, 0x0080);
pub const _FPCLASS_PN = @as(c_int, 0x0100);
pub const _FPCLASS_PINF = @as(c_int, 0x0200);
pub const __mingw_types_compatible_p = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:95:9
pub const __mingw_choose_expr = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:103:9
pub const __MINGW_SOFTMATH = "";
pub const _HUGE = __MINGW_IMP_SYMBOL(_HUGE).*;
pub const HUGE_VAL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:149:9
pub const _EXCEPTION_DEFINED = "";
pub const EDOM = @as(c_int, 33);
pub const ERANGE = @as(c_int, 34);
pub const _COMPLEX_DEFINED = "";
pub const _CRT_MATHERR_DEFINED = "";
pub const _SIGN_DEFINED = "";
pub const FP_SNAN = _FPCLASS_SNAN;
pub const FP_QNAN = _FPCLASS_QNAN;
pub const FP_NINF = _FPCLASS_NINF;
pub const FP_PINF = _FPCLASS_PINF;
pub const FP_NDENORM = _FPCLASS_ND;
pub const FP_PDENORM = _FPCLASS_PD;
pub const FP_NZERO = _FPCLASS_NZ;
pub const FP_PZERO = _FPCLASS_PZ;
pub const FP_NNORM = _FPCLASS_NN;
pub const FP_PNORM = _FPCLASS_PN;
pub const HUGE_VALF = __builtin_huge_valf();
pub const HUGE_VALL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:342:9
pub const INFINITY = __builtin_inff();
pub const NAN = __builtin_nanf("");
pub const FP_NAN = @as(c_int, 0x0100);
pub const FP_NORMAL = @as(c_int, 0x0400);
pub const FP_INFINITE = FP_NAN | FP_NORMAL;
pub const FP_ZERO = @as(c_int, 0x4000);
pub const FP_SUBNORMAL = FP_NORMAL | FP_ZERO;
pub inline fn __dfp_expansion(__call: anytype, __fin: anytype, x: anytype) @TypeOf(__fin) {
    _ = &__call;
    _ = &__fin;
    _ = &x;
    return __fin;
}
pub const fpclassify = @compileError("unable to translate macro: undefined identifier `__builtin_trap`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:484:9
pub inline fn isfinite(x: anytype) @TypeOf((fpclassify(x) & FP_NAN) == @as(c_int, 0)) {
    _ = &x;
    return (fpclassify(x) & FP_NAN) == @as(c_int, 0);
}
pub inline fn isinf(x: anytype) @TypeOf(fpclassify(x) == FP_INFINITE) {
    _ = &x;
    return fpclassify(x) == FP_INFINITE;
}
pub const isnan = @compileError("unable to translate macro: undefined identifier `__builtin_trap`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:578:9
pub inline fn isnormal(x: anytype) @TypeOf(fpclassify(x) == FP_NORMAL) {
    _ = &x;
    return fpclassify(x) == FP_NORMAL;
}
pub const signbit = @compileError("unable to translate macro: undefined identifier `__builtin_trap`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:638:9
pub const FP_ILOGB0 = @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const FP_ILOGBNAN = @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex));
pub inline fn _nan() @TypeOf(nan("")) {
    return nan("");
}
pub inline fn _nanf() @TypeOf(nanf("")) {
    return nanf("");
}
pub inline fn _nanl() @TypeOf(nanl("")) {
    return nanl("");
}
pub const isgreater = @compileError("unable to translate macro: undefined identifier `__builtin_isgreater`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:1136:9
pub const isgreaterequal = @compileError("unable to translate macro: undefined identifier `__builtin_isgreaterequal`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:1137:9
pub const isless = @compileError("unable to translate macro: undefined identifier `__builtin_isless`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:1138:9
pub const islessequal = @compileError("unable to translate macro: undefined identifier `__builtin_islessequal`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:1139:9
pub const islessgreater = @compileError("unable to translate macro: undefined identifier `__builtin_islessgreater`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:1140:9
pub const isunordered = @compileError("unable to translate macro: undefined identifier `__builtin_isunordered`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/math.h:1141:9
pub const _copysignl = copysignl;
pub const _hypotl = hypotl;
pub const matherr = _matherr;
pub const HUGE = _HUGE;
pub const __CUDA_FP16_H__ = "";
pub const ___CUDA_FP16_STRINGIFY_INNERMOST = @compileError("unable to translate C expr: unexpected token '#'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_fp16.h:136:9
pub inline fn __CUDA_FP16_STRINGIFY(x: anytype) @TypeOf(___CUDA_FP16_STRINGIFY_INNERMOST(x)) {
    _ = &x;
    return ___CUDA_FP16_STRINGIFY_INNERMOST(x);
}
pub const __NV_TARGET_H = "";
pub const _NV__TARGET_MACROS = "";
pub inline fn _NV_EVAL1(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn _NV_EVAL(x: anytype) @TypeOf(_NV_EVAL1(x)) {
    _ = &x;
    return _NV_EVAL1(x);
}
pub const _NV_CONCAT_EVAL1 = @compileError("unable to translate C expr: expected ',' or ')' instead got '##'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__preprocessor:33:9
pub inline fn _NV_CONCAT_EVAL(l: anytype, r: anytype) @TypeOf(_NV_CONCAT_EVAL1(l, r)) {
    _ = &l;
    _ = &r;
    return _NV_CONCAT_EVAL1(l, r);
}
pub inline fn _NV_IF_0(t: anytype, f: anytype) @TypeOf(f) {
    _ = &t;
    _ = &f;
    return f;
}
pub inline fn _NV_IF_1(t: anytype, f: anytype) @TypeOf(t) {
    _ = &t;
    _ = &f;
    return t;
}
pub const _NV_IF_BIT = @compileError("unable to translate macro: undefined identifier `_NV_IF_`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__preprocessor:39:9
pub inline fn _NV_IF__EVAL(@"fn": anytype, t: anytype, f: anytype) @TypeOf(_NV_EVAL(@"fn"(t, f))) {
    _ = &@"fn";
    _ = &t;
    _ = &f;
    return _NV_EVAL(@"fn"(t, f));
}
pub inline fn _NV_IF_EVAL(cond: anytype, t: anytype, f: anytype) @TypeOf(_NV_IF__EVAL(_NV_IF_BIT(cond), t, f)) {
    _ = &cond;
    _ = &t;
    _ = &f;
    return _NV_IF__EVAL(_NV_IF_BIT(cond), t, f);
}
pub inline fn _NV_IF1(cond: anytype, t: anytype, f: anytype) @TypeOf(_NV_IF_EVAL(cond, t, f)) {
    _ = &cond;
    _ = &t;
    _ = &f;
    return _NV_IF_EVAL(cond, t, f);
}
pub inline fn _NV_IF(cond: anytype, t: anytype, f: anytype) @TypeOf(_NV_IF1(_NV_EVAL(cond), _NV_EVAL(t), _NV_EVAL(f))) {
    _ = &cond;
    _ = &t;
    _ = &f;
    return _NV_IF1(_NV_EVAL(cond), _NV_EVAL(t), _NV_EVAL(f));
}
pub const _NV_TARGET_ARCH_TO_SELECTOR_350 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:20:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_370 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:21:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_500 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:22:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_520 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:23:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_530 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:24:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_600 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:25:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_610 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:26:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_620 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:27:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_700 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:28:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_720 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:29:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_750 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:30:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_800 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:31:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_860 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:32:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_870 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:33:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_890 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:34:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_900 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:35:9
pub const _NV_TARGET_ARCH_TO_SELECTOR_1000 = @compileError("unable to translate macro: undefined identifier `nv`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:36:9
pub const _NV_TARGET_ARCH_TO_SM_350 = @as(c_int, 35);
pub const _NV_TARGET_ARCH_TO_SM_370 = @as(c_int, 37);
pub const _NV_TARGET_ARCH_TO_SM_500 = @as(c_int, 50);
pub const _NV_TARGET_ARCH_TO_SM_520 = @as(c_int, 52);
pub const _NV_TARGET_ARCH_TO_SM_530 = @as(c_int, 53);
pub const _NV_TARGET_ARCH_TO_SM_600 = @as(c_int, 60);
pub const _NV_TARGET_ARCH_TO_SM_610 = @as(c_int, 61);
pub const _NV_TARGET_ARCH_TO_SM_620 = @as(c_int, 62);
pub const _NV_TARGET_ARCH_TO_SM_700 = @as(c_int, 70);
pub const _NV_TARGET_ARCH_TO_SM_720 = @as(c_int, 72);
pub const _NV_TARGET_ARCH_TO_SM_750 = @as(c_int, 75);
pub const _NV_TARGET_ARCH_TO_SM_800 = @as(c_int, 80);
pub const _NV_TARGET_ARCH_TO_SM_860 = @as(c_int, 86);
pub const _NV_TARGET_ARCH_TO_SM_870 = @as(c_int, 87);
pub const _NV_TARGET_ARCH_TO_SM_890 = @as(c_int, 89);
pub const _NV_TARGET_ARCH_TO_SM_900 = @as(c_int, 90);
pub const _NV_TARGET_ARCH_TO_SM_1000 = @as(c_int, 100);
pub const _NV_COMPILER_NVCC = "";
pub const _NV_TARGET_VAL_SM_35 = @as(c_int, 350);
pub const _NV_TARGET_VAL_SM_37 = @as(c_int, 370);
pub const _NV_TARGET_VAL_SM_50 = @as(c_int, 500);
pub const _NV_TARGET_VAL_SM_52 = @as(c_int, 520);
pub const _NV_TARGET_VAL_SM_53 = @as(c_int, 530);
pub const _NV_TARGET_VAL_SM_60 = @as(c_int, 600);
pub const _NV_TARGET_VAL_SM_61 = @as(c_int, 610);
pub const _NV_TARGET_VAL_SM_62 = @as(c_int, 620);
pub const _NV_TARGET_VAL_SM_70 = @as(c_int, 700);
pub const _NV_TARGET_VAL_SM_72 = @as(c_int, 720);
pub const _NV_TARGET_VAL_SM_75 = @as(c_int, 750);
pub const _NV_TARGET_VAL_SM_80 = @as(c_int, 800);
pub const _NV_TARGET_VAL_SM_86 = @as(c_int, 860);
pub const _NV_TARGET_VAL_SM_87 = @as(c_int, 870);
pub const _NV_TARGET_VAL_SM_89 = @as(c_int, 890);
pub const _NV_TARGET_VAL_SM_90 = @as(c_int, 900);
pub const _NV_TARGET_VAL_SM_100 = @as(c_int, 1000);
pub const _NV_TARGET_VAL = @as(c_int, 0);
pub const _NV_TARGET_IS_HOST = @as(c_int, 1);
pub const _NV_TARGET_IS_DEVICE = @as(c_int, 0);
pub const _NV_DEVICE_CHECK = @compileError("unable to translate macro: undefined identifier `false`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:164:11
pub inline fn _NV_TARGET_PROVIDES(q: anytype) @TypeOf(_NV_DEVICE_CHECK(_NV_TARGET_VAL >= q)) {
    _ = &q;
    return _NV_DEVICE_CHECK(_NV_TARGET_VAL >= q);
}
pub inline fn _NV_TARGET_IS_EXACTLY(q: anytype) @TypeOf(_NV_DEVICE_CHECK(_NV_TARGET_VAL == q)) {
    _ = &q;
    return _NV_DEVICE_CHECK(_NV_TARGET_VAL == q);
}
pub const _NV_TARGET___NV_PROVIDES_SM_35 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_35);
pub const _NV_TARGET___NV_PROVIDES_SM_37 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_37);
pub const _NV_TARGET___NV_PROVIDES_SM_50 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_50);
pub const _NV_TARGET___NV_PROVIDES_SM_52 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_52);
pub const _NV_TARGET___NV_PROVIDES_SM_53 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_53);
pub const _NV_TARGET___NV_PROVIDES_SM_60 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_60);
pub const _NV_TARGET___NV_PROVIDES_SM_61 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_61);
pub const _NV_TARGET___NV_PROVIDES_SM_62 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_62);
pub const _NV_TARGET___NV_PROVIDES_SM_70 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_70);
pub const _NV_TARGET___NV_PROVIDES_SM_72 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_72);
pub const _NV_TARGET___NV_PROVIDES_SM_75 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_75);
pub const _NV_TARGET___NV_PROVIDES_SM_80 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_80);
pub const _NV_TARGET___NV_PROVIDES_SM_86 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_86);
pub const _NV_TARGET___NV_PROVIDES_SM_87 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_87);
pub const _NV_TARGET___NV_PROVIDES_SM_89 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_89);
pub const _NV_TARGET___NV_PROVIDES_SM_90 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_90);
pub const _NV_TARGET___NV_PROVIDES_SM_100 = _NV_TARGET_PROVIDES(_NV_TARGET_VAL_SM_100);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_35 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_35);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_37 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_37);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_50 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_50);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_52 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_52);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_53 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_53);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_60 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_60);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_61 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_61);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_62 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_62);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_70 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_70);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_72 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_72);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_75 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_75);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_80 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_80);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_86 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_86);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_87 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_87);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_89 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_89);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_90 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_90);
pub const _NV_TARGET___NV_IS_EXACTLY_SM_100 = _NV_TARGET_IS_EXACTLY(_NV_TARGET_VAL_SM_100);
pub const NV_PROVIDES_SM_35 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_35`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:207:9
pub const NV_PROVIDES_SM_37 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_37`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:208:9
pub const NV_PROVIDES_SM_50 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_50`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:209:9
pub const NV_PROVIDES_SM_52 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_52`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:210:9
pub const NV_PROVIDES_SM_53 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_53`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:211:9
pub const NV_PROVIDES_SM_60 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_60`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:212:9
pub const NV_PROVIDES_SM_61 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_61`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:213:9
pub const NV_PROVIDES_SM_62 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_62`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:214:9
pub const NV_PROVIDES_SM_70 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_70`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:215:9
pub const NV_PROVIDES_SM_72 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_72`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:216:9
pub const NV_PROVIDES_SM_75 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_75`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:217:9
pub const NV_PROVIDES_SM_80 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_80`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:218:9
pub const NV_PROVIDES_SM_86 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_86`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:219:9
pub const NV_PROVIDES_SM_87 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_87`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:220:9
pub const NV_PROVIDES_SM_89 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_89`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:221:9
pub const NV_PROVIDES_SM_90 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_90`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:222:9
pub const NV_PROVIDES_SM_100 = @compileError("unable to translate macro: undefined identifier `__NV_PROVIDES_SM_100`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:223:9
pub const NV_IS_EXACTLY_SM_35 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_35`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:225:9
pub const NV_IS_EXACTLY_SM_37 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_37`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:226:9
pub const NV_IS_EXACTLY_SM_50 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_50`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:227:9
pub const NV_IS_EXACTLY_SM_52 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_52`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:228:9
pub const NV_IS_EXACTLY_SM_53 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_53`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:229:9
pub const NV_IS_EXACTLY_SM_60 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_60`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:230:9
pub const NV_IS_EXACTLY_SM_61 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_61`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:231:9
pub const NV_IS_EXACTLY_SM_62 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_62`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:232:9
pub const NV_IS_EXACTLY_SM_70 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_70`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:233:9
pub const NV_IS_EXACTLY_SM_72 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_72`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:234:9
pub const NV_IS_EXACTLY_SM_75 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_75`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:235:9
pub const NV_IS_EXACTLY_SM_80 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_80`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:236:9
pub const NV_IS_EXACTLY_SM_86 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_86`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:237:9
pub const NV_IS_EXACTLY_SM_87 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_87`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:238:9
pub const NV_IS_EXACTLY_SM_89 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_89`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:239:9
pub const NV_IS_EXACTLY_SM_90 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_90`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:240:9
pub const NV_IS_EXACTLY_SM_100 = @compileError("unable to translate macro: undefined identifier `__NV_IS_EXACTLY_SM_100`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:241:9
pub const NV_HAS_FEATURE_SM_90a = NV_NO_TARGET;
pub const NV_HAS_FEATURE_SM_100a = NV_NO_TARGET;
pub const NV_IS_HOST = @compileError("unable to translate macro: undefined identifier `__NV_IS_HOST`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:248:9
pub const NV_IS_DEVICE = @compileError("unable to translate macro: undefined identifier `__NV_IS_DEVICE`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:249:9
pub const NV_ANY_TARGET = @compileError("unable to translate macro: undefined identifier `__NV_ANY_TARGET`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:251:9
pub const NV_NO_TARGET = @compileError("unable to translate macro: undefined identifier `__NV_NO_TARGET`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:252:9
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_35 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_37 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_50 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_52 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_53 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_60 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_61 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_62 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_70 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_72 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_75 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_80 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_86 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_87 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_89 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_90 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_EXACTLY_SM_100 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_HAS_FEATURE_SM_90a = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_HAS_FEATURE_SM_100a = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_IS_HOST = @as(c_int, 1);
pub const _NV_TARGET_BOOL___NV_IS_DEVICE = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_ANY_TARGET = @as(c_int, 1);
pub const _NV_TARGET_BOOL___NV_NO_TARGET = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_35 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_37 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_50 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_52 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_53 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_60 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_61 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_62 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_70 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_72 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_75 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_80 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_86 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_87 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_89 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_90 = @as(c_int, 0);
pub const _NV_TARGET_BOOL___NV_PROVIDES_SM_100 = @as(c_int, 0);
pub const _NV_ARCH_COND_CAT1 = @compileError("unable to translate macro: undefined identifier `_NV_TARGET_BOOL_`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:500:11
pub inline fn _NV_ARCH_COND_CAT(cond: anytype) @TypeOf(_NV_EVAL(_NV_ARCH_COND_CAT1(cond))) {
    _ = &cond;
    return _NV_EVAL(_NV_ARCH_COND_CAT1(cond));
}
pub const _NV_TARGET_EMPTY_PARAM = @compileError("unable to translate C expr: unexpected token ';'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:503:11
pub const _NV_BLOCK_EXPAND = @compileError("unable to translate C expr: unexpected token '{'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/nv/detail/__target_macros:512:13
pub inline fn _NV_TARGET_IF(cond: anytype, t: anytype) @TypeOf(_NV_IF(_NV_ARCH_COND_CAT(cond), t, _NV_TARGET_EMPTY_PARAM)) {
    _ = &cond;
    _ = &t;
    return _NV_IF(_NV_ARCH_COND_CAT(cond), t, _NV_TARGET_EMPTY_PARAM);
}
pub inline fn _NV_TARGET_IF_ELSE(cond: anytype, t: anytype, f: anytype) @TypeOf(_NV_IF(_NV_ARCH_COND_CAT(cond), t, f)) {
    _ = &cond;
    _ = &t;
    _ = &f;
    return _NV_IF(_NV_ARCH_COND_CAT(cond), t, f);
}
pub inline fn NV_IF_TARGET(cond: anytype, t: anytype) @TypeOf(_NV_BLOCK_EXPAND(_NV_TARGET_IF(cond, t))) {
    _ = &cond;
    _ = &t;
    return _NV_BLOCK_EXPAND(_NV_TARGET_IF(cond, t));
}
pub inline fn NV_IF_ELSE_TARGET(cond: anytype, t: anytype, f: anytype) @TypeOf(_NV_BLOCK_EXPAND(_NV_TARGET_IF_ELSE(cond, t, f))) {
    _ = &cond;
    _ = &t;
    _ = &f;
    return _NV_BLOCK_EXPAND(_NV_TARGET_IF_ELSE(cond, t, f));
}
pub const __CUDA_FP16_INLINE__ = @compileError("unable to translate C expr: unexpected token 'inline'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_fp16.h:4514:9
pub const __CUDA_FP16_FORCEINLINE__ = __forceinline__;
pub const __CUDA_ALIGN__ = @compileError("unable to translate macro: undefined identifier `aligned`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_fp16.h:4527:9
pub const __CUDA_FP16_CONSTEXPR__ = "";
pub const __CUDA_FP16_HPP__ = "";
pub inline fn IF_DEVICE_OR_CUDACC(d: anytype, c: anytype, f: anytype) @TypeOf(NV_IF_ELSE_TARGET(NV_IS_DEVICE, d, f)) {
    _ = &d;
    _ = &c;
    _ = &f;
    return NV_IF_ELSE_TARGET(NV_IS_DEVICE, d, f);
}
pub const __BINARY_OP_HALF_MACRO = @compileError("unable to translate macro: undefined identifier `__half`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_fp16.hpp:66:9
pub const __BINARY_OP_HALF2_MACRO = @compileError("unable to translate macro: undefined identifier `__half2`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_fp16.hpp:72:9
pub const __TERNARY_OP_HALF_MACRO = @compileError("unable to translate macro: undefined identifier `__half`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_fp16.hpp:78:9
pub const __TERNARY_OP_HALF2_MACRO = @compileError("unable to translate macro: undefined identifier `__half2`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_fp16.hpp:84:9
pub const __CUDA_BF16_H__ = "";
pub const ___CUDA_BF16_STRINGIFY_INNERMOST = @compileError("unable to translate C expr: unexpected token '#'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_bf16.h:143:9
pub inline fn __CUDA_BF16_STRINGIFY(x: anytype) @TypeOf(___CUDA_BF16_STRINGIFY_INNERMOST(x)) {
    _ = &x;
    return ___CUDA_BF16_STRINGIFY_INNERMOST(x);
}
pub const __CUDA_BF16_INLINE__ = @compileError("unable to translate C expr: unexpected token 'inline'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cuda_bf16.h:4329:9
pub const __CUDA_BF16_FORCEINLINE__ = __forceinline__;
pub const __CUDA_BF16_CONSTEXPR__ = "";
pub const __CUDA_BF16_HPP__ = "";
pub const CUBLAS_VER_MAJOR = @as(c_int, 12);
pub const CUBLAS_VER_MINOR = @as(c_int, 8);
pub const CUBLAS_VER_PATCH = @as(c_int, 3);
pub const CUBLAS_VER_BUILD = @as(c_int, 14);
pub const CUBLAS_VERSION = ((CUBLAS_VER_MAJOR * @as(c_int, 10000)) + (CUBLAS_VER_MINOR * @as(c_int, 100))) + CUBLAS_VER_PATCH;
pub const cublasCreate = cublasCreate_v2;
pub const cublasDestroy = cublasDestroy_v2;
pub const cublasGetVersion = cublasGetVersion_v2;
pub const cublasSetWorkspace = cublasSetWorkspace_v2;
pub const cublasSetStream = cublasSetStream_v2;
pub const cublasGetStream = cublasGetStream_v2;
pub const cublasGetPointerMode = cublasGetPointerMode_v2;
pub const cublasSetPointerMode = cublasSetPointerMode_v2;
pub const cublasSnrm2 = cublasSnrm2_v2;
pub const cublasDnrm2 = cublasDnrm2_v2;
pub const cublasScnrm2 = cublasScnrm2_v2;
pub const cublasDznrm2 = cublasDznrm2_v2;
pub const cublasSdot = cublasSdot_v2;
pub const cublasDdot = cublasDdot_v2;
pub const cublasCdotu = cublasCdotu_v2;
pub const cublasCdotc = cublasCdotc_v2;
pub const cublasZdotu = cublasZdotu_v2;
pub const cublasZdotc = cublasZdotc_v2;
pub const cublasSscal = cublasSscal_v2;
pub const cublasDscal = cublasDscal_v2;
pub const cublasCscal = cublasCscal_v2;
pub const cublasCsscal = cublasCsscal_v2;
pub const cublasZscal = cublasZscal_v2;
pub const cublasZdscal = cublasZdscal_v2;
pub const cublasSaxpy = cublasSaxpy_v2;
pub const cublasDaxpy = cublasDaxpy_v2;
pub const cublasCaxpy = cublasCaxpy_v2;
pub const cublasZaxpy = cublasZaxpy_v2;
pub const cublasScopy = cublasScopy_v2;
pub const cublasDcopy = cublasDcopy_v2;
pub const cublasCcopy = cublasCcopy_v2;
pub const cublasZcopy = cublasZcopy_v2;
pub const cublasSswap = cublasSswap_v2;
pub const cublasDswap = cublasDswap_v2;
pub const cublasCswap = cublasCswap_v2;
pub const cublasZswap = cublasZswap_v2;
pub const cublasIsamax = cublasIsamax_v2;
pub const cublasIdamax = cublasIdamax_v2;
pub const cublasIcamax = cublasIcamax_v2;
pub const cublasIzamax = cublasIzamax_v2;
pub const cublasIsamin = cublasIsamin_v2;
pub const cublasIdamin = cublasIdamin_v2;
pub const cublasIcamin = cublasIcamin_v2;
pub const cublasIzamin = cublasIzamin_v2;
pub const cublasSasum = cublasSasum_v2;
pub const cublasDasum = cublasDasum_v2;
pub const cublasScasum = cublasScasum_v2;
pub const cublasDzasum = cublasDzasum_v2;
pub const cublasSrot = cublasSrot_v2;
pub const cublasDrot = cublasDrot_v2;
pub const cublasCrot = cublasCrot_v2;
pub const cublasCsrot = cublasCsrot_v2;
pub const cublasZrot = cublasZrot_v2;
pub const cublasZdrot = cublasZdrot_v2;
pub const cublasSrotg = cublasSrotg_v2;
pub const cublasDrotg = cublasDrotg_v2;
pub const cublasCrotg = cublasCrotg_v2;
pub const cublasZrotg = cublasZrotg_v2;
pub const cublasSrotm = cublasSrotm_v2;
pub const cublasDrotm = cublasDrotm_v2;
pub const cublasSrotmg = cublasSrotmg_v2;
pub const cublasDrotmg = cublasDrotmg_v2;
pub const cublasSgemv = cublasSgemv_v2;
pub const cublasDgemv = cublasDgemv_v2;
pub const cublasCgemv = cublasCgemv_v2;
pub const cublasZgemv = cublasZgemv_v2;
pub const cublasSgbmv = cublasSgbmv_v2;
pub const cublasDgbmv = cublasDgbmv_v2;
pub const cublasCgbmv = cublasCgbmv_v2;
pub const cublasZgbmv = cublasZgbmv_v2;
pub const cublasStrmv = cublasStrmv_v2;
pub const cublasDtrmv = cublasDtrmv_v2;
pub const cublasCtrmv = cublasCtrmv_v2;
pub const cublasZtrmv = cublasZtrmv_v2;
pub const cublasStbmv = cublasStbmv_v2;
pub const cublasDtbmv = cublasDtbmv_v2;
pub const cublasCtbmv = cublasCtbmv_v2;
pub const cublasZtbmv = cublasZtbmv_v2;
pub const cublasStpmv = cublasStpmv_v2;
pub const cublasDtpmv = cublasDtpmv_v2;
pub const cublasCtpmv = cublasCtpmv_v2;
pub const cublasZtpmv = cublasZtpmv_v2;
pub const cublasStrsv = cublasStrsv_v2;
pub const cublasDtrsv = cublasDtrsv_v2;
pub const cublasCtrsv = cublasCtrsv_v2;
pub const cublasZtrsv = cublasZtrsv_v2;
pub const cublasStpsv = cublasStpsv_v2;
pub const cublasDtpsv = cublasDtpsv_v2;
pub const cublasCtpsv = cublasCtpsv_v2;
pub const cublasZtpsv = cublasZtpsv_v2;
pub const cublasStbsv = cublasStbsv_v2;
pub const cublasDtbsv = cublasDtbsv_v2;
pub const cublasCtbsv = cublasCtbsv_v2;
pub const cublasZtbsv = cublasZtbsv_v2;
pub const cublasSsymv = cublasSsymv_v2;
pub const cublasDsymv = cublasDsymv_v2;
pub const cublasCsymv = cublasCsymv_v2;
pub const cublasZsymv = cublasZsymv_v2;
pub const cublasChemv = cublasChemv_v2;
pub const cublasZhemv = cublasZhemv_v2;
pub const cublasSsbmv = cublasSsbmv_v2;
pub const cublasDsbmv = cublasDsbmv_v2;
pub const cublasChbmv = cublasChbmv_v2;
pub const cublasZhbmv = cublasZhbmv_v2;
pub const cublasSspmv = cublasSspmv_v2;
pub const cublasDspmv = cublasDspmv_v2;
pub const cublasChpmv = cublasChpmv_v2;
pub const cublasZhpmv = cublasZhpmv_v2;
pub const cublasSger = cublasSger_v2;
pub const cublasDger = cublasDger_v2;
pub const cublasCgeru = cublasCgeru_v2;
pub const cublasCgerc = cublasCgerc_v2;
pub const cublasZgeru = cublasZgeru_v2;
pub const cublasZgerc = cublasZgerc_v2;
pub const cublasSsyr = cublasSsyr_v2;
pub const cublasDsyr = cublasDsyr_v2;
pub const cublasCsyr = cublasCsyr_v2;
pub const cublasZsyr = cublasZsyr_v2;
pub const cublasCher = cublasCher_v2;
pub const cublasZher = cublasZher_v2;
pub const cublasSspr = cublasSspr_v2;
pub const cublasDspr = cublasDspr_v2;
pub const cublasChpr = cublasChpr_v2;
pub const cublasZhpr = cublasZhpr_v2;
pub const cublasSsyr2 = cublasSsyr2_v2;
pub const cublasDsyr2 = cublasDsyr2_v2;
pub const cublasCsyr2 = cublasCsyr2_v2;
pub const cublasZsyr2 = cublasZsyr2_v2;
pub const cublasCher2 = cublasCher2_v2;
pub const cublasZher2 = cublasZher2_v2;
pub const cublasSspr2 = cublasSspr2_v2;
pub const cublasDspr2 = cublasDspr2_v2;
pub const cublasChpr2 = cublasChpr2_v2;
pub const cublasZhpr2 = cublasZhpr2_v2;
pub const cublasSgemm = cublasSgemm_v2;
pub const cublasDgemm = cublasDgemm_v2;
pub const cublasCgemm = cublasCgemm_v2;
pub const cublasZgemm = cublasZgemm_v2;
pub const cublasSsyrk = cublasSsyrk_v2;
pub const cublasDsyrk = cublasDsyrk_v2;
pub const cublasCsyrk = cublasCsyrk_v2;
pub const cublasZsyrk = cublasZsyrk_v2;
pub const cublasCherk = cublasCherk_v2;
pub const cublasZherk = cublasZherk_v2;
pub const cublasSsyr2k = cublasSsyr2k_v2;
pub const cublasDsyr2k = cublasDsyr2k_v2;
pub const cublasCsyr2k = cublasCsyr2k_v2;
pub const cublasZsyr2k = cublasZsyr2k_v2;
pub const cublasCher2k = cublasCher2k_v2;
pub const cublasZher2k = cublasZher2k_v2;
pub const cublasSsymm = cublasSsymm_v2;
pub const cublasDsymm = cublasDsymm_v2;
pub const cublasCsymm = cublasCsymm_v2;
pub const cublasZsymm = cublasZsymm_v2;
pub const cublasChemm = cublasChemm_v2;
pub const cublasZhemm = cublasZhemm_v2;
pub const cublasStrsm = cublasStrsm_v2;
pub const cublasDtrsm = cublasDtrsm_v2;
pub const cublasCtrsm = cublasCtrsm_v2;
pub const cublasZtrsm = cublasZtrsm_v2;
pub const cublasStrmm = cublasStrmm_v2;
pub const cublasDtrmm = cublasDtrmm_v2;
pub const cublasCtrmm = cublasCtrmm_v2;
pub const cublasZtrmm = cublasZtrmm_v2;
pub const cublasSnrm2_64 = cublasSnrm2_v2_64;
pub const cublasDnrm2_64 = cublasDnrm2_v2_64;
pub const cublasScnrm2_64 = cublasScnrm2_v2_64;
pub const cublasDznrm2_64 = cublasDznrm2_v2_64;
pub const cublasSdot_64 = cublasSdot_v2_64;
pub const cublasDdot_64 = cublasDdot_v2_64;
pub const cublasCdotu_64 = cublasCdotu_v2_64;
pub const cublasCdotc_64 = cublasCdotc_v2_64;
pub const cublasZdotu_64 = cublasZdotu_v2_64;
pub const cublasZdotc_64 = cublasZdotc_v2_64;
pub const cublasSscal_64 = cublasSscal_v2_64;
pub const cublasDscal_64 = cublasDscal_v2_64;
pub const cublasCscal_64 = cublasCscal_v2_64;
pub const cublasCsscal_64 = cublasCsscal_v2_64;
pub const cublasZscal_64 = cublasZscal_v2_64;
pub const cublasZdscal_64 = cublasZdscal_v2_64;
pub const cublasSaxpy_64 = cublasSaxpy_v2_64;
pub const cublasDaxpy_64 = cublasDaxpy_v2_64;
pub const cublasCaxpy_64 = cublasCaxpy_v2_64;
pub const cublasZaxpy_64 = cublasZaxpy_v2_64;
pub const cublasScopy_64 = cublasScopy_v2_64;
pub const cublasDcopy_64 = cublasDcopy_v2_64;
pub const cublasCcopy_64 = cublasCcopy_v2_64;
pub const cublasZcopy_64 = cublasZcopy_v2_64;
pub const cublasSswap_64 = cublasSswap_v2_64;
pub const cublasDswap_64 = cublasDswap_v2_64;
pub const cublasCswap_64 = cublasCswap_v2_64;
pub const cublasZswap_64 = cublasZswap_v2_64;
pub const cublasIsamax_64 = cublasIsamax_v2_64;
pub const cublasIdamax_64 = cublasIdamax_v2_64;
pub const cublasIcamax_64 = cublasIcamax_v2_64;
pub const cublasIzamax_64 = cublasIzamax_v2_64;
pub const cublasIsamin_64 = cublasIsamin_v2_64;
pub const cublasIdamin_64 = cublasIdamin_v2_64;
pub const cublasIcamin_64 = cublasIcamin_v2_64;
pub const cublasIzamin_64 = cublasIzamin_v2_64;
pub const cublasSasum_64 = cublasSasum_v2_64;
pub const cublasDasum_64 = cublasDasum_v2_64;
pub const cublasScasum_64 = cublasScasum_v2_64;
pub const cublasDzasum_64 = cublasDzasum_v2_64;
pub const cublasSrot_64 = cublasSrot_v2_64;
pub const cublasDrot_64 = cublasDrot_v2_64;
pub const cublasCrot_64 = cublasCrot_v2_64;
pub const cublasCsrot_64 = cublasCsrot_v2_64;
pub const cublasZrot_64 = cublasZrot_v2_64;
pub const cublasZdrot_64 = cublasZdrot_v2_64;
pub const cublasSrotg_64 = @compileError("unable to translate macro: undefined identifier `cublasSrotg_v2_64`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cublas_v2.h:339:9
pub const cublasDrotg_64 = @compileError("unable to translate macro: undefined identifier `cublasDrotg_v2_64`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cublas_v2.h:340:9
pub const cublasCrotg_64 = @compileError("unable to translate macro: undefined identifier `cublasCrotg_v2_64`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cublas_v2.h:341:9
pub const cublasZrotg_64 = @compileError("unable to translate macro: undefined identifier `cublasZrotg_v2_64`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cublas_v2.h:342:9
pub const cublasSrotm_64 = cublasSrotm_v2_64;
pub const cublasDrotm_64 = cublasDrotm_v2_64;
pub const cublasSrotmg_64 = @compileError("unable to translate macro: undefined identifier `cublasSrotmg_v2_64`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cublas_v2.h:347:9
pub const cublasDrotmg_64 = @compileError("unable to translate macro: undefined identifier `cublasDrotmg_v2_64`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cublas_v2.h:348:9
pub const cublasSgemv_64 = cublasSgemv_v2_64;
pub const cublasDgemv_64 = cublasDgemv_v2_64;
pub const cublasCgemv_64 = cublasCgemv_v2_64;
pub const cublasZgemv_64 = cublasZgemv_v2_64;
pub const cublasSgbmv_64 = cublasSgbmv_v2_64;
pub const cublasDgbmv_64 = cublasDgbmv_v2_64;
pub const cublasCgbmv_64 = cublasCgbmv_v2_64;
pub const cublasZgbmv_64 = cublasZgbmv_v2_64;
pub const cublasStrmv_64 = cublasStrmv_v2_64;
pub const cublasDtrmv_64 = cublasDtrmv_v2_64;
pub const cublasCtrmv_64 = cublasCtrmv_v2_64;
pub const cublasZtrmv_64 = cublasZtrmv_v2_64;
pub const cublasStbmv_64 = cublasStbmv_v2_64;
pub const cublasDtbmv_64 = cublasDtbmv_v2_64;
pub const cublasCtbmv_64 = cublasCtbmv_v2_64;
pub const cublasZtbmv_64 = cublasZtbmv_v2_64;
pub const cublasStpmv_64 = cublasStpmv_v2_64;
pub const cublasDtpmv_64 = cublasDtpmv_v2_64;
pub const cublasCtpmv_64 = cublasCtpmv_v2_64;
pub const cublasZtpmv_64 = cublasZtpmv_v2_64;
pub const cublasStrsv_64 = cublasStrsv_v2_64;
pub const cublasDtrsv_64 = cublasDtrsv_v2_64;
pub const cublasCtrsv_64 = cublasCtrsv_v2_64;
pub const cublasZtrsv_64 = cublasZtrsv_v2_64;
pub const cublasStpsv_64 = cublasStpsv_v2_64;
pub const cublasDtpsv_64 = cublasDtpsv_v2_64;
pub const cublasCtpsv_64 = cublasCtpsv_v2_64;
pub const cublasZtpsv_64 = cublasZtpsv_v2_64;
pub const cublasStbsv_64 = cublasStbsv_v2_64;
pub const cublasDtbsv_64 = cublasDtbsv_v2_64;
pub const cublasCtbsv_64 = cublasCtbsv_v2_64;
pub const cublasZtbsv_64 = cublasZtbsv_v2_64;
pub const cublasSsymv_64 = cublasSsymv_v2_64;
pub const cublasDsymv_64 = cublasDsymv_v2_64;
pub const cublasCsymv_64 = cublasCsymv_v2_64;
pub const cublasZsymv_64 = cublasZsymv_v2_64;
pub const cublasChemv_64 = cublasChemv_v2_64;
pub const cublasZhemv_64 = cublasZhemv_v2_64;
pub const cublasSsbmv_64 = cublasSsbmv_v2_64;
pub const cublasDsbmv_64 = cublasDsbmv_v2_64;
pub const cublasChbmv_64 = cublasChbmv_v2_64;
pub const cublasZhbmv_64 = cublasZhbmv_v2_64;
pub const cublasSspmv_64 = cublasSspmv_v2_64;
pub const cublasDspmv_64 = cublasDspmv_v2_64;
pub const cublasChpmv_64 = cublasChpmv_v2_64;
pub const cublasZhpmv_64 = cublasZhpmv_v2_64;
pub const cublasSger_64 = cublasSger_v2_64;
pub const cublasDger_64 = cublasDger_v2_64;
pub const cublasCgeru_64 = cublasCgeru_v2_64;
pub const cublasCgerc_64 = cublasCgerc_v2_64;
pub const cublasZgeru_64 = cublasZgeru_v2_64;
pub const cublasZgerc_64 = cublasZgerc_v2_64;
pub const cublasSsyr_64 = cublasSsyr_v2_64;
pub const cublasDsyr_64 = cublasDsyr_v2_64;
pub const cublasCsyr_64 = cublasCsyr_v2_64;
pub const cublasZsyr_64 = cublasZsyr_v2_64;
pub const cublasCher_64 = cublasCher_v2_64;
pub const cublasZher_64 = cublasZher_v2_64;
pub const cublasSspr_64 = cublasSspr_v2_64;
pub const cublasDspr_64 = cublasDspr_v2_64;
pub const cublasChpr_64 = cublasChpr_v2_64;
pub const cublasZhpr_64 = cublasZhpr_v2_64;
pub const cublasSsyr2_64 = cublasSsyr2_v2_64;
pub const cublasDsyr2_64 = cublasDsyr2_v2_64;
pub const cublasCsyr2_64 = cublasCsyr2_v2_64;
pub const cublasZsyr2_64 = cublasZsyr2_v2_64;
pub const cublasCher2_64 = cublasCher2_v2_64;
pub const cublasZher2_64 = cublasZher2_v2_64;
pub const cublasSspr2_64 = cublasSspr2_v2_64;
pub const cublasDspr2_64 = cublasDspr2_v2_64;
pub const cublasChpr2_64 = cublasChpr2_v2_64;
pub const cublasZhpr2_64 = cublasZhpr2_v2_64;
pub const cublasSgemm_64 = cublasSgemm_v2_64;
pub const cublasDgemm_64 = cublasDgemm_v2_64;
pub const cublasCgemm_64 = cublasCgemm_v2_64;
pub const cublasZgemm_64 = cublasZgemm_v2_64;
pub const cublasSsyrk_64 = cublasSsyrk_v2_64;
pub const cublasDsyrk_64 = cublasDsyrk_v2_64;
pub const cublasCsyrk_64 = cublasCsyrk_v2_64;
pub const cublasZsyrk_64 = cublasZsyrk_v2_64;
pub const cublasCherk_64 = cublasCherk_v2_64;
pub const cublasZherk_64 = cublasZherk_v2_64;
pub const cublasSsyr2k_64 = cublasSsyr2k_v2_64;
pub const cublasDsyr2k_64 = cublasDsyr2k_v2_64;
pub const cublasCsyr2k_64 = cublasCsyr2k_v2_64;
pub const cublasZsyr2k_64 = cublasZsyr2k_v2_64;
pub const cublasCher2k_64 = cublasCher2k_v2_64;
pub const cublasZher2k_64 = cublasZher2k_v2_64;
pub const cublasSsymm_64 = cublasSsymm_v2_64;
pub const cublasDsymm_64 = cublasDsymm_v2_64;
pub const cublasCsymm_64 = cublasCsymm_v2_64;
pub const cublasZsymm_64 = cublasZsymm_v2_64;
pub const cublasChemm_64 = cublasChemm_v2_64;
pub const cublasZhemm_64 = cublasZhemm_v2_64;
pub const cublasStrsm_64 = cublasStrsm_v2_64;
pub const cublasDtrsm_64 = cublasDtrsm_v2_64;
pub const cublasCtrsm_64 = cublasCtrsm_v2_64;
pub const cublasZtrsm_64 = cublasZtrsm_v2_64;
pub const cublasStrmm_64 = cublasStrmm_v2_64;
pub const cublasDtrmm_64 = cublasDtrmm_v2_64;
pub const cublasCtrmm_64 = cublasCtrmm_v2_64;
pub const cublasZtrmm_64 = cublasZtrmm_v2_64;
pub const CUDNN_H_ = "";
pub const CUDNN_VERSION_H_ = "";
pub const CUDNN_MAJOR = @as(c_int, 9);
pub const CUDNN_MINOR = @as(c_int, 7);
pub const CUDNN_PATCHLEVEL = @as(c_int, 1);
pub const CUDNN_VERSION = ((CUDNN_MAJOR * @as(c_int, 10000)) + (CUDNN_MINOR * @as(c_int, 100))) + CUDNN_PATCHLEVEL;
pub const CUDNN_MAX_SM_MAJOR_NUMBER = @as(c_int, 12);
pub const CUDNN_MAX_SM_MINOR_NUMBER = @as(c_int, 0);
pub const CUDNN_MAX_DEVICE_VERSION = (CUDNN_MAX_SM_MAJOR_NUMBER * @as(c_int, 100)) + (CUDNN_MAX_SM_MINOR_NUMBER * @as(c_int, 10));
pub const CUDNN_GRAPH_H_ = "";
pub const CUDNN_GRAPH_MAJOR = @as(c_int, 9);
pub const CUDNN_GRAPH_MINOR = @as(c_int, 7);
pub const CUDNN_GRAPH_PATCH = @as(c_int, 1);
pub const CUDNNWINAPI = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA\CUDNN\v9.7\include\12.8/cudnn_graph.h:75:9
pub const CUDNN_DEPRECATED = "";
pub const CUDNN_DEPRECATED_ENUM = "";
pub inline fn CUDNN_STATUS_FULL_ERROR_CODE(category: anytype, specific_err: anytype) cudnnStatus_t {
    _ = &category;
    _ = &specific_err;
    return @import("std").zig.c_translation.cast(cudnnStatus_t, (@as(c_int, 0) + category) + specific_err);
}
pub inline fn CUDNN_STATUS_CATEGORY(full_error_code: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(full_error_code, @as(c_int, 1000)) * @as(c_int, 1000)) {
    _ = &full_error_code;
    return @import("std").zig.c_translation.MacroArithmetic.div(full_error_code, @as(c_int, 1000)) * @as(c_int, 1000);
}
pub inline fn CUDNN_STATUS_SPECIFIC_ERROR(full_error_code: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.rem(full_error_code, @as(c_int, 1000))) {
    _ = &full_error_code;
    return @import("std").zig.c_translation.MacroArithmetic.rem(full_error_code, @as(c_int, 1000));
}
pub const CUDNN_SEV_ERROR_EN = @as(c_uint, 1) << CUDNN_SEV_ERROR;
pub const CUDNN_SEV_WARNING_EN = @as(c_uint, 1) << CUDNN_SEV_WARNING;
pub const CUDNN_SEV_INFO_EN = @as(c_uint, 1) << CUDNN_SEV_INFO;
pub const CUDNN_DIM_MAX = @as(c_int, 8);
pub const CUDNN_OPS_H_ = "";
pub const CUDNN_OPS_MAJOR = @as(c_int, 9);
pub const CUDNN_OPS_MINOR = @as(c_int, 7);
pub const CUDNN_OPS_PATCH = @as(c_int, 1);
pub const CUDNN_LRN_MIN_N = @as(c_int, 1);
pub const CUDNN_LRN_MAX_N = @as(c_int, 16);
pub const CUDNN_LRN_MIN_K = @as(f64, 1e-5);
pub const CUDNN_LRN_MIN_BETA = @as(f64, 0.01);
pub const CUDNN_BN_MIN_EPSILON = @as(f64, 0.0);
pub const CUDNN_ADV_H_ = "";
pub const CUDNN_ADV_MAJOR = @as(c_int, 9);
pub const CUDNN_ADV_MINOR = @as(c_int, 7);
pub const CUDNN_ADV_PATCH = @as(c_int, 1);
pub const CUDNN_RNN_PADDED_IO_DISABLED = @as(c_int, 0);
pub const CUDNN_RNN_PADDED_IO_ENABLED = @as(c_uint, 1) << @as(c_int, 0);
pub const CUDNN_SEQDATA_DIM_COUNT = @as(c_int, 4);
pub const CUDNN_ATTN_QUERYMAP_ALL_TO_ONE = @as(c_int, 0);
pub const CUDNN_ATTN_QUERYMAP_ONE_TO_ONE = @as(c_uint, 1) << @as(c_int, 0);
pub const CUDNN_ATTN_DISABLE_PROJ_BIASES = @as(c_int, 0);
pub const CUDNN_ATTN_ENABLE_PROJ_BIASES = @as(c_uint, 1) << @as(c_int, 1);
pub const CUDNN_ATTN_WKIND_COUNT = @as(c_int, 8);
pub const CUDNN_CNN_H_ = "";
pub const CUDNN_CNN_MAJOR = @as(c_int, 9);
pub const CUDNN_CNN_MINOR = @as(c_int, 7);
pub const CUDNN_CNN_PATCH = @as(c_int, 1);
pub const CURAND_H_ = "";
pub const CURANDAPI = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/curand.h:64:9
pub const CURAND_VER_MAJOR = @as(c_int, 10);
pub const CURAND_VER_MINOR = @as(c_int, 3);
pub const CURAND_VER_PATCH = @as(c_int, 9);
pub const CURAND_VER_BUILD = @as(c_int, 55);
pub const CURAND_VERSION = ((CURAND_VER_MAJOR * @as(c_int, 1000)) + (CURAND_VER_MINOR * @as(c_int, 100))) + CURAND_VER_PATCH;
pub const _CUFFT_H_ = "";
pub const CUFFTAPI = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cufft.h:64:9
pub const CUFFT_VER_MAJOR = @as(c_int, 11);
pub const CUFFT_VER_MINOR = @as(c_int, 3);
pub const CUFFT_VER_PATCH = @as(c_int, 3);
pub const CUFFT_VER_BUILD = @as(c_int, 41);
pub const CUFFT_VERSION = @as(c_int, 11303);
pub const MAX_CUFFT_ERROR = @as(c_int, 0x11);
pub const CUFFT_FORWARD = -@as(c_int, 1);
pub const CUFFT_INVERSE = @as(c_int, 1);
pub const CUFFT_COMPATIBILITY_DEFAULT = CUFFT_COMPATIBILITY_FFTW_PADDING;
pub const MAX_SHIM_RANK = @as(c_int, 3);
pub const CUSPARSE_H_ = "";
pub const _INC_STDIO = "";
pub const _STDIO_CONFIG_DEFINED = "";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = @as(c_ulonglong, 0x0001);
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = @as(c_ulonglong, 0x0002);
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = @as(c_ulonglong, 0x0004);
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = @as(c_ulonglong, 0x0008);
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = @as(c_ulonglong, 0x0010);
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = @as(c_ulonglong, 0x0020);
pub const _CRT_INTERNAL_SCANF_SECURECRT = @as(c_ulonglong, 0x0001);
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = @as(c_ulonglong, 0x0002);
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = @as(c_ulonglong, 0x0004);
pub const _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS = _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS | _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING;
pub const _CRT_INTERNAL_LOCAL_SCANF_OPTIONS = _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS;
pub const BUFSIZ = @as(c_int, 512);
pub const _NFILE = _NSTREAM_;
pub const _NSTREAM_ = @as(c_int, 512);
pub const _IOB_ENTRIES = @as(c_int, 20);
pub const EOF = -@as(c_int, 1);
pub const _FILE_DEFINED = "";
pub const _P_tmpdir = "\\";
pub const _wP_tmpdir = "\\";
pub const L_tmpnam = @as(c_int, 260);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const SEEK_SET = @as(c_int, 0);
pub const STDIN_FILENO = @as(c_int, 0);
pub const STDOUT_FILENO = @as(c_int, 1);
pub const STDERR_FILENO = @as(c_int, 2);
pub const FILENAME_MAX = @as(c_int, 260);
pub const FOPEN_MAX = @as(c_int, 20);
pub const _SYS_OPEN = @as(c_int, 20);
pub const TMP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const _OFF_T_DEFINED = "";
pub const _OFF_T_ = "";
pub const _OFF64_T_DEFINED = "";
pub const _FILE_OFFSET_BITS_SET_OFFT = "";
pub const _iob = __iob_func();
pub const _FPOS_T_DEFINED = "";
pub inline fn _FPOSOFF(fp: anytype) c_long {
    _ = &fp;
    return @import("std").zig.c_translation.cast(c_long, fp);
}
pub const _STDSTREAM_DEFINED = "";
pub const stdin = __acrt_iob_func(@as(c_int, 0));
pub const stdout = __acrt_iob_func(@as(c_int, 1));
pub const stderr = __acrt_iob_func(@as(c_int, 2));
pub const _IOFBF = @as(c_int, 0x0000);
pub const _IOLBF = @as(c_int, 0x0040);
pub const _IONBF = @as(c_int, 0x0004);
pub const __MINGW_PRINTF_FORMAT = @compileError("unable to translate macro: undefined identifier `__printf__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:247:9
pub const __MINGW_SCANF_FORMAT = @compileError("unable to translate macro: undefined identifier `__scanf__`");
// C:\zig\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\zig-windows-x86_64-0.14.0-dev.2989+bf6ee7cb3\lib\\libc\include\any-windows-any/stdio.h:248:9
pub const _FILE_OFFSET_BITS_SET_FSEEKO = "";
pub const _FILE_OFFSET_BITS_SET_FTELLO = "";
pub const popen = _popen;
pub const pclose = _pclose;
pub const _CRT_DIRECTORY_DEFINED = "";
pub const _WSTDIO_DEFINED = "";
pub const WEOF = @import("std").zig.c_translation.cast(wint_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hex));
pub const _INC_SWPRINTF_INL = "";
pub const wpopen = _wpopen;
pub inline fn _putwc_nolock(_c: anytype, _stm: anytype) @TypeOf(_fputwc_nolock(_c, _stm)) {
    _ = &_c;
    _ = &_stm;
    return _fputwc_nolock(_c, _stm);
}
pub inline fn _getwc_nolock(_c: anytype) @TypeOf(_fgetwc_nolock(_c)) {
    _ = &_c;
    return _fgetwc_nolock(_c);
}
pub const _STDIO_DEFINED = "";
pub inline fn _getchar_nolock() @TypeOf(_getc_nolock(stdin)) {
    return _getc_nolock(stdin);
}
pub inline fn _putchar_nolock(_c: anytype) @TypeOf(_putc_nolock(_c, stdout)) {
    _ = &_c;
    return _putc_nolock(_c, stdout);
}
pub inline fn _getwchar_nolock() @TypeOf(_getwc_nolock(stdin)) {
    return _getwc_nolock(stdin);
}
pub inline fn _putwchar_nolock(_c: anytype) @TypeOf(_putwc_nolock(_c, stdout)) {
    _ = &_c;
    return _putwc_nolock(_c, stdout);
}
pub const P_tmpdir = _P_tmpdir;
pub const SYS_OPEN = _SYS_OPEN;
pub const __MINGW_MBWC_CONVERT_DEFINED = "";
pub const _WSPAWN_DEFINED = "";
pub const _P_WAIT = @as(c_int, 0);
pub const _P_NOWAIT = @as(c_int, 1);
pub const _OLD_P_OVERLAY = @as(c_int, 2);
pub const _P_NOWAITO = @as(c_int, 3);
pub const _P_DETACH = @as(c_int, 4);
pub const _P_OVERLAY = @as(c_int, 2);
pub const _WAIT_CHILD = @as(c_int, 0);
pub const _WAIT_GRANDCHILD = @as(c_int, 1);
pub const _SPAWNV_DEFINED = "";
pub const _INC_STDIO_S = "";
pub const _STDIO_S_DEFINED = "";
pub const L_tmpnam_s = L_tmpnam;
pub const TMP_MAX_S = TMP_MAX;
pub const _WSTDIO_S_DEFINED = "";
pub const CUSPARSE_VER_MAJOR = @as(c_int, 12);
pub const CUSPARSE_VER_MINOR = @as(c_int, 5);
pub const CUSPARSE_VER_PATCH = @as(c_int, 7);
pub const CUSPARSE_VER_BUILD = @as(c_int, 53);
pub const CUSPARSE_VERSION = ((CUSPARSE_VER_MAJOR * @as(c_int, 1000)) + (CUSPARSE_VER_MINOR * @as(c_int, 100))) + CUSPARSE_VER_PATCH;
pub const CUSPARSEAPI = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusparse.h:80:17
pub const CUSPARSE_CPP_VERSION = @compileError("unable to translate macro: undefined identifier `__cplusplus`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusparse.h:89:12
pub const CUSPARSE_DEPRECATED_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusparse.h:134:16
pub const CUSPARSE_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusparse.h:137:16
pub const CUSPARSE_DEPRECATED_TYPE = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusparse.h:141:16
pub const CUSPARSE_DEPRECATED_TYPE_MSVC = "";
pub const CUSPARSE_DEPRECATED_ENUM_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusparse.h:177:16
pub const CUSPARSE_DEPRECATED_ENUM = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusparse.h:180:16
pub const CUSOLVERDN_H_ = "";
pub const CUSOLVER_COMMON_H_ = "";
pub const CUSOLVERAPI = @compileError("unable to translate C expr: unexpected token '__stdcall'");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusolver_common.h:57:15
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H_ = "";
pub const PRId64 = "lld";
pub const PRIi64 = "lli";
pub const PRIo64 = "llo";
pub const PRIu64 = "llu";
pub const PRIx64 = "llx";
pub const PRIX64 = "llX";
pub const PRId8 = "d";
pub const PRId16 = "d";
pub const PRId32 = "d";
pub const PRIdLEAST8 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdLEAST32 = "d";
pub const PRIdLEAST64 = PRId64;
pub const PRIdFAST8 = "d";
pub const PRIdFAST16 = "d";
pub const PRIdFAST32 = "d";
pub const PRIdFAST64 = PRId64;
pub const PRIdMAX = PRId64;
pub const PRIi8 = "i";
pub const PRIi16 = "i";
pub const PRIi32 = "i";
pub const PRIiLEAST8 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiLEAST32 = "i";
pub const PRIiLEAST64 = PRIi64;
pub const PRIiFAST8 = "i";
pub const PRIiFAST16 = "i";
pub const PRIiFAST32 = "i";
pub const PRIiFAST64 = PRIi64;
pub const PRIiMAX = PRIi64;
pub const PRIo8 = "o";
pub const PRIo16 = "o";
pub const PRIo32 = "o";
pub const PRIoLEAST8 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoLEAST32 = "o";
pub const PRIoLEAST64 = PRIo64;
pub const PRIoFAST8 = "o";
pub const PRIoFAST16 = "o";
pub const PRIoFAST32 = "o";
pub const PRIoFAST64 = PRIo64;
pub const PRIoMAX = PRIo64;
pub const PRIu8 = "u";
pub const PRIu16 = "u";
pub const PRIu32 = "u";
pub const PRIuLEAST8 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuLEAST32 = "u";
pub const PRIuLEAST64 = PRIu64;
pub const PRIuFAST8 = "u";
pub const PRIuFAST16 = "u";
pub const PRIuFAST32 = "u";
pub const PRIuFAST64 = PRIu64;
pub const PRIuMAX = PRIu64;
pub const PRIx8 = "x";
pub const PRIx16 = "x";
pub const PRIx32 = "x";
pub const PRIxLEAST8 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxLEAST32 = "x";
pub const PRIxLEAST64 = PRIx64;
pub const PRIxFAST8 = "x";
pub const PRIxFAST16 = "x";
pub const PRIxFAST32 = "x";
pub const PRIxFAST64 = PRIx64;
pub const PRIxMAX = PRIx64;
pub const PRIX8 = "X";
pub const PRIX16 = "X";
pub const PRIX32 = "X";
pub const PRIXLEAST8 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXLEAST32 = "X";
pub const PRIXLEAST64 = PRIX64;
pub const PRIXFAST8 = "X";
pub const PRIXFAST16 = "X";
pub const PRIXFAST32 = "X";
pub const PRIXFAST64 = PRIX64;
pub const PRIXMAX = PRIX64;
pub const SCNd16 = "hd";
pub const SCNd32 = "d";
pub const SCNd64 = PRId64;
pub const SCNdLEAST16 = "hd";
pub const SCNdLEAST32 = "d";
pub const SCNdLEAST64 = PRId64;
pub const SCNdFAST16 = "hd";
pub const SCNdFAST32 = "d";
pub const SCNdFAST64 = PRId64;
pub const SCNdMAX = PRId64;
pub const SCNi16 = "hi";
pub const SCNi32 = "i";
pub const SCNi64 = PRIi64;
pub const SCNiLEAST16 = "hi";
pub const SCNiLEAST32 = "i";
pub const SCNiLEAST64 = PRIi64;
pub const SCNiFAST16 = "hi";
pub const SCNiFAST32 = "i";
pub const SCNiFAST64 = PRIi64;
pub const SCNiMAX = PRIi64;
pub const SCNo16 = "ho";
pub const SCNo32 = "o";
pub const SCNo64 = PRIo64;
pub const SCNoLEAST16 = "ho";
pub const SCNoLEAST32 = "o";
pub const SCNoLEAST64 = PRIo64;
pub const SCNoFAST16 = "ho";
pub const SCNoFAST32 = "o";
pub const SCNoFAST64 = PRIo64;
pub const SCNoMAX = PRIo64;
pub const SCNx16 = "hx";
pub const SCNx32 = "x";
pub const SCNx64 = PRIx64;
pub const SCNxLEAST16 = "hx";
pub const SCNxLEAST32 = "x";
pub const SCNxLEAST64 = PRIx64;
pub const SCNxFAST16 = "hx";
pub const SCNxFAST32 = "x";
pub const SCNxFAST64 = PRIx64;
pub const SCNxMAX = PRIx64;
pub const SCNu16 = "hu";
pub const SCNu32 = "u";
pub const SCNu64 = PRIu64;
pub const SCNuLEAST16 = "hu";
pub const SCNuLEAST32 = "u";
pub const SCNuLEAST64 = PRIu64;
pub const SCNuFAST16 = "hu";
pub const SCNuFAST32 = "u";
pub const SCNuFAST64 = PRIu64;
pub const SCNuMAX = PRIu64;
pub const PRIdPTR = PRId64;
pub const PRIiPTR = PRIi64;
pub const PRIoPTR = PRIo64;
pub const PRIuPTR = PRIu64;
pub const PRIxPTR = PRIx64;
pub const PRIXPTR = PRIX64;
pub const SCNdPTR = PRId64;
pub const SCNiPTR = PRIi64;
pub const SCNoPTR = PRIo64;
pub const SCNxPTR = PRIx64;
pub const SCNuPTR = PRIu64;
pub const SCNd8 = "hhd";
pub const SCNdLEAST8 = "hhd";
pub const SCNdFAST8 = "hhd";
pub const SCNi8 = "hhi";
pub const SCNiLEAST8 = "hhi";
pub const SCNiFAST8 = "hhi";
pub const SCNo8 = "hho";
pub const SCNoLEAST8 = "hho";
pub const SCNoFAST8 = "hho";
pub const SCNx8 = "hhx";
pub const SCNxLEAST8 = "hhx";
pub const SCNxFAST8 = "hhx";
pub const SCNu8 = "hhu";
pub const SCNuLEAST8 = "hhu";
pub const SCNuFAST8 = "hhu";
pub const CUSOLVER_VER_MAJOR = @as(c_int, 11);
pub const CUSOLVER_VER_MINOR = @as(c_int, 7);
pub const CUSOLVER_VER_PATCH = @as(c_int, 2);
pub const CUSOLVER_VER_BUILD = @as(c_int, 55);
pub const CUSOLVER_VERSION = ((CUSOLVER_VER_MAJOR * @as(c_int, 1000)) + (CUSOLVER_VER_MINOR * @as(c_int, 100))) + CUSOLVER_VER_PATCH;
pub const CUSOLVER_CPP_VERSION = @compileError("unable to translate macro: undefined identifier `__cplusplus`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusolver_common.h:81:13
pub const CUSOLVER_DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusolver_common.h:106:15
pub const CUSOLVER_DEPRECATED_ENUM = @compileError("unable to translate macro: undefined identifier `deprecated`");
// C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\include/cusolver_common.h:128:15
pub const CUSOLVERMG_H_ = "";
pub const TOMO_OPS_API = @compileError("unable to translate macro: undefined identifier `dllimport`");
// src\kernel/tomo_dll.h:6:9
pub const TOMO_EXTERN_C = @compileError("unable to translate C expr: unexpected token 'extern'");
// src\kernel/tomo_dll.h:12:9
pub const threadlocaleinfostruct = struct_threadlocaleinfostruct;
pub const threadmbcinfostruct = struct_threadmbcinfostruct;
pub const __lc_time_data = struct___lc_time_data;
pub const localeinfo_struct = struct_localeinfo_struct;
pub const tagLC_ID = struct_tagLC_ID;
pub const _div_t = struct__div_t;
pub const _ldiv_t = struct__ldiv_t;
pub const _heapinfo = struct__heapinfo;
pub const CUctx_st = struct_CUctx_st;
pub const CUmod_st = struct_CUmod_st;
pub const CUfunc_st = struct_CUfunc_st;
pub const CUlib_st = struct_CUlib_st;
pub const CUkern_st = struct_CUkern_st;
pub const CUarray_st = struct_CUarray_st;
pub const CUmipmappedArray_st = struct_CUmipmappedArray_st;
pub const CUtexref_st = struct_CUtexref_st;
pub const CUsurfref_st = struct_CUsurfref_st;
pub const CUevent_st = struct_CUevent_st;
pub const CUstream_st = struct_CUstream_st;
pub const CUgraphicsResource_st = struct_CUgraphicsResource_st;
pub const CUextMemory_st = struct_CUextMemory_st;
pub const CUextSemaphore_st = struct_CUextSemaphore_st;
pub const CUgraph_st = struct_CUgraph_st;
pub const CUgraphNode_st = struct_CUgraphNode_st;
pub const CUgraphExec_st = struct_CUgraphExec_st;
pub const CUmemPoolHandle_st = struct_CUmemPoolHandle_st;
pub const CUuserObject_st = struct_CUuserObject_st;
pub const CUgraphDeviceUpdatableNode_st = struct_CUgraphDeviceUpdatableNode_st;
pub const CUasyncCallbackEntry_st = struct_CUasyncCallbackEntry_st;
pub const CUgreenCtx_st = struct_CUgreenCtx_st;
pub const CUuuid_st = struct_CUuuid_st;
pub const CUmemFabricHandle_st = struct_CUmemFabricHandle_st;
pub const CUipcEventHandle_st = struct_CUipcEventHandle_st;
pub const CUipcMemHandle_st = struct_CUipcMemHandle_st;
pub const CUipcMem_flags_enum = enum_CUipcMem_flags_enum;
pub const CUmemAttach_flags_enum = enum_CUmemAttach_flags_enum;
pub const CUctx_flags_enum = enum_CUctx_flags_enum;
pub const CUevent_sched_flags_enum = enum_CUevent_sched_flags_enum;
pub const cl_event_flags_enum = enum_cl_event_flags_enum;
pub const cl_context_flags_enum = enum_cl_context_flags_enum;
pub const CUstream_flags_enum = enum_CUstream_flags_enum;
pub const CUevent_flags_enum = enum_CUevent_flags_enum;
pub const CUevent_record_flags_enum = enum_CUevent_record_flags_enum;
pub const CUevent_wait_flags_enum = enum_CUevent_wait_flags_enum;
pub const CUstreamWaitValue_flags_enum = enum_CUstreamWaitValue_flags_enum;
pub const CUstreamWriteValue_flags_enum = enum_CUstreamWriteValue_flags_enum;
pub const CUstreamBatchMemOpType_enum = enum_CUstreamBatchMemOpType_enum;
pub const CUstreamMemoryBarrier_flags_enum = enum_CUstreamMemoryBarrier_flags_enum;
pub const CUstreamBatchMemOpParams_union = union_CUstreamBatchMemOpParams_union;
pub const CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st = struct_CUDA_BATCH_MEM_OP_NODE_PARAMS_v1_st;
pub const CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st = struct_CUDA_BATCH_MEM_OP_NODE_PARAMS_v2_st;
pub const CUoccupancy_flags_enum = enum_CUoccupancy_flags_enum;
pub const CUstreamUpdateCaptureDependencies_flags_enum = enum_CUstreamUpdateCaptureDependencies_flags_enum;
pub const CUasyncNotificationType_enum = enum_CUasyncNotificationType_enum;
pub const CUasyncNotificationInfo_st = struct_CUasyncNotificationInfo_st;
pub const CUarray_format_enum = enum_CUarray_format_enum;
pub const CUaddress_mode_enum = enum_CUaddress_mode_enum;
pub const CUfilter_mode_enum = enum_CUfilter_mode_enum;
pub const CUdevice_attribute_enum = enum_CUdevice_attribute_enum;
pub const CUdevprop_st = struct_CUdevprop_st;
pub const CUpointer_attribute_enum = enum_CUpointer_attribute_enum;
pub const CUfunction_attribute_enum = enum_CUfunction_attribute_enum;
pub const CUfunc_cache_enum = enum_CUfunc_cache_enum;
pub const CUsharedconfig_enum = enum_CUsharedconfig_enum;
pub const CUshared_carveout_enum = enum_CUshared_carveout_enum;
pub const CUmemorytype_enum = enum_CUmemorytype_enum;
pub const CUcomputemode_enum = enum_CUcomputemode_enum;
pub const CUmem_advise_enum = enum_CUmem_advise_enum;
pub const CUmem_range_attribute_enum = enum_CUmem_range_attribute_enum;
pub const CUjit_option_enum = enum_CUjit_option_enum;
pub const CUjit_target_enum = enum_CUjit_target_enum;
pub const CUjit_fallback_enum = enum_CUjit_fallback_enum;
pub const CUjit_cacheMode_enum = enum_CUjit_cacheMode_enum;
pub const CUjitInputType_enum = enum_CUjitInputType_enum;
pub const CUlinkState_st = struct_CUlinkState_st;
pub const CUgraphicsRegisterFlags_enum = enum_CUgraphicsRegisterFlags_enum;
pub const CUgraphicsMapResourceFlags_enum = enum_CUgraphicsMapResourceFlags_enum;
pub const CUarray_cubemap_face_enum = enum_CUarray_cubemap_face_enum;
pub const CUlimit_enum = enum_CUlimit_enum;
pub const CUresourcetype_enum = enum_CUresourcetype_enum;
pub const CUaccessProperty_enum = enum_CUaccessProperty_enum;
pub const CUaccessPolicyWindow_st = struct_CUaccessPolicyWindow_st;
pub const CUDA_KERNEL_NODE_PARAMS_st = struct_CUDA_KERNEL_NODE_PARAMS_st;
pub const CUDA_KERNEL_NODE_PARAMS_v2_st = struct_CUDA_KERNEL_NODE_PARAMS_v2_st;
pub const CUDA_KERNEL_NODE_PARAMS_v3_st = struct_CUDA_KERNEL_NODE_PARAMS_v3_st;
pub const CUDA_MEMSET_NODE_PARAMS_st = struct_CUDA_MEMSET_NODE_PARAMS_st;
pub const CUDA_MEMSET_NODE_PARAMS_v2_st = struct_CUDA_MEMSET_NODE_PARAMS_v2_st;
pub const CUDA_HOST_NODE_PARAMS_st = struct_CUDA_HOST_NODE_PARAMS_st;
pub const CUDA_HOST_NODE_PARAMS_v2_st = struct_CUDA_HOST_NODE_PARAMS_v2_st;
pub const CUgraphConditionalNodeType_enum = enum_CUgraphConditionalNodeType_enum;
pub const CUgraphNodeType_enum = enum_CUgraphNodeType_enum;
pub const CUgraphDependencyType_enum = enum_CUgraphDependencyType_enum;
pub const CUgraphEdgeData_st = struct_CUgraphEdgeData_st;
pub const CUgraphInstantiateResult_enum = enum_CUgraphInstantiateResult_enum;
pub const CUDA_GRAPH_INSTANTIATE_PARAMS_st = struct_CUDA_GRAPH_INSTANTIATE_PARAMS_st;
pub const CUsynchronizationPolicy_enum = enum_CUsynchronizationPolicy_enum;
pub const CUclusterSchedulingPolicy_enum = enum_CUclusterSchedulingPolicy_enum;
pub const CUlaunchMemSyncDomain_enum = enum_CUlaunchMemSyncDomain_enum;
pub const CUlaunchMemSyncDomainMap_st = struct_CUlaunchMemSyncDomainMap_st;
pub const CUlaunchAttributeID_enum = enum_CUlaunchAttributeID_enum;
pub const CUlaunchAttributeValue_union = union_CUlaunchAttributeValue_union;
pub const CUlaunchAttribute_st = struct_CUlaunchAttribute_st;
pub const CUlaunchConfig_st = struct_CUlaunchConfig_st;
pub const CUstreamCaptureStatus_enum = enum_CUstreamCaptureStatus_enum;
pub const CUstreamCaptureMode_enum = enum_CUstreamCaptureMode_enum;
pub const CUdriverProcAddress_flags_enum = enum_CUdriverProcAddress_flags_enum;
pub const CUdriverProcAddressQueryResult_enum = enum_CUdriverProcAddressQueryResult_enum;
pub const CUexecAffinityType_enum = enum_CUexecAffinityType_enum;
pub const CUexecAffinitySmCount_st = struct_CUexecAffinitySmCount_st;
pub const CUexecAffinityParam_st = struct_CUexecAffinityParam_st;
pub const CUcigDataType_enum = enum_CUcigDataType_enum;
pub const CUctxCigParam_st = struct_CUctxCigParam_st;
pub const CUctxCreateParams_st = struct_CUctxCreateParams_st;
pub const CUlibraryOption_enum = enum_CUlibraryOption_enum;
pub const CUlibraryHostUniversalFunctionAndDataTable_st = struct_CUlibraryHostUniversalFunctionAndDataTable_st;
pub const cudaError_enum = enum_cudaError_enum;
pub const CUdevice_P2PAttribute_enum = enum_CUdevice_P2PAttribute_enum;
pub const CUDA_MEMCPY2D_st = struct_CUDA_MEMCPY2D_st;
pub const CUDA_MEMCPY3D_st = struct_CUDA_MEMCPY3D_st;
pub const CUDA_MEMCPY3D_PEER_st = struct_CUDA_MEMCPY3D_PEER_st;
pub const CUDA_MEMCPY_NODE_PARAMS_st = struct_CUDA_MEMCPY_NODE_PARAMS_st;
pub const CUDA_ARRAY_DESCRIPTOR_st = struct_CUDA_ARRAY_DESCRIPTOR_st;
pub const CUDA_ARRAY3D_DESCRIPTOR_st = struct_CUDA_ARRAY3D_DESCRIPTOR_st;
pub const CUDA_ARRAY_SPARSE_PROPERTIES_st = struct_CUDA_ARRAY_SPARSE_PROPERTIES_st;
pub const CUDA_ARRAY_MEMORY_REQUIREMENTS_st = struct_CUDA_ARRAY_MEMORY_REQUIREMENTS_st;
pub const CUDA_RESOURCE_DESC_st = struct_CUDA_RESOURCE_DESC_st;
pub const CUDA_TEXTURE_DESC_st = struct_CUDA_TEXTURE_DESC_st;
pub const CUresourceViewFormat_enum = enum_CUresourceViewFormat_enum;
pub const CUDA_RESOURCE_VIEW_DESC_st = struct_CUDA_RESOURCE_VIEW_DESC_st;
pub const CUtensorMap_st = struct_CUtensorMap_st;
pub const CUtensorMapDataType_enum = enum_CUtensorMapDataType_enum;
pub const CUtensorMapInterleave_enum = enum_CUtensorMapInterleave_enum;
pub const CUtensorMapSwizzle_enum = enum_CUtensorMapSwizzle_enum;
pub const CUtensorMapL2promotion_enum = enum_CUtensorMapL2promotion_enum;
pub const CUtensorMapFloatOOBfill_enum = enum_CUtensorMapFloatOOBfill_enum;
pub const CUtensorMapIm2ColWideMode_enum = enum_CUtensorMapIm2ColWideMode_enum;
pub const CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st = struct_CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st;
pub const CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum = enum_CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum;
pub const CUDA_LAUNCH_PARAMS_st = struct_CUDA_LAUNCH_PARAMS_st;
pub const CUexternalMemoryHandleType_enum = enum_CUexternalMemoryHandleType_enum;
pub const CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st = struct_CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st;
pub const CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st = struct_CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st;
pub const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st = struct_CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st;
pub const CUexternalSemaphoreHandleType_enum = enum_CUexternalSemaphoreHandleType_enum;
pub const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st = struct_CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st;
pub const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st = struct_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st;
pub const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st = struct_CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st;
pub const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st = struct_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st;
pub const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st = struct_CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v2_st;
pub const CUDA_EXT_SEM_WAIT_NODE_PARAMS_st = struct_CUDA_EXT_SEM_WAIT_NODE_PARAMS_st;
pub const CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st = struct_CUDA_EXT_SEM_WAIT_NODE_PARAMS_v2_st;
pub const CUmemAllocationHandleType_enum = enum_CUmemAllocationHandleType_enum;
pub const CUmemAccess_flags_enum = enum_CUmemAccess_flags_enum;
pub const CUmemLocationType_enum = enum_CUmemLocationType_enum;
pub const CUmemAllocationType_enum = enum_CUmemAllocationType_enum;
pub const CUmemAllocationGranularity_flags_enum = enum_CUmemAllocationGranularity_flags_enum;
pub const CUmemRangeHandleType_enum = enum_CUmemRangeHandleType_enum;
pub const CUmemRangeFlags_enum = enum_CUmemRangeFlags_enum;
pub const CUarraySparseSubresourceType_enum = enum_CUarraySparseSubresourceType_enum;
pub const CUmemOperationType_enum = enum_CUmemOperationType_enum;
pub const CUmemHandleType_enum = enum_CUmemHandleType_enum;
pub const CUarrayMapInfo_st = struct_CUarrayMapInfo_st;
pub const CUmemLocation_st = struct_CUmemLocation_st;
pub const CUmemAllocationCompType_enum = enum_CUmemAllocationCompType_enum;
pub const CUmemAllocationProp_st = struct_CUmemAllocationProp_st;
pub const CUmulticastGranularity_flags_enum = enum_CUmulticastGranularity_flags_enum;
pub const CUmulticastObjectProp_st = struct_CUmulticastObjectProp_st;
pub const CUmemAccessDesc_st = struct_CUmemAccessDesc_st;
pub const CUgraphExecUpdateResult_enum = enum_CUgraphExecUpdateResult_enum;
pub const CUgraphExecUpdateResultInfo_st = struct_CUgraphExecUpdateResultInfo_st;
pub const CUmemPool_attribute_enum = enum_CUmemPool_attribute_enum;
pub const CUmemPoolProps_st = struct_CUmemPoolProps_st;
pub const CUmemPoolPtrExportData_st = struct_CUmemPoolPtrExportData_st;
pub const CUDA_MEM_ALLOC_NODE_PARAMS_v1_st = struct_CUDA_MEM_ALLOC_NODE_PARAMS_v1_st;
pub const CUDA_MEM_ALLOC_NODE_PARAMS_v2_st = struct_CUDA_MEM_ALLOC_NODE_PARAMS_v2_st;
pub const CUDA_MEM_FREE_NODE_PARAMS_st = struct_CUDA_MEM_FREE_NODE_PARAMS_st;
pub const CUgraphMem_attribute_enum = enum_CUgraphMem_attribute_enum;
pub const CUDA_CHILD_GRAPH_NODE_PARAMS_st = struct_CUDA_CHILD_GRAPH_NODE_PARAMS_st;
pub const CUDA_EVENT_RECORD_NODE_PARAMS_st = struct_CUDA_EVENT_RECORD_NODE_PARAMS_st;
pub const CUDA_EVENT_WAIT_NODE_PARAMS_st = struct_CUDA_EVENT_WAIT_NODE_PARAMS_st;
pub const CUgraphNodeParams_st = struct_CUgraphNodeParams_st;
pub const CUflushGPUDirectRDMAWritesOptions_enum = enum_CUflushGPUDirectRDMAWritesOptions_enum;
pub const CUGPUDirectRDMAWritesOrdering_enum = enum_CUGPUDirectRDMAWritesOrdering_enum;
pub const CUflushGPUDirectRDMAWritesScope_enum = enum_CUflushGPUDirectRDMAWritesScope_enum;
pub const CUflushGPUDirectRDMAWritesTarget_enum = enum_CUflushGPUDirectRDMAWritesTarget_enum;
pub const CUgraphDebugDot_flags_enum = enum_CUgraphDebugDot_flags_enum;
pub const CUuserObject_flags_enum = enum_CUuserObject_flags_enum;
pub const CUuserObjectRetain_flags_enum = enum_CUuserObjectRetain_flags_enum;
pub const CUgraphInstantiate_flags_enum = enum_CUgraphInstantiate_flags_enum;
pub const CUdeviceNumaConfig_enum = enum_CUdeviceNumaConfig_enum;
pub const CUprocessState_enum = enum_CUprocessState_enum;
pub const CUcheckpointLockArgs_st = struct_CUcheckpointLockArgs_st;
pub const CUcheckpointCheckpointArgs_st = struct_CUcheckpointCheckpointArgs_st;
pub const CUcheckpointRestoreArgs_st = struct_CUcheckpointRestoreArgs_st;
pub const CUcheckpointUnlockArgs_st = struct_CUcheckpointUnlockArgs_st;
pub const CUmemcpyFlags_enum = enum_CUmemcpyFlags_enum;
pub const CUmemcpySrcAccessOrder_enum = enum_CUmemcpySrcAccessOrder_enum;
pub const CUmemcpyAttributes_st = struct_CUmemcpyAttributes_st;
pub const CUmemcpy3DOperandType_enum = enum_CUmemcpy3DOperandType_enum;
pub const CUoffset3D_st = struct_CUoffset3D_st;
pub const CUextent3D_st = struct_CUextent3D_st;
pub const CUmemcpy3DOperand_st = struct_CUmemcpy3DOperand_st;
pub const CUDA_MEMCPY3D_BATCH_OP_st = struct_CUDA_MEMCPY3D_BATCH_OP_st;
pub const CUmoduleLoadingMode_enum = enum_CUmoduleLoadingMode_enum;
pub const CUmemDecompressAlgorithm_enum = enum_CUmemDecompressAlgorithm_enum;
pub const CUmemDecompressParams_st = struct_CUmemDecompressParams_st;
pub const CUfunctionLoadingState_enum = enum_CUfunctionLoadingState_enum;
pub const CUcoredumpSettings_enum = enum_CUcoredumpSettings_enum;
pub const CUdevResourceDesc_st = struct_CUdevResourceDesc_st;
pub const CUdevSmResource_st = struct_CUdevSmResource_st;
pub const CUdevResource_st = struct_CUdevResource_st;
pub const cudaRoundMode = enum_cudaRoundMode;
pub const cudaError = enum_cudaError;
pub const cudaChannelFormatKind = enum_cudaChannelFormatKind;
pub const cudaChannelFormatDesc = struct_cudaChannelFormatDesc;
pub const cudaArray = struct_cudaArray;
pub const cudaMipmappedArray = struct_cudaMipmappedArray;
pub const cudaArraySparseProperties = struct_cudaArraySparseProperties;
pub const cudaArrayMemoryRequirements = struct_cudaArrayMemoryRequirements;
pub const cudaMemoryType = enum_cudaMemoryType;
pub const cudaMemcpyKind = enum_cudaMemcpyKind;
pub const cudaPitchedPtr = struct_cudaPitchedPtr;
pub const cudaExtent = struct_cudaExtent;
pub const cudaPos = struct_cudaPos;
pub const cudaMemcpy3DParms = struct_cudaMemcpy3DParms;
pub const cudaMemcpyNodeParams = struct_cudaMemcpyNodeParams;
pub const cudaMemcpy3DPeerParms = struct_cudaMemcpy3DPeerParms;
pub const cudaMemsetParams = struct_cudaMemsetParams;
pub const cudaMemsetParamsV2 = struct_cudaMemsetParamsV2;
pub const cudaAccessProperty = enum_cudaAccessProperty;
pub const cudaAccessPolicyWindow = struct_cudaAccessPolicyWindow;
pub const cudaHostNodeParams = struct_cudaHostNodeParams;
pub const cudaHostNodeParamsV2 = struct_cudaHostNodeParamsV2;
pub const cudaStreamCaptureStatus = enum_cudaStreamCaptureStatus;
pub const cudaStreamCaptureMode = enum_cudaStreamCaptureMode;
pub const cudaSynchronizationPolicy = enum_cudaSynchronizationPolicy;
pub const cudaClusterSchedulingPolicy = enum_cudaClusterSchedulingPolicy;
pub const cudaStreamUpdateCaptureDependenciesFlags = enum_cudaStreamUpdateCaptureDependenciesFlags;
pub const cudaUserObjectFlags = enum_cudaUserObjectFlags;
pub const cudaUserObjectRetainFlags = enum_cudaUserObjectRetainFlags;
pub const cudaGraphicsResource = struct_cudaGraphicsResource;
pub const cudaGraphicsRegisterFlags = enum_cudaGraphicsRegisterFlags;
pub const cudaGraphicsMapFlags = enum_cudaGraphicsMapFlags;
pub const cudaGraphicsCubeFace = enum_cudaGraphicsCubeFace;
pub const cudaResourceType = enum_cudaResourceType;
pub const cudaResourceViewFormat = enum_cudaResourceViewFormat;
pub const cudaResourceDesc = struct_cudaResourceDesc;
pub const cudaResourceViewDesc = struct_cudaResourceViewDesc;
pub const cudaPointerAttributes = struct_cudaPointerAttributes;
pub const cudaFuncAttributes = struct_cudaFuncAttributes;
pub const cudaFuncAttribute = enum_cudaFuncAttribute;
pub const cudaFuncCache = enum_cudaFuncCache;
pub const cudaSharedMemConfig = enum_cudaSharedMemConfig;
pub const cudaSharedCarveout = enum_cudaSharedCarveout;
pub const cudaComputeMode = enum_cudaComputeMode;
pub const cudaLimit = enum_cudaLimit;
pub const cudaMemoryAdvise = enum_cudaMemoryAdvise;
pub const cudaMemRangeAttribute = enum_cudaMemRangeAttribute;
pub const cudaFlushGPUDirectRDMAWritesOptions = enum_cudaFlushGPUDirectRDMAWritesOptions;
pub const cudaGPUDirectRDMAWritesOrdering = enum_cudaGPUDirectRDMAWritesOrdering;
pub const cudaFlushGPUDirectRDMAWritesScope = enum_cudaFlushGPUDirectRDMAWritesScope;
pub const cudaFlushGPUDirectRDMAWritesTarget = enum_cudaFlushGPUDirectRDMAWritesTarget;
pub const cudaDeviceAttr = enum_cudaDeviceAttr;
pub const cudaMemPoolAttr = enum_cudaMemPoolAttr;
pub const cudaMemLocationType = enum_cudaMemLocationType;
pub const cudaMemLocation = struct_cudaMemLocation;
pub const cudaMemAccessFlags = enum_cudaMemAccessFlags;
pub const cudaMemAccessDesc = struct_cudaMemAccessDesc;
pub const cudaMemAllocationType = enum_cudaMemAllocationType;
pub const cudaMemAllocationHandleType = enum_cudaMemAllocationHandleType;
pub const cudaMemPoolProps = struct_cudaMemPoolProps;
pub const cudaMemPoolPtrExportData = struct_cudaMemPoolPtrExportData;
pub const cudaMemAllocNodeParams = struct_cudaMemAllocNodeParams;
pub const cudaMemAllocNodeParamsV2 = struct_cudaMemAllocNodeParamsV2;
pub const cudaMemFreeNodeParams = struct_cudaMemFreeNodeParams;
pub const cudaGraphMemAttributeType = enum_cudaGraphMemAttributeType;
pub const cudaMemcpyFlags = enum_cudaMemcpyFlags;
pub const cudaMemcpySrcAccessOrder = enum_cudaMemcpySrcAccessOrder;
pub const cudaMemcpyAttributes = struct_cudaMemcpyAttributes;
pub const cudaMemcpy3DOperandType = enum_cudaMemcpy3DOperandType;
pub const cudaOffset3D = struct_cudaOffset3D;
pub const cudaMemcpy3DOperand = struct_cudaMemcpy3DOperand;
pub const cudaMemcpy3DBatchOp = struct_cudaMemcpy3DBatchOp;
pub const cudaDeviceP2PAttr = enum_cudaDeviceP2PAttr;
pub const cudaDeviceProp = struct_cudaDeviceProp;
pub const cudaIpcEventHandle_st = struct_cudaIpcEventHandle_st;
pub const cudaIpcMemHandle_st = struct_cudaIpcMemHandle_st;
pub const cudaMemFabricHandle_st = struct_cudaMemFabricHandle_st;
pub const cudaExternalMemoryHandleType = enum_cudaExternalMemoryHandleType;
pub const cudaExternalMemoryHandleDesc = struct_cudaExternalMemoryHandleDesc;
pub const cudaExternalMemoryBufferDesc = struct_cudaExternalMemoryBufferDesc;
pub const cudaExternalMemoryMipmappedArrayDesc = struct_cudaExternalMemoryMipmappedArrayDesc;
pub const cudaExternalSemaphoreHandleType = enum_cudaExternalSemaphoreHandleType;
pub const cudaExternalSemaphoreHandleDesc = struct_cudaExternalSemaphoreHandleDesc;
pub const cudaExternalSemaphoreSignalParams_v1 = struct_cudaExternalSemaphoreSignalParams_v1;
pub const cudaExternalSemaphoreWaitParams_v1 = struct_cudaExternalSemaphoreWaitParams_v1;
pub const cudaExternalSemaphoreSignalParams = struct_cudaExternalSemaphoreSignalParams;
pub const cudaExternalSemaphoreWaitParams = struct_cudaExternalSemaphoreWaitParams;
pub const CUexternalMemory_st = struct_CUexternalMemory_st;
pub const CUexternalSemaphore_st = struct_CUexternalSemaphore_st;
pub const cudaJitOption = enum_cudaJitOption;
pub const cudaLibraryOption = enum_cudaLibraryOption;
pub const cudalibraryHostUniversalFunctionAndDataTable = struct_cudalibraryHostUniversalFunctionAndDataTable;
pub const cudaJit_CacheMode = enum_cudaJit_CacheMode;
pub const cudaJit_Fallback = enum_cudaJit_Fallback;
pub const cudaCGScope = enum_cudaCGScope;
pub const cudaLaunchParams = struct_cudaLaunchParams;
pub const cudaKernelNodeParams = struct_cudaKernelNodeParams;
pub const cudaKernelNodeParamsV2 = struct_cudaKernelNodeParamsV2;
pub const cudaExternalSemaphoreSignalNodeParams = struct_cudaExternalSemaphoreSignalNodeParams;
pub const cudaExternalSemaphoreSignalNodeParamsV2 = struct_cudaExternalSemaphoreSignalNodeParamsV2;
pub const cudaExternalSemaphoreWaitNodeParams = struct_cudaExternalSemaphoreWaitNodeParams;
pub const cudaExternalSemaphoreWaitNodeParamsV2 = struct_cudaExternalSemaphoreWaitNodeParamsV2;
pub const cudaGraphConditionalHandleFlags = enum_cudaGraphConditionalHandleFlags;
pub const cudaGraphConditionalNodeType = enum_cudaGraphConditionalNodeType;
pub const cudaConditionalNodeParams = struct_cudaConditionalNodeParams;
pub const cudaGraphNodeType = enum_cudaGraphNodeType;
pub const cudaChildGraphNodeParams = struct_cudaChildGraphNodeParams;
pub const cudaEventRecordNodeParams = struct_cudaEventRecordNodeParams;
pub const cudaEventWaitNodeParams = struct_cudaEventWaitNodeParams;
pub const cudaGraphNodeParams = struct_cudaGraphNodeParams;
pub const cudaGraphDependencyType_enum = enum_cudaGraphDependencyType_enum;
pub const cudaGraphEdgeData_st = struct_cudaGraphEdgeData_st;
pub const cudaGraphExecUpdateResult = enum_cudaGraphExecUpdateResult;
pub const cudaGraphInstantiateParams_st = struct_cudaGraphInstantiateParams_st;
pub const cudaGraphExecUpdateResultInfo_st = struct_cudaGraphExecUpdateResultInfo_st;
pub const cudaGraphKernelNodeField = enum_cudaGraphKernelNodeField;
pub const cudaGraphKernelNodeUpdate = struct_cudaGraphKernelNodeUpdate;
pub const cudaGetDriverEntryPointFlags = enum_cudaGetDriverEntryPointFlags;
pub const cudaDriverEntryPointQueryResult = enum_cudaDriverEntryPointQueryResult;
pub const cudaGraphDebugDotFlags = enum_cudaGraphDebugDotFlags;
pub const cudaGraphInstantiateFlags = enum_cudaGraphInstantiateFlags;
pub const cudaLaunchMemSyncDomainMap_st = struct_cudaLaunchMemSyncDomainMap_st;
pub const cudaLaunchAttribute_st = struct_cudaLaunchAttribute_st;
pub const cudaLaunchConfig_st = struct_cudaLaunchConfig_st;
pub const cudaDeviceNumaConfig = enum_cudaDeviceNumaConfig;
pub const cudaAsyncCallbackEntry = struct_cudaAsyncCallbackEntry;
pub const cudaAsyncNotificationType_enum = enum_cudaAsyncNotificationType_enum;
pub const cudaAsyncNotificationInfo = struct_cudaAsyncNotificationInfo;
pub const cudaSurfaceBoundaryMode = enum_cudaSurfaceBoundaryMode;
pub const cudaSurfaceFormatMode = enum_cudaSurfaceFormatMode;
pub const cudaTextureAddressMode = enum_cudaTextureAddressMode;
pub const cudaTextureFilterMode = enum_cudaTextureFilterMode;
pub const cudaTextureReadMode = enum_cudaTextureReadMode;
pub const cudaTextureDesc = struct_cudaTextureDesc;
pub const _exception = struct__exception;
pub const _complex = struct__complex;
pub const cublasContext = struct_cublasContext;
pub const cudnnContext = struct_cudnnContext;
pub const cudnnDebugStruct = struct_cudnnDebugStruct;
pub const cudnnFractionStruct = struct_cudnnFractionStruct;
pub const cudnnTensorStruct = struct_cudnnTensorStruct;
pub const cudnnPoolingStruct = struct_cudnnPoolingStruct;
pub const cudnnFilterStruct = struct_cudnnFilterStruct;
pub const cudnnLRNStruct = struct_cudnnLRNStruct;
pub const cudnnActivationStruct = struct_cudnnActivationStruct;
pub const cudnnSpatialTransformerStruct = struct_cudnnSpatialTransformerStruct;
pub const cudnnOpTensorStruct = struct_cudnnOpTensorStruct;
pub const cudnnReduceTensorStruct = struct_cudnnReduceTensorStruct;
pub const cudnnCTCLossStruct = struct_cudnnCTCLossStruct;
pub const cudnnTensorTransformStruct = struct_cudnnTensorTransformStruct;
pub const cudnnDropoutStruct = struct_cudnnDropoutStruct;
pub const cudnnRNNStruct = struct_cudnnRNNStruct;
pub const cudnnRNNDataStruct = struct_cudnnRNNDataStruct;
pub const cudnnSeqDataStruct = struct_cudnnSeqDataStruct;
pub const cudnnAttnStruct = struct_cudnnAttnStruct;
pub const cudnnConvolutionStruct = struct_cudnnConvolutionStruct;
pub const cudnnConvolutionFwdAlgoPerfStruct = struct_cudnnConvolutionFwdAlgoPerfStruct;
pub const cudnnConvolutionBwdDataAlgoPerfStruct = struct_cudnnConvolutionBwdDataAlgoPerfStruct;
pub const cudnnFusedOpsConstParamStruct = struct_cudnnFusedOpsConstParamStruct;
pub const cudnnFusedOpsVariantParamStruct = struct_cudnnFusedOpsVariantParamStruct;
pub const cudnnFusedOpsPlanStruct = struct_cudnnFusedOpsPlanStruct;
pub const cudnnConvolutionBwdFilterAlgoPerfStruct = struct_cudnnConvolutionBwdFilterAlgoPerfStruct;
pub const curandStatus = enum_curandStatus;
pub const curandRngType = enum_curandRngType;
pub const curandOrdering = enum_curandOrdering;
pub const curandDirectionVectorSet = enum_curandDirectionVectorSet;
pub const curandGenerator_st = struct_curandGenerator_st;
pub const curandDistributionShift_st = struct_curandDistributionShift_st;
pub const curandDistributionM2Shift_st = struct_curandDistributionM2Shift_st;
pub const curandHistogramM2_st = struct_curandHistogramM2_st;
pub const curandDiscreteDistribution_st = struct_curandDiscreteDistribution_st;
pub const curandMethod = enum_curandMethod;
pub const cufftResult_t = enum_cufftResult_t;
pub const cufftType_t = enum_cufftType_t;
pub const cufftCompatibility_t = enum_cufftCompatibility_t;
pub const cufftProperty_t = enum_cufftProperty_t;
pub const _iobuf = struct__iobuf;
pub const cusparseContext = struct_cusparseContext;
pub const cusparseMatDescr = struct_cusparseMatDescr;
pub const bsrsv2Info = struct_bsrsv2Info;
pub const bsrsm2Info = struct_bsrsm2Info;
pub const csric02Info = struct_csric02Info;
pub const bsric02Info = struct_bsric02Info;
pub const csrilu02Info = struct_csrilu02Info;
pub const bsrilu02Info = struct_bsrilu02Info;
pub const csru2csrInfo = struct_csru2csrInfo;
pub const cusparseColorInfo = struct_cusparseColorInfo;
pub const pruneInfo = struct_pruneInfo;
pub const cusparseSpVecDescr = struct_cusparseSpVecDescr;
pub const cusparseDnVecDescr = struct_cusparseDnVecDescr;
pub const cusparseSpMatDescr = struct_cusparseSpMatDescr;
pub const cusparseDnMatDescr = struct_cusparseDnMatDescr;
pub const cusparseSpSVDescr = struct_cusparseSpSVDescr;
pub const cusparseSpSMDescr = struct_cusparseSpSMDescr;
pub const cusparseSpGEMMDescr = struct_cusparseSpGEMMDescr;
pub const cusparseSpMMOpPlan = struct_cusparseSpMMOpPlan;
pub const cusolverDnContext = struct_cusolverDnContext;
pub const syevjInfo = struct_syevjInfo;
pub const gesvdjInfo = struct_gesvdjInfo;
pub const cusolverDnIRSParams = struct_cusolverDnIRSParams;
pub const cusolverDnIRSInfos = struct_cusolverDnIRSInfos;
pub const cusolverDnParams = struct_cusolverDnParams;
pub const cusolverMgContext = struct_cusolverMgContext;
