const c = @import("c_trans.zig");

pub const CudaError = error{
    InvalidValue,
    MemoryAllocation,
    InitializationError,
    CudartUnloading,
    ProfilerDisabled,
    ProfilerNotInitialized,
    ProfilerAlreadyStarted,
    ProfilerAlreadyStopped,
    InvalidConfiguration,
    InvalidPitchValue,
    InvalidSymbol,
    InvalidHostPointer,
    InvalidDevicePointer,
    InvalidTexture,
    InvalidTextureBinding,
    InvalidChannelDescriptor,
    InvalidMemcpyDirection,
    AddressOfConstant,
    TextureFetchFailed,
    TextureNotBound,
    SynchronizationError,
    InvalidFilterSetting,
    InvalidNormSetting,
    MixedDeviceExecution,
    NotYetImplemented,
    MemoryValueTooLarge,
    StubLibrary,
    InsufficientDriver,
    CallRequiresNewerDriver,
    InvalidSurface,
    DuplicateVariableName,
    DuplicateTextureName,
    DuplicateSurfaceName,
    DevicesUnavailable,
    IncompatibleDriverContext,
    MissingConfiguration,
    PriorLaunchFailure,
    LaunchMaxDepthExceeded,
    LaunchFileScopedTex,
    LaunchFileScopedSurf,
    SyncDepthExceeded,
    LaunchPendingCountExceeded,
    InvalidDeviceFunction,
    NoDevice,
    InvalidDevice,
    DeviceNotLicensed,
    SoftwareValidityNotEstablished,
    StartupFailure,
    InvalidKernelImage,
    DeviceUninitialized,
    MapBufferObjectFailed,
    UnmapBufferObjectFailed,
    ArrayIsMapped,
    AlreadyMapped,
    NoKernelImageForDevice,
    AlreadyAcquired,
    NotMapped,
    NotMappedAsArray,
    NotMappedAsPointer,
    ECCUncorrectable,
    UnsupportedLimit,
    DeviceAlreadyInUse,
    PeerAccessUnsupported,
    InvalidPtx,
    InvalidGraphicsContext,
    NvlinkUncorrectable,
    JitCompilerNotFound,
    UnsupportedPtxVersion,
    JitCompilationDisabled,
    UnsupportedExecAffinity,
    UnsupportedDevSideSync,
    InvalidSource,
    FileNotFound,
    SharedObjectSymbolNotFound,
    SharedObjectInitFailed,
    OperatingSystem,
    InvalidResourceHandle,
    IllegalState,
    LossyQuery,
    SymbolNotFound,
    NotReady,
    IllegalAddress,
    LaunchOutOfResources,
    LaunchTimeout,
    LaunchIncompatibleTexturing,
    PeerAccessAlreadyEnabled,
    PeerAccessNotEnabled,
    SetOnActiveProcess,
    ContextIsDestroyed,
    Assert,
    TooManyPeers,
    HostMemoryAlreadyRegistered,
    HostMemoryNotRegistered,
    HardwareStackError,
    IllegalInstruction,
    MisalignedAddress,
    InvalidAddressSpace,
    InvalidPc,
    LaunchFailure,
    CooperativeLaunchTooLarge,
    NotPermitted,
    NotSupported,
    SystemNotReady,
    SystemDriverMismatch,
    CompatNotSupportedOnDevice,
    MpsConnectionFailed,
    MpsRpcFailure,
    MpsServerNotReady,
    MpsMaxClientsReached,
    MpsMaxConnectionsReached,
    MpsClientTerminated,
    CdpNotSupported,
    CdpVersionMismatch,
    StreamCaptureUnsupported,
    StreamCaptureInvalidated,
    StreamCaptureMerge,
    StreamCaptureUnmatched,
    StreamCaptureUnjoined,
    StreamCaptureIsolation,
    StreamCaptureImplicit,
    CapturedEvent,
    StreamCaptureWrongThread,
    Timeout,
    GraphExecUpdateFailure,
    ExternalDevice,
    InvalidClusterSize,
    FunctionNotLoaded,
    InvalidResourceType,
    InvalidResourceConfiguration,
    Unknown,
    ApiFailureBase,
};

pub fn checkCuda(cuda_error: c.cudaError) CudaError!void {
    switch (cuda_error) {
        0 => {},
        1 => return CudaError.InvalidValue,
        2 => return CudaError.MemoryAllocation,
        3 => return CudaError.InitializationError,
        4 => return CudaError.CudartUnloading,
        5 => return CudaError.ProfilerDisabled,
        6 => return CudaError.ProfilerNotInitialized,
        7 => return CudaError.ProfilerAlreadyStarted,
        8 => return CudaError.ProfilerAlreadyStopped,
        9 => return CudaError.InvalidConfiguration,
        12 => return CudaError.InvalidPitchValue,
        13 => return CudaError.InvalidSymbol,
        16 => return CudaError.InvalidHostPointer,
        17 => return CudaError.InvalidDevicePointer,
        18 => return CudaError.InvalidTexture,
        19 => return CudaError.InvalidTextureBinding,
        20 => return CudaError.InvalidChannelDescriptor,
        21 => return CudaError.InvalidMemcpyDirection,
        22 => return CudaError.AddressOfConstant,
        23 => return CudaError.TextureFetchFailed,
        24 => return CudaError.TextureNotBound,
        25 => return CudaError.SynchronizationError,
        26 => return CudaError.InvalidFilterSetting,
        27 => return CudaError.InvalidNormSetting,
        28 => return CudaError.MixedDeviceExecution,
        31 => return CudaError.NotYetImplemented,
        32 => return CudaError.MemoryValueTooLarge,
        34 => return CudaError.StubLibrary,
        35 => return CudaError.InsufficientDriver,
        36 => return CudaError.CallRequiresNewerDriver,
        37 => return CudaError.InvalidSurface,
        43 => return CudaError.DuplicateVariableName,
        44 => return CudaError.DuplicateTextureName,
        45 => return CudaError.DuplicateSurfaceName,
        46 => return CudaError.DevicesUnavailable,
        49 => return CudaError.IncompatibleDriverContext,
        52 => return CudaError.MissingConfiguration,
        53 => return CudaError.PriorLaunchFailure,
        65 => return CudaError.LaunchMaxDepthExceeded,
        66 => return CudaError.LaunchFileScopedTex,
        67 => return CudaError.LaunchFileScopedSurf,
        68 => return CudaError.SyncDepthExceeded,
        69 => return CudaError.LaunchPendingCountExceeded,
        98 => return CudaError.InvalidDeviceFunction,
        100 => return CudaError.NoDevice,
        101 => return CudaError.InvalidDevice,
        102 => return CudaError.DeviceNotLicensed,
        103 => return CudaError.SoftwareValidityNotEstablished,
        127 => return CudaError.StartupFailure,
        200 => return CudaError.InvalidKernelImage,
        201 => return CudaError.DeviceUninitialized,
        205 => return CudaError.MapBufferObjectFailed,
        206 => return CudaError.UnmapBufferObjectFailed,
        207 => return CudaError.ArrayIsMapped,
        208 => return CudaError.AlreadyMapped,
        209 => return CudaError.NoKernelImageForDevice,
        210 => return CudaError.AlreadyAcquired,
        211 => return CudaError.NotMapped,
        212 => return CudaError.NotMappedAsArray,
        213 => return CudaError.NotMappedAsPointer,
        214 => return CudaError.ECCUncorrectable,
        215 => return CudaError.UnsupportedLimit,
        216 => return CudaError.DeviceAlreadyInUse,
        217 => return CudaError.PeerAccessUnsupported,
        218 => return CudaError.InvalidPtx,
        219 => return CudaError.InvalidGraphicsContext,
        220 => return CudaError.NvlinkUncorrectable,
        221 => return CudaError.JitCompilerNotFound,
        222 => return CudaError.UnsupportedPtxVersion,
        223 => return CudaError.JitCompilationDisabled,
        224 => return CudaError.UnsupportedExecAffinity,
        225 => return CudaError.UnsupportedDevSideSync,
        300 => return CudaError.InvalidSource,
        301 => return CudaError.FileNotFound,
        302 => return CudaError.SharedObjectSymbolNotFound,
        303 => return CudaError.SharedObjectInitFailed,
        304 => return CudaError.OperatingSystem,
        400 => return CudaError.InvalidResourceHandle,
        401 => return CudaError.IllegalState,
        402 => return CudaError.LossyQuery,
        500 => return CudaError.SymbolNotFound,
        600 => return CudaError.NotReady,
        700 => return CudaError.IllegalAddress,
        701 => return CudaError.LaunchOutOfResources,
        702 => return CudaError.LaunchTimeout,
        703 => return CudaError.LaunchIncompatibleTexturing,
        704 => return CudaError.PeerAccessAlreadyEnabled,
        705 => return CudaError.PeerAccessNotEnabled,
        708 => return CudaError.SetOnActiveProcess,
        709 => return CudaError.ContextIsDestroyed,
        710 => return CudaError.Assert,
        711 => return CudaError.TooManyPeers,
        712 => return CudaError.HostMemoryAlreadyRegistered,
        713 => return CudaError.HostMemoryNotRegistered,
        714 => return CudaError.HardwareStackError,
        715 => return CudaError.IllegalInstruction,
        716 => return CudaError.MisalignedAddress,
        717 => return CudaError.InvalidAddressSpace,
        718 => return CudaError.InvalidPc,
        719 => return CudaError.LaunchFailure,
        720 => return CudaError.CooperativeLaunchTooLarge,
        800 => return CudaError.NotPermitted,
        801 => return CudaError.NotSupported,
        802 => return CudaError.SystemNotReady,
        803 => return CudaError.SystemDriverMismatch,
        804 => return CudaError.CompatNotSupportedOnDevice,
        805 => return CudaError.MpsConnectionFailed,
        806 => return CudaError.MpsRpcFailure,
        807 => return CudaError.MpsServerNotReady,
        808 => return CudaError.MpsMaxClientsReached,
        809 => return CudaError.MpsMaxConnectionsReached,
        810 => return CudaError.MpsClientTerminated,
        811 => return CudaError.CdpNotSupported,
        812 => return CudaError.CdpVersionMismatch,
        900 => return CudaError.StreamCaptureUnsupported,
        901 => return CudaError.StreamCaptureInvalidated,
        902 => return CudaError.StreamCaptureMerge,
        903 => return CudaError.StreamCaptureUnmatched,
        904 => return CudaError.StreamCaptureUnjoined,
        905 => return CudaError.StreamCaptureIsolation,
        906 => return CudaError.StreamCaptureImplicit,
        907 => return CudaError.CapturedEvent,
        908 => return CudaError.StreamCaptureWrongThread,
        909 => return CudaError.Timeout,
        910 => return CudaError.GraphExecUpdateFailure,
        911 => return CudaError.ExternalDevice,
        912 => return CudaError.InvalidClusterSize,
        913 => return CudaError.FunctionNotLoaded,
        914 => return CudaError.InvalidResourceType,
        915 => return CudaError.InvalidResourceConfiguration,
        999 => return CudaError.Unknown,
        10000 => return CudaError.ApiFailureBase,
        else => unreachable,
    }
}

pub const CublasError = error{
    NOT_INITIALIZED,
    ALLOC_FAILED,
    INVALID_VALUE,
    ARCH_MISMATCH,
    MAPPING_ERROR,
    EXECUTION_FAILED,
    INTERNAL_ERROR,
    NOT_SUPPORTED,
    LICENSE_ERROR,
};

pub fn checkCublas(status: c.cublasStatus_t) CublasError!void {
    switch (status) {
        0 => {},
        1 => return CublasError.NOT_INITIALIZED,
        3 => return CublasError.ALLOC_FAILED,
        7 => return CublasError.INVALID_VALUE,
        8 => return CublasError.ARCH_MISMATCH,
        11 => return CublasError.MAPPING_ERROR,
        13 => return CublasError.EXECUTION_FAILED,
        14 => return CublasError.INTERNAL_ERROR,
        15 => return CublasError.NOT_SUPPORTED,
        16 => return CublasError.LICENSE_ERROR,
        else => unreachable,
    }
}
